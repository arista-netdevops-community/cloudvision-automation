basePath: /cvpservice
definitions:
  /aaa/AAA:
    properties:
      authenticationServerType:
        type: string
      authorizationServerType:
        type: string
    required:
      - authenticationServerType
      - authorizationServerType
  /aaa/AAADetails:
    properties:
      authenticationServerType:
        type: string
      authorizationServerType:
        type: string
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
    required:
      - factoryId
      - authenticationServerType
      - authorizationServerType
      - key
      - id
  /aaa/AAAServerAndUserForTest:
    properties:
      server:
        $ref: '#/definitions/~1aaa~1Server'
      user:
        $ref: '#/definitions/~1aaa~1User'
    required:
      - ipAddress
      - secret
      - authMode
      - status
      - port
      - accountPort
      - serverType
      - userId
      - password
  /aaa/AAAServerSettings:
    properties:
      accountPort:
        format: int32
        type: integer
      authMode:
        type: string
      createdDateInLongFormat:
        format: int64
        type: integer
      ipAddress:
        type: string
      port:
        format: int32
        type: integer
      secret:
        type: string
      serverType:
        type: string
      status:
        type: string
    required:
      - ipAddress
      - serverType
      - secret
      - createdDateInLongFormat
      - authMode
      - accountPort
      - port
      - status
  /aaa/AAAServerSettingsForEdit:
    properties:
      accountPort:
        format: int32
        type: integer
      authMode:
        type: string
      createdDateInLongFormat:
        format: int64
        type: integer
      ipAddress:
        type: string
      key:
        type: string
      port:
        format: int32
        type: integer
      secret:
        type: string
      serverType:
        type: string
      status:
        type: string
    required:
      - ipAddress
      - key
      - serverType
      - secret
      - createdDateInLongFormat
      - authMode
      - accountPort
      - port
      - status
  /aaa/Server:
    properties:
      accountPort:
        format: int32
        type: integer
      authMode:
        type: string
      ipAddress:
        type: string
      port:
        format: int32
        type: integer
      secret:
        type: string
      serverType:
        type: string
      status:
        type: string
    required:
      - ipAddress
      - secret
      - authMode
      - status
      - port
      - accountPort
      - serverType
  /aaa/SuccessResponse:
    properties:
      data:
        default: success
        type: string
    required:
      - data
  /aaa/User:
    properties:
      password:
        type: string
      userId:
        type: string
    required:
      - userId
      - password
  /aaa/aaaServers:
    properties:
      accountPort:
        format: int32
        type: integer
      authMode:
        type: string
      createdDateInLongFormat:
        format: int64
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      ipAddress:
        type: string
      key:
        type: string
      liveStatus:
        type: string
      port:
        format: int32
        type: integer
      secret:
        type: string
      serverType:
        type: string
      status:
        type: string
      userId:
        type: string
    required:
      - ipAddress
      - userId
      - factoryId
      - serverType
      - secret
      - createdDateInLongFormat
      - authMode
      - accountPort
      - liveStatus
      - status
      - key
      - id
      - port
  /aaa/createServerErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '212500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '212502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '212505'
        errorMessage: Unable to add new entity.
      - errorCode: '212507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '212508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '212509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '212510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '212511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '212512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '212513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '212514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '212516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '212518'
        errorMessage: Failure - Data already exists in Database
      - errorCode: '212520'
        errorMessage: Failure - Invalid input.
      - errorCode: '212521'
        errorMessage: Failure – Server already exists
      - errorCode: '212526'
        errorMessage: Failure - IP-Address is invalid.
      - errorCode: '212701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '212702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '212703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '212839'
        errorMessage: Invalid Authentication Mode
      - errorCode: ' 212718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /aaa/deleteServerErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '212500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '212502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '212507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '212508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '212509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '212511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '212512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '212513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '212516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '212519'
        errorMessage: Failure - Unable to delete the entity from database.
      - errorCode: '212701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '212702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '212703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '212718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /aaa/editServerErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '212500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '212502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '212505'
        errorMessage: Unable to add new entity.
      - errorCode: '212507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '212508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '212509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '212510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '212511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '212512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '212513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '212514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '212516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '212518'
        errorMessage: Failure - Data already exists in Database
      - errorCode: '212520'
        errorMessage: Failure - Invalid input.
      - errorCode: '212526'
        errorMessage: Failure - IP-Address is invalid.
      - errorCode: '212701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '212702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '212703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '212718'
        errorMessage: Invalid input parameters
      - errorCode: '212839'
        errorMessage: Invalid authentication mode.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /aaa/getAAADetailsByIdErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '211500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '212502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '212503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '212504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '212507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '212508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '212509'
        errorMessage: Failure- Unable to retrieve hazelcast map.
      - errorCode: '212511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map.
      - errorCode: '212512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '212513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '212514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '212516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '212701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '212718'
        errorMessage: Invalid input parameters
      - errorCode: '212801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /aaa/getServerByIdErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '211500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '212502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '212503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '212504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '212507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '212508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '212509'
        errorMessage: Failure- Unable to retrieve hazelcast map.
      - errorCode: '212511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map.
      - errorCode: '212512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '212513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '212514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '212516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '212701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '212718'
        errorMessage: Invalid input parameters
      - errorCode: '212801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /aaa/getServersErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '211500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '212502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '212503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '212504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '212507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '212508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '212509'
        errorMessage: Failure- Unable to retrieve hazelcast map.
      - errorCode: '212511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map.
      - errorCode: '212512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '212513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '212514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '212516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '212701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '212718'
        errorMessage: Invalid input parameters
      - errorCode: '212801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /aaa/saveAAADetailsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '212500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '212501'
        errorMessage: Failure - Unable to access / login to database
      - errorCode: '212502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '212506'
        errorMessage: Unable to update the entity.
      - errorCode: '212507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '212508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '212509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '212511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '212512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '212513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '212514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '212516'
        errorMessage: Failure - Unable to retrieve session from hazelcast map
      - errorCode: '212520'
        errorMessage: Failure - Invalid input.
      - errorCode: '212521'
        errorMessage: Failure - IPAddress already exist(s)
      - errorCode: '212701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '212702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '212703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '212706'
        errorMessage: Data is Empty.
      - errorCode: '212840'
        errorMessage: Invalid Authentication Server type
      - errorCode: '2121026'
        errorMessage: 'Unable to save, server not configured'
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /aaa/servers:
    properties:
      aaaServers:
        items:
          $ref: '#/definitions/~1aaa~1aaaServers'
        type: array
      total:
        format: int32
        type: integer
    required:
      - total
      - aaaServers
  /aaa/testServerConnectivityErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '211500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212402'
        errorMessage: Authentication client failure.
      - errorCode: '212500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '212501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '212502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '212507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '212508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '212509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '212511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '212512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '212513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '212516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '212701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '212702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '212703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '212802'
        errorMessage: Server unreachable.
      - errorCode: '2121013'
        errorMessage: Invalid user credentials
      - errorCode: '2121014'
        errorMessage: An unknown error has occurred from the authentication server
      - errorCode: '2121015'
        errorMessage: Invalid shared secret key
      - errorCode: '2121016'
        errorMessage: Access is denied due to invalid credential or invalid shared secret key
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /addTempAction/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122505'
        errorMessage: Unable to add new entity
      - errorCode: '122518'
        errorMessage: Data already exists in Database
      - errorCode: '122530'
        errorMessage: Invalid Device MAC ID
      - errorCode: '122534'
        errorMessage: Invalid Parent Container
      - errorCode: '122601'
        errorMessage: An EAPI request failure occurred
      - errorCode: '122605'
        errorMessage: Device not reachable
      - errorCode: '122703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122784'
        errorMessage: Unable to assign SYS_EapiCertProfile.
      - errorCode: '122785'
        errorMessage: Unable to unassign SYS_EapiCertProfile.
      - errorCode: '122838'
        errorMessage: Temp Action is not applicable
      - errorCode: '122850'
        errorMessage: Invalid Container Id
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
      - errorCode: '122856'
        errorMessage: Proposed Management IP is not set.
      - errorCode: '122891'
        errorMessage: NodeId not available
      - errorCode: '122929'
        errorMessage: Device is not ready. Registration in-progress
      - errorCode: '122949'
        errorMessage: Device is not ready. Registration failed.
      - errorCode: '1221022'
        errorMessage: Certificate installation in-progress
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configCompareCount:
    properties:
      mismatch:
        type: integer
      new:
        type: integer
      reconcile:
        type: integer
    required:
      - mismatch
      - reconcile
      - new
  /configlet:
    properties:
      config:
        type: string
      containerCount:
        type: integer
      dateTimeInLongFormat:
        format: int64
        type: integer
      editable:
        type: boolean
      factoryId:
        type: integer
      id:
        type: integer
      isAutoBuilder:
        type: string
      isDefault:
        type: string
      isDraft:
        default: false
        type: boolean
      key:
        type: string
      name:
        type: string
      netElementCount:
        type: integer
      note:
        type: string
      reconciled:
        type: boolean
      sslConfig:
        type: boolean
      type:
        type: string
      user:
        type: string
    required:
      - key
      - name
      - reconciled
      - config
      - user
      - note
      - containerCount
      - netElementCount
      - dateTimeInLongFormat
      - isDefault
      - isAutoBuilder
      - type
      - isDraft
      - editable
      - sslConfig
      - factoryId
      - id
  /configlet/addConfiglet:
    properties:
      config:
        type: string
      containerCount:
        type: integer
      dateTimeInLongFormat:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      isAutoBuilder:
        type: string
      isDefault:
        type: string
      isDraft:
        default: false
        type: boolean
      key:
        type: string
      name:
        type: string
      netElementCount:
        type: integer
      note:
        type: string
      reconciled:
        type: boolean
      type:
        type: string
      user:
        type: string
    required:
      - key
      - name
      - reconciled
      - config
      - user
      - note
      - containerCount
      - netElementCount
      - dateTimeInLongFormat
      - isDefault
      - isAutoBuilder
      - type
      - factoryId
      - id
  /configlet/addConfigletBuilderErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132820'
        errorMessage: Main script is empty.
      - errorCode: '132823'
        errorMessage: Configlet builder name already exist
      - errorCode: '132868'
        errorMessage: ID already available
      - errorCode: '1321004'
        errorMessage: Specified 'type' parameter is not correct.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/addConfigletErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132518'
        errorMessage: Data already exists in Database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/addConfigletJson:
    properties:
      data:
        type: string
    required:
      - data
  /configlet/addConfigletJson1:
    properties:
      data:
        items:
          $ref: '#/definitions/~1configlet~1addConfiglet'
        type: array
    required:
      - data
  /configlet/addConfigletsAndAssociatedMappersErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132505'
        errorMessage: Unable to add new entity
      - errorCode: '132518'
        errorMessage: Data already exists in Database
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132844'
        errorMessage: Invalid Type
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/addConfigletsAndAssociatedMappersItems:
    properties:
      configletBuilders:
        items:
          $ref: '#/definitions/~1configlet~1getConfigletBuilderData'
        type: array
      configletMappers:
        items:
          $ref: '#/definitions/~1configlet~1getConfigletMappers'
        type: array
      configlets:
        items:
          $ref: '#/definitions/~1configlet~1getConfigletByIdJson'
        type: array
      generatedConfigletMappers:
        items:
          $ref: '#/definitions/~1configlet~1addTempGeneratedConfiglet'
        type: array
    required:
      - configlets
      - configletBuilders
      - generatedConfigletMappers
      - configletMappers
  /configlet/addConfigletsAndAssociatedMappersJson:
    properties:
      data:
        $ref: '#/definitions/~1configlet~1addConfigletsAndAssociatedMappersItems'
    required:
      - data
  /configlet/addConfigletsAndAssociatedMappersRequest:
    properties:
      data:
        $ref: '#/definitions/~1configlet~1addConfigletsAndAssociatedMappersRequestItems'
    required:
      - data
  /configlet/addConfigletsAndAssociatedMappersRequestItems:
    properties:
      configletMappers:
        items:
          $ref: '#/definitions/~1configlet~1getConfigletMappers'
        type: array
      configlets:
        items:
          $ref: '#/definitions/~1configlet~1getConfigletByIdJson'
        type: array
      generatedConfigletMappers:
        items:
          $ref: '#/definitions/~1configlet~1addTempGeneratedConfiglet'
        type: array
    required:
      - configlets
      - generatedConfigletMappers
      - configletMappers
  /configlet/addNoteToConfigletErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132858'
        errorMessage: No such configlet
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/addNoteToConfigletJson:
    properties:
      data:
        type: string
    required:
      - data
  /configlet/addTempConfigletBuilderErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132781'
        errorMessage: Configlet cannot be edited.
      - errorCode: '132818'
        errorMessage: Invalid Configlet Builder Type
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/addTempGeneratedConfiglet:
    properties:
      action:
        type: string
      configletBuilderId:
        type: string
      configletId:
        type: string
      containerId:
        type: string
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      netElementId:
        type: string
      objectType:
        type: string
      previewValues:
        items:
          $ref: '#/definitions/~1configlet~1configletBuilderPreviewArray'
        type: array
      previewValuesListSize:
        type: integer
    required:
      - key
      - configletBuilderId
      - configletId
      - netElementId
      - containerId
      - action
      - previewValues
      - previewValuesListSize
      - factoryId
      - id
  /configlet/addTempGeneratedConfigletErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132505'
        errorMessage: Unable to add new entity
      - errorCode: '132507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '132508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '132509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '132511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '132512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '132513'
        errorMessage: Failure -Unable to shutdown hazelcast server
      - errorCode: '132515'
        errorMessage: Failure - Unable to add session to Hazelcast map
      - errorCode: '132516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '132518'
        errorMessage: Data already exists in Database
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '132718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/addTempGeneratedConfigletModel:
    properties:
      action:
        type: string
      configletId:
        type: string
      netElementId:
        type: string
      objectType:
        type: string
    required:
      - configletId
      - action
      - netElementId
      - objectType
  /configlet/autoConfigletGeneratorErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132518'
        errorMessage: Data already exists in Database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132827'
        errorMessage: No device(s) to generate configlet
      - errorCode: '132828'
        errorMessage: Empty ConfigletBuilder
      - errorCode: '1321034'
        errorMessage: SSL config builder cannot be generated.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/autoConfigletGeneratorJson:
    properties:
      data:
        items:
          $ref: '#/definitions/autoConfigletGeneratorDataArray'
        type: array
    required:
      - data
  /configlet/cancelConfigletBuilderErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/configletBuilderAddArray:
    properties:
      dataValidation:
        type: string
      dataValidationErrorExist:
        type: boolean
      depends:
        type: string
      fieldId:
        type: string
      fieldLabel:
        type: string
      helpText:
        type: string
      type:
        type: string
      validation:
        $ref: '#/definitions/~1configlet~1configletBuilderFormArrayValidation'
      value:
        type: string
    required:
      - fieldId
      - fieldLabel
      - type
      - value
      - depends
      - validation
      - dataValidation
      - dataValidationErrorExist
      - helpText
  /configlet/configletBuilderAddData:
    properties:
      formList:
        items:
          $ref: '#/definitions/~1configlet~1configletBuilderAddArray'
        type: array
      mainScript:
        $ref: '#/definitions/~1configlet~1configletBuilderAddDataMainScript'
    required:
      - formList
      - mainScript
  /configlet/configletBuilderAddDataMainScript:
    properties:
      data:
        type: string
    required:
      - data
  /configlet/configletBuilderFormArray:
    properties:
      dataValidation:
        type: string
      depends:
        type: string
      fieldId:
        type: string
      fieldLabel:
        type: string
      helpText:
        type: string
      key:
        type: string
      type:
        type: string
      validation:
        $ref: '#/definitions/~1configlet~1configletBuilderFormArrayValidation'
      value:
        type: string
    required:
      - type
      - fieldId
      - fieldLabel
      - value
      - depends
      - validation
      - dataValidation
      - helpText
      - key
  /configlet/configletBuilderFormArrayValidation:
    properties:
      mandatory:
        type: boolean
    required:
      - mandatory
  /configlet/configletBuilderPreviewArray:
    properties:
      fieldId:
        type: string
      value:
        type: string
    required:
      - fieldId
      - value
  /configlet/configletBuilderPreviewArrayJson:
    properties:
      configlet:
        $ref: '#/definitions/~1configlet~1configletWithTempConfigletObjectIdMapperJson'
      isExistingGc:
        type: boolean
    required:
      - configlet
  /configlet/configletBuilderPreviewErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132824'
        errorMessage: Main Script is Empty
      - errorCode: '132929'
        errorMessage: Device is not ready. Registration in-progress.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/configletBuilderPreviewJson:
    properties:
      data:
        items:
          $ref: '#/definitions/~1configlet~1configletBuilderPreviewArrayJson'
        type: array
    required:
      - data
  /configlet/configletBuildermainScriptArray:
    properties:
      data:
        type: string
      key:
        type: string
    required:
      - data
      - key
  /configlet/configletEventJson:
    properties:
      data:
        type: string
      eventId:
        type: string
    required:
      - eventId
      - data
  /configlet/configletWithTempConfigletObjectIdMapperJson:
    properties:
      config:
        type: string
      containerCount:
        type: integer
      dateTimeInLongFormat:
        type: integer
      factoryId:
        type: integer
      'id ':
        type: integer
      isAutoBuilder:
        type: string
      isDefault:
        type: string
      'key ':
        type: string
      'name ':
        type: string
      netElementCount:
        type: integer
      note:
        type: string
      reconciled:
        type: boolean
      tempConfigletObjectIdMapper:
        $ref: '#/definitions/~1configlet~1tempConfigletObjectIdMapperJson'
      'type ':
        type: string
      user:
        type: string
    required:
      - factoryId
      - reconciled
      - isDefault
      - note
      - containerCount
      - netElementCount
      - isAutoBuilder
      - dateTimeInLongFormat
      - user
      - config
      - 'name '
      - 'key '
      - 'id '
      - 'type '
      - tempConfigletObjectIdMapper
  /configlet/deleteConfigletErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132782'
        errorMessage: Non editable configlet cannot be deleted.
      - errorCode: '132890'
        errorMessage: Invalid combination. Delete operation will not be proceeded.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/exportConfigletsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132505'
        errorMessage: Unable to add new entity
      - errorCode: '132507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '132508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '132509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '132511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '132512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '132513'
        errorMessage: Failure -Unable to shutdown hazelcast server
      - errorCode: '132515'
        errorMessage: Failure - Unable to add session to Hazelcast map
      - errorCode: '132516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '132518'
        errorMessage: Data already exists in Database
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132801'
        errorMessage: Entity does not exist
      - errorCode: '132852'
        errorMessage: Invalid Configlet id
      - errorCode: '132864'
        errorMessage: Configlets/Configlet builders cannot be exported
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getAppliedContainersArray:
    properties:
      appliedBy:
        type: string
      appliedDate:
        type: integer
      containerName:
        type: string
      hostName:
        type: string
      ipAddress:
        type: string
      totalDevicesCount:
        type: integer
    required:
      - appliedBy
      - ipAddress
      - containerName
      - appliedDate
      - totalDevicesCount
      - hostName
  /configlet/getAppliedContainersErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132852'
        errorMessage: Invalid Configlet id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getAppliedContainersJson:
    properties:
      data:
        items:
          $ref: '#/definitions/~1configlet~1getAppliedContainersArray'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /configlet/getAppliedDeviceCountErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132852'
        errorMessage: Invalid Configlet id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getAppliedDevicesArray:
    properties:
      appliedBy:
        type: string
      appliedDate:
        type: integer
      containerName:
        type: string
      hostName:
        type: string
      ipAddress:
        type: string
      totalDevicesCount:
        type: integer
    required:
      - ipAddress
      - appliedBy
      - containerName
      - totalDevicesCount
      - appliedDate
      - hostName
  /configlet/getAppliedDevicesCountJson:
    properties:
      data:
        type: integer
    required:
      - data
  /configlet/getAppliedDevicesErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132852'
        errorMessage: Invalid Configlet Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getAppliedDevicesJson:
    properties:
      data:
        items:
          $ref: '#/definitions/~1configlet~1getAppliedDevicesArray'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /configlet/getConfigletBuilderData:
    properties:
      formList:
        items:
          $ref: '#/definitions/~1configlet~1getConfigletBuilderFormListArray'
        type: array
      isAssigned:
        type: boolean
      mainScript:
        $ref: '#/definitions/~1configlet~1getConfigletBuilderMainScript'
      name:
        type: string
      sslConfig:
        type: boolean
    required:
      - formList
      - name
      - mainScript
      - isAssigned
  /configlet/getConfigletBuilderErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132801'
        errorMessage: Entity does not exist
      - errorCode: '132818'
        errorMessage: Invalid Configlet Builder Type
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getConfigletBuilderFormListArray:
    properties:
      configletBuilderId:
        type: string
      dataValidation:
        type: string
      dataValidationErrorExist:
        type: boolean
      depends:
        type: string
      factoryId:
        type: integer
      fieldId:
        type: string
      fieldLabel:
        type: string
      helpText:
        type: string
      id:
        type: integer
      key:
        type: string
      orderId:
        type: integer
      type:
        type: string
      validation:
        $ref: '#/definitions/~1configlet~1getConfigletBuilderFormValidation'
      value:
        type: string
    required:
      - factoryId
      - configletBuilderId
      - fieldId
      - fieldLabel
      - depends
      - validation
      - dataValidation
      - helpText
      - orderId
      - dataValidationErrorExist
      - value
      - key
      - id
      - type
  /configlet/getConfigletBuilderFormValidation:
    properties:
      factoryId:
        type: integer
      id:
        type: integer
      mandatory:
        type: boolean
    required:
      - factoryId
      - mandatory
      - id
  /configlet/getConfigletBuilderJson:
    properties:
      data:
        $ref: '#/definitions/~1configlet~1getConfigletBuilderData'
    required:
      - data
  /configlet/getConfigletBuilderMainScript:
    properties:
      data:
        type: string
      sessionId:
        type: string
    required:
      - data
      - sessionId
  /configlet/getConfigletByIdErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132801'
        errorMessage: Entity does not exist
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getConfigletByIdJson:
    properties:
      config:
        type: string
      containerCount:
        type: integer
      dateTimeInLongFormat:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      isAutoBuilder:
        type: string
      isDefault:
        type: string
      isDraft:
        default: false
        type: boolean
      key:
        type: string
      name:
        type: string
      netElementCount:
        type: integer
      note:
        type: string
      reconciled:
        type: boolean
      type:
        type: string
      user:
        type: string
    required:
      - factoryId
      - reconciled
      - isDefault
      - note
      - containerCount
      - netElementCount
      - isAutoBuilder
      - dateTimeInLongFormat
      - user
      - config
      - 'name '
      - 'key '
      - 'id '
      - 'type '
  /configlet/getConfigletByNameErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132801'
        errorMessage: Entity does not exist
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getConfigletHistoryArray:
    properties:
      configletId:
        type: string
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      newConfig:
        type: string
      newDate:
        type: string
      newUserId:
        type: string
      oldConfig:
        type: string
      oldDate:
        type: string
      oldDateTimeInLongFormat:
        type: integer
      oldUserId:
        type: string
      updatedDateTimeInLongFormat:
        type: integer
    required:
      - configletId
      - factoryId
      - oldUserId
      - newUserId
      - oldConfig
      - newConfig
      - oldDate
      - newDate
      - oldDateTimeInLongFormat
      - updatedDateTimeInLongFormat
      - key
      - id
  /configlet/getConfigletHistoryJson:
    properties:
      configletHistory:
        items:
          $ref: '#/definitions/~1configlet~1getConfigletHistoryArray'
        type: array
      total:
        type: integer
    required:
      - total
      - configletHistory
  /configlet/getConfigletHistoryJsonErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132532'
        errorMessage: Failure -  No data found.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132852'
        errorMessage: Invalid Configlet Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getConfigletMappers:
    properties:
      appliedBy:
        type: string
      appliedDateInLongFormat:
        type: integer
      configletId:
        type: string
      configletType:
        type: string
      containerId:
        type: string
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      objectId:
        type: string
      type:
        type: string
    required:
      - key
      - configletId
      - type
      - objectId
      - containerId
      - appliedBy
      - configletType
      - appliedDateInLongFormat
      - factoryId
      - id
  /configlet/getConfigletsAndAssociatedMappersErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132518'
        errorMessage: Data already exists in Database
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getConfigletsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132801'
        errorMessage: Entity does not exist
      - errorCode: '132818'
        errorMessage: Invalid Configlet Builder Type
      - errorCode: '132857'
        errorMessage: Invalid Configlet Type
      - errorCode: '132923'
        errorMessage: Invalid sort column
      - errorCode: '132924'
        errorMessage: Invalid sort order
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getConfigletsJson:
    properties:
      data:
        items:
          $ref: '#/definitions/~1configlet~1getConfigletByIdJson'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /configlet/getCurrentManagementIp:
    properties:
      data:
        type: string
    required:
      - data
  /configlet/getCurrentManagementIpErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132851'
        errorMessage: Invalid Netelement id
      - errorCode: '132852'
        errorMessage: Invalid Configlet id.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getHierarchicalBuilderCountData:
    properties:
      builderCount:
        type: integer
    required:
      - builderCount
  /configlet/getHierarchicalBuilderCountErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132850'
        errorMessage: Invalid Container id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getHierarchicalBuilderCountJson:
    properties:
      data:
        $ref: '#/definitions/~1configlet~1getHierarchicalBuilderCountData'
    required:
      - data
  /configlet/getHierarchicalBuilderJson:
    properties:
      buildMapperList:
        items:
          $ref: '#/definitions/~1configlet~1getHierarchicalBuilderbuildMapperList'
        type: array
      builderList:
        items:
          $ref: '#/definitions/~1configlet~1getConfigletByIdJson'
        type: array
      total:
        type: integer
    required:
      - total
      - buildMapperList
      - builderList
  /configlet/getHierarchicalBuilderbuildMapperList:
    properties:
      builderId:
        type: string
      builderName:
        type: string
      containerId:
        type: string
      containerName:
        type: string
    required:
      - containerName
      - containerId
      - builderId
      - builderName
  /configlet/getHierarchicalConfigletBuildersErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132850'
        errorMessage: Invalid Container id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getManagementIpArray:
    properties:
      address:
        type: string
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      netElementId:
        type: string
      type:
        type: string
      userId:
        type: string
    required:
      - factoryId
      - userId
      - address
      - name
      - key
      - id
      - type
      - netElementId
  /configlet/getManagementIpErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132852'
        errorMessage: Invalid Configlet id.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/getManagementIpJson:
    properties:
      defaultProposedManagementIp:
        $ref: '#/definitions/~1configlet~1getManagementIpArray'
      managementIps:
        items:
          $ref: '#/definitions/~1configlet~1getManagementIpArray'
        type: array
      total:
        type: integer
    required:
      - total
      - managementIps
      - defaultProposedManagementIp
  /configlet/importConfigletsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132505'
        errorMessage: Unable to add new entity
      - errorCode: '132507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '132508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '132509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '132511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '132512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '132513'
        errorMessage: Failure -Unable to shutdown hazelcast server
      - errorCode: '132515'
        errorMessage: Failure - Unable to add session to Hazelcast map
      - errorCode: '132516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '132518'
        errorMessage: Data already exists in Database
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132861'
        errorMessage: Imported file is not supported by CloudVision Portal
      - errorCode: '132862'
        errorMessage: Imported file does not have valid json input
      - errorCode: '132863'
        errorMessage: Failed to import configlets
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/searchConfigletsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132818'
        errorMessage: Invalid Configlet Builder Type
      - errorCode: '132923'
        errorMessage: Invalid sort column
      - errorCode: '132924'
        errorMessage: Invalid sort order
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/tempConfigletObjectIdMapperJson:
    properties:
      action:
        type: string
      assigned:
        type: string
      configletId:
        type: string
      factoryId:
        type: string
      id:
        type: string
      objectId:
        type: string
      objectName:
        type: string
      parentId:
        type: string
      sessionId:
        type: string
      type:
        type: string
    required:
      - action
      - assigned
      - configletId
      - factoryId
      - id
      - objectId
      - objectName
      - parentId
      - sessionId
      - type
  /configlet/updateConfigletBuilderErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132506'
        errorMessage: Unable to update the entity
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132820'
        errorMessage: Main script is empty
      - errorCode: '132823'
        errorMessage: Configlet builder name already exist
      - errorCode: '132849'
        errorMessage: Invalid Action Type
      - errorCode: '1321004'
        errorMessage: Specified 'type' parameter is not correct.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/updateConfigletErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132506'
        errorMessage: Unable to update the entity
      - errorCode: '132518'
        errorMessage: Data already exists in Database
      - errorCode: '132519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '132532'
        errorMessage: Failure -  No data found.
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132781'
        errorMessage: Configlet cannot be edited.
      - errorCode: '132858'
        errorMessage: Genereted configlet cannot be edited
      - errorCode: '132940'
        errorMessage: Reconciled configlet cannot be edited
      - errorCode: '132941'
        errorMessage: Cannot save because reconcile param is set to true
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/updateConfigletJson:
    properties:
      data:
        type: string
    required:
      - data
  /configlet/validateConfigErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132602'
        errorMessage: An EAPI request failure occurred
      - errorCode: '132605'
        errorMessage: 'Device not reachable '
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/validateConfigHistoryArray:
    properties:
      blockId:
        type: string
      code:
        type: string
      command:
        type: string
      rowId:
        type: integer
    required:
      - code
      - blockId
      - command
      - rowId
  /configlet/validateConfigHistoryErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132532'
        errorMessage: Failure -  No data found.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/validateConfigHistoryJson:
    properties:
      deleted:
        type: integer
      mismatch:
        type: integer
      new:
        type: integer
      newConfig:
        items:
          $ref: '#/definitions/~1configlet~1validateConfigHistoryArray'
        type: array
      oldConfig:
        items:
          $ref: '#/definitions/~1configlet~1validateConfigHistoryArray'
        type: array
      total:
        type: integer
    required:
      - newConfig
      - oldConfig
      - new
      - total
      - mismatch
      - deleted
  /configlet/validateConfigJson:
    properties:
      errorCount:
        type: integer
      errors:
        items:
          $ref: '#/definitions/configlet~1validateConfigWarningType'
        type: array
      warningCount:
        type: integer
      warnings:
        items:
          $ref: '#/definitions/configlet~1validateConfigErrorType'
        type: array
    required:
      - warnings
      - warningCount
      - errors
      - errorCount
  /configlet/validateScriptErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '132703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '132820'
        errorMessage: Main script is empty.
      - errorCode: '132929'
        errorMessage: Device is not ready. Registration in-progress.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /configlet/validateScriptJson:
    properties:
      result:
        type: string
      status:
        type: string
    required:
      - result
      - status
  /data2Array:
    properties:
      config_push_count:
        type: integer
      image_push_count:
        type: integer
      period:
        type: string
      periodStartTimestamp:
        format: int64
        type: integer
    required:
      - image_push_count
      - periodStartTimestamp
      - config_push_count
      - period
  /dataSuccess:
    properties:
      data:
        type: string
    required:
      - data
  /dataSuccessWithTaskIds:
    properties:
      data:
        $ref: '#/definitions/~1dataSuccessWithTaskIdsData'
    required:
      - data
  /dataSuccessWithTaskIdsData:
    properties:
      status:
        type: string
      taskIds:
        items:
          type: string
        type: array
    required:
      - status
      - taskIds
  /deleteAllTempAction/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122519'
        errorMessage: Failure - Unable to delete the entity from database
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /deleteAllTempAction/SuccessResponse:
    properties:
      data:
        type: string
    required:
      - data
  /deleteTempAction/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '122718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /deleteTempAction/SuccessResponse:
    properties:
      Result:
        type: string
    required:
      - Result
  /deviceStatus:
    properties:
      critical:
        type: integer
      imageUpgrade:
        type: integer
      normal:
        type: integer
      task:
        type: integer
      unAuthorized:
        type: integer
      warning:
        type: integer
    required:
      - critical
      - warning
      - normal
      - imageUpgrade
      - task
      - unAuthorized
  /event:
    properties:
      cancelled:
        type: integer
      data:
        type: object
      data1:
        type: object
      description:
        type: string
      endDateLongFormat:
        format: int64
        type: integer
      errors:
        type: integer
      eventType:
        type: string
      factoryId:
        type: integer
      fqdn:
        type: string
      id:
        type: integer
      inprogress:
        type: integer
      ipAddress:
        type: string
      isCancelInitiated:
        type: boolean
      isNotificationNeeded:
        type: boolean
      key:
        type: string
      message:
        type: string
      objectId:
        type: string
      objectName:
        type: string
      objectType:
        type: string
      parentKey:
        type: string
      processed:
        type: integer
      startDateLongFormat:
        format: int64
        type: integer
      status:
        type: string
      total:
        type: integer
      user:
        type: string
      userCredentials:
        type: string
      warning:
        type: integer
    required:
      - key
      - parentKey
      - objectId
      - objectName
      - objectType
      - eventType
      - user
      - startDateLongFormat
      - endDateLongFormat
      - description
      - userCredentials
      - total
      - cancelled
      - processed
      - inprogress
      - errors
      - warning
      - status
      - message
      - data
      - data1
      - isCancelInitiated
      - isNotificationNeeded
      - id
      - factoryId
      - ipAddress
      - fqdn
  /event/cancelEventErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '241500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '242503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '242504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '242505'
        errorMessage: Unable to add new entity
      - errorCode: '242506'
        errorMessage: Unable to update the entity
      - errorCode: '242508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '242509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '242510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '242513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '242713'
        errorMessage: There is no such event available
      - errorCode: '242714'
        errorMessage: The current user doesn't have permission for this event
      - errorCode: '242715'
        errorMessage: Event already completed
      - errorCode: '242718'
        errorMessage: Invalid input parameters
      - errorCode: '242801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /event/eventErrorData:
    properties:
      eventList:
        items:
          $ref: '#/definitions/~1event~1getEventData'
        type: array
      mapper:
        type: object
      objectName:
        type: string
    required:
      - eventList
      - mapper
      - objectName
  /event/getAllEventsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '241500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '242503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '242504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '242508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '242509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '242510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '242513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '242718'
        errorMessage: Invalid input parameters
      - errorCode: '242801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /event/getAllEventsSuccessResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/~1event~1getEventData'
        type: array
      externalEvents:
        $ref: '#/definitions/getExternalEventData'
      total:
        type: integer
    required:
      - total
      - data
      - externalEvents
  /event/getErrorEventsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '241500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '242503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '242504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '242508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '242509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '242510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '242513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '242713'
        errorMessage: There is no such event available
      - errorCode: '242718'
        errorMessage: Invalid input parameters
      - errorCode: '242801'
        errorMessage: Entity does not exist
      - errorCode: '242835'
        errorMessage: Invalid Event Id
      - errorCode: '242836'
        errorMessage: Invalid Event Type
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /event/getErrorEventsSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/~1event~1eventErrorData'
      total:
        type: integer
    required:
      - total
      - data
  /event/getEventByIdErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '241500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '242503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '242504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '242508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '242509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '242510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '242513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '242519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '242718'
        errorMessage: Invalid input parameters
      - errorCode: '242835'
        errorMessage: Invalid Event Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /event/getEventByIdSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/~1event~1getEventData'
    required:
      - data
  /event/getEventData:
    properties:
      cancelled:
        type: integer
      data:
        type: object
      data1:
        type: object
      description:
        type: string
      endDateLongFormat:
        format: int64
        type: integer
      errors:
        type: integer
      eventType:
        type: string
      factoryId:
        type: integer
      fqdn:
        type: string
      id:
        type: integer
      inprogress:
        type: integer
      ipAddress:
        type: string
      isCancelInitiated:
        type: boolean
      isNotificationNeeded:
        type: boolean
      key:
        type: string
      message:
        type: string
      objectId:
        type: string
      objectName:
        type: string
      objectType:
        type: string
      parentKey:
        type: string
      processed:
        type: integer
      startDateLongFormat:
        format: int64
        type: integer
      status:
        type: string
      total:
        type: integer
      user:
        type: string
      userCredentials:
        type: string
      warning:
        type: integer
    required:
      - key
      - parentKey
      - objectId
      - objectName
      - objectType
      - eventType
      - user
      - startDateLongFormat
      - endDateLongFormat
      - description
      - userCredentials
      - total
      - cancelled
      - processed
      - inprogress
      - errors
      - warning
      - status
      - message
      - data
      - data1
      - isCancelInitiated
      - isNotificationNeeded
      - id
      - factoryId
      - ipAddress
      - fqdn
  /event/getEventDataByIdErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '241500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '242503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '242504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '242508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '242509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '242510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '242513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '242519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '242718'
        errorMessage: Invalid input parameters
      - errorCode: '242801'
        errorMessage: Entity does not exist.
      - errorCode: '242835'
        errorMessage: Invalid Event Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /event/getEventDataByIdSuccessResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/~1event~1getEventData'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /event/getEventInfoErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '241500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '242503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '242504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '242508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '242509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '242510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '242513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '242713'
        errorMessage: There is no such event available
      - errorCode: '242718'
        errorMessage: Invalid input parameters
      - errorCode: '242801'
        errorMessage: Entity does not exist
      - errorCode: '242835'
        errorMessage: Invalid Event Id
      - errorCode: '242836'
        errorMessage: Invalid Event Type
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /event/getEventInfoSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/~1event~1eventErrorData'
      total:
        type: integer
    required:
      - total
      - data
  /event/markAsReadErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '241500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '242502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '242503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '242504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '242508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '242509'
        errorMessage: Failure- Unable to retrieve hazelcast map
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /event/sucessStringResponse:
    properties:
      data:
        type: string
    required:
      - data
  /filterTopology/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122801'
        errorMessage: Entity does not exist
      - errorCode: '122891'
        errorMessage: NodeId not available.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /filterTopologyJson:
    properties:
      list:
        $ref: '#/definitions/~1topology'
      topology:
        $ref: '#/definitions/~1topology'
      type:
        type: string
    required:
      - type
  /getAllTempActions/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getAllTempActions/SuccessResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/~1tempAction'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /getConfigForTaskjson:
    properties:
      configs:
        items:
          $ref: '#/definitions/~1configlet'
        type: array
      designedConfig:
        items:
          $ref: '#/definitions/~1getConfigForTaskjson~1designedConfig'
        type: array
      errors:
        type: string
      isReconcileInvoked:
        type: boolean
      mismatch:
        type: integer
      new:
        type: integer
      reconcile:
        type: integer
      reconciledConfig:
        type: string
      runningConfig:
        items:
          $ref: '#/definitions/~1getConfigForTaskjson~1designedConfig'
        type: array
      targetIpAddress:
        type: string
      total:
        type: integer
      warning:
        items:
          type: string
        type: array
    required:
      - reconciledConfig
      - reconcile
      - new
      - configs
      - designedConfig
      - total
      - runningConfig
      - isReconcileInvoked
      - mismatch
      - warning
      - errors
      - targetIpAddress
  /getConfigForTaskjson/designedConfig:
    properties:
      blockId:
        type: string
      code:
        type: string
      command:
        type: string
      rowId:
        type: integer
    required:
      - command
      - rowId
      - code
      - blockId
  /getConfigletsByContainerId/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122850'
        errorMessage: Invalid Container Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getConfigletsByContainerId/SuccessResponse:
    properties:
      configletList:
        items:
          $ref: '#/definitions/~1configlet'
        type: array
      configletMapper:
        $ref: '#/definitions/getConfigletByAnyMapperModel'
      total:
        type: integer
    required:
      - total
      - configletList
      - configletMapper
  /getConfigletsByNetElementId/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getContainerInfoById/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122850'
        errorMessage: Invalid Container Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getImageBundleByContainerId/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122850'
        errorMessage: Invalid Container Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getImageBundleByNetElementId/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getImageForTask/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122706'
        errorMessage: Data is Empty.
      - errorCode: '122718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getLabelsByNetElementId:
    properties:
      labelList:
        items:
          $ref: '#/definitions/~1label'
        type: array
      total:
        type: integer
    required:
      - labelList
      - total
  /getLabelsByNetElementId/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getNetElementImageById/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getNetElementInfoById/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getNetElementInfoById/SuccessResponse:
    properties:
      bundleName:
        type: string
      eosVersion:
        type: string
      fqdn:
        type: string
      imageBundleId:
        type: string
      imageBundleMapper:
        $ref: '#/definitions/getImageBundleByAnyMapperModel'
      ipAddress:
        type: string
      macAddress:
        type: string
      serialNumber:
        type: string
    required:
      - macAddress
      - serialNumber
      - eosVersion
      - fqdn
      - imageBundleMapper
      - ipAddress
      - bundleName
      - imageBundleId
  /getNetElementList/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122850'
        errorMessage: Invalid Container Id
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
      - errorCode: '122853'
        errorMessage: Invalid Key value.
      - errorCode: '122891'
        errorMessage: NodeId not available.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getNetElementList/SuccessResponse:
    properties:
      containerList:
        items:
          $ref: '#/definitions/~1netelementContainerListjson'
        type: array
      netElementList:
        items:
          $ref: '#/definitions/~1netElement'
        type: array
      totalCount:
        type: integer
    required:
      - totalCount
      - netElementList
      - containerList
  /getProposedContainerData:
    properties:
      dateTimeInLongFormat:
        format: int64
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      mode:
        type: string
      name:
        type: string
      root:
        type: boolean
      undefined:
        type: boolean
      userId:
        type: string
    required:
      - dateTimeInLongFormat
      - factoryId
      - id
      - key
      - mode
      - name
      - root
      - undefined
      - userId
  /getTempConfigsByContainerId/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122850'
        errorMessage: Invalid Container Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getTempConfigsByNetElementId/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
      - errorCode: '122929'
        errorMessage: Device is not ready. Registration in-progress.
      - errorCode: '122944'
        errorMessage: The current EOS version on this device is not supported by CVP. Please upgrade the device to manage.
      - errorCode: '122949'
        errorMessage: Device is not ready. Registration failed.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getTempLabelsByNetElementId:
    properties:
      assignedLabels:
        items:
          $ref: '#/definitions/~1label'
        type: array
      existingLabels:
        items:
          $ref: '#/definitions/~1label'
        type: array
      ignoredLabels:
        items:
          $ref: '#/definitions/~1label'
        type: array
    required:
      - assignedLabels
      - existingLabels
      - ignoredLabels
  /getTempLabelsByNetElementId/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
      - errorCode: '122929'
        errorMessage: Device is not ready. Registration in-progress.
      - errorCode: '122949'
        errorMessage: Device is not ready. Registration failed.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /getconfigfortask/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122401'
        errorMessage: Unauthorized user
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122605'
        errorMessage: Device not reachable
      - errorCode: '122706'
        errorMessage: Data is Empty
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122751'
        errorMessage: Device certificate not installed
      - errorCode: '1221029'
        errorMessage: SSL configuration unavailable
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/addImageErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '161812'
        errorMessage: 'Failure - Only .swi, .swix and .rpm files can be uploaded'
      - errorCode: '162422'
        errorMessage: Unprocessable entity - corrupt file
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162507'
        errorMessage: Failure - Unable to add file to persistent file system
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '162702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '162703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162814'
        errorMessage: This image is already available in the image bundle
      - errorCode: '162815'
        errorMessage: 'Cannot proceed, because CloudVision Portal does not support the version '
      - errorCode: '162819'
        errorMessage: 'Invalid extension/patch file, cannot proceed with upload.'
      - errorCode: '162876'
        errorMessage: 'Upload failed: Image with the same name already exists'
      - errorCode: '162935'
        errorMessage: Cannot allow upload because file name contain space
      - errorCode: '162938'
        errorMessage: Could not upload file because file Name already exists.
      - errorCode: '162945'
        errorMessage: RebootRequired flag must be true for SWI images
      - errorCode: '1621202'
        errorMessage: Invalid ImageBundle metadata
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/addImageSucessResponseJson:
    properties:
      imageId:
        type: string
      imageSize:
        type: string
      isRebootRequired:
        type: string
      md5:
        type: string
      name:
        type: string
      result:
        type: string
      sha512:
        type: string
      swiMaxHwepoch:
        type: string
      swiVarient:
        type: string
      version:
        type: string
    required:
      - result
      - imageId
      - name
      - sha512
      - swiVarient
      - imageSize
      - version
      - md5
      - swiMaxHwepoch
      - isRebootRequired
  /image/addNotesToImageBundleErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162506'
        errorMessage: Unable to update the entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '162702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '162703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162801'
        errorMessage: Entity does not exist.
      - errorCode: '162842'
        errorMessage: There is no such image bundle available
      - errorCode: '1621202'
        errorMessage: Invalid ImageBundle metadata
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/cancelImagesErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162506'
        errorMessage: Unable to update the entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '162650'
        errorMessage: Error occurred while doing file system operation in HDFS
      - code: 162651
        errorCode: '162651'
        errorMessage: File not found in HDFS
      - errorCode: '162701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '162702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '162703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162843'
        errorMessage: There is no such image available
      - errorCode: '1621201'
        errorMessage: Invalid Image metadata
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/deleteImageBundlesErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162506'
        errorMessage: Unable to update the entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '162701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '162702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '162703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162801'
        errorMessage: Entity does not exist.
      - errorCode: '162842'
        errorMessage: There is no such image bundle available
      - errorCode: '162843'
        errorMessage: There is no such image available
      - errorCode: '162854'
        errorMessage: Imagebundle assigned to device/container cannot be deleted
      - errorCode: '1621202'
        errorMessage: Invalid ImageBundle metadata
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/getAppliedDeviceCountErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '161718'
        errorMessage: Invalid input parameters
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '162703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '162801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/getAppliedDeviceJson:
    properties:
      data:
        default: 0
        type: integer
    required:
      - data
  /image/getImageBundleAppliedContainersErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162801'
        errorMessage: Entity does not exist.
      - errorCode: '162843'
        errorMessage: There is no such image available
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/getImageBundleAppliedDevicesErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162801'
        errorMessage: Entity does not exist.
      - errorCode: '162843'
        errorMessage: There is no such image available
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/getImageBundleByNameErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Unable to load data from persistence store
      - errorCode: '162533'
        errorMessage: SQLPredicateBuilder Exception
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/getImageBundlesErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162533'
        errorMessage: SQLPredicateBuilder Exception
      - errorCode: '162702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/getImagesErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/saveImageBundleErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '161507'
        errorMessage: Unable to start hazelcast server
      - errorCode: '161811'
        errorMessage: Failure - Only one swi image can be uploaded per bundle
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162506'
        errorMessage: Failure - Unable to update the entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162518'
        errorMessage: Data already exists in Database
      - errorCode: '162651'
        errorMessage: File not found in HDFS
      - errorCode: '162701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '162702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '162703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162810'
        errorMessage: Name cannot be empty
      - errorCode: '162812'
        errorMessage: 'Failure - Only .swi, .swix and .rpm files can be uploaded'
      - errorCode: '162813'
        errorMessage: Failure - Can't save because image file wasn't found.
      - errorCode: '162814'
        errorMessage: This image is already available in the image bundle
      - errorCode: '162815'
        errorMessage: 'Cannot proceed, because CloudVision Portal does not support the version'
      - errorCode: '162843'
        errorMessage: There is no such image available
      - errorCode: '162945'
        errorMessage: RebootRequired flag must be true for SWI images
      - errorCode: '1621193'
        errorMessage: SWI does not contain a supported TerminAttr version. A separate supported TerminAttr extension is required.
      - errorCode: '1621202'
        errorMessage: Invalid ImageBundle metadata
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /image/updateImageBundleErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '161500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '161811'
        errorMessage: Failure - Only one swi image can be uploaded per bundle
      - errorCode: '162500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '162502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '162503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '162504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '162505'
        errorMessage: Unable to add new entity
      - errorCode: '162506'
        errorMessage: Unable to update the entity
      - errorCode: '162508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '162509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '162510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '162513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '162518'
        errorMessage: Data already exists in Database
      - errorCode: '162519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '162651'
        errorMessage: File not found in HDFS
      - errorCode: '162701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '162702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '162703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '162718'
        errorMessage: Invalid input parameters
      - errorCode: '162801'
        errorMessage: Entity does not exist.
      - errorCode: '162812'
        errorMessage: 'Failure - Only .swi, .swix and .rpm files can be uploaded'
      - errorCode: '162813'
        errorMessage: Failure - Can't save because image file wasn't found.
      - errorCode: '162814'
        errorMessage: This image is already available in the image bundle
      - errorCode: '162815'
        errorMessage: 'Cannot proceed, because CloudVision Portal does not support the version '
      - errorCode: '162843'
        errorMessage: There is no such image available
      - errorCode: '162945'
        errorMessage: RebootRequired flag must be true for SWI images
      - errorCode: '1621193'
        errorMessage: SWI does not contain a supported TerminAttr version. A separate supported TerminAttr extension is required.
      - errorCode: '1621201'
        errorMessage: Invalid Image metadata
      - errorCode: '1621202'
        errorMessage: Invalid ImageBundle metadata
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /images/getImageBundleAppliedDevicesResponseJson:
    properties:
      data:
        items:
          $ref: '#/definitions/getImageBundleAppliedDevicesData'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /images/getImageBundleByNameResponseJson:
    properties:
      appliedContainersCount:
        type: integer
      appliedDevicesCount:
        type: integer
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/getImagesData'
        type: array
      isCertifiedImage:
        type: string
      name:
        type: string
      updatedTimeInLongFormat:
        format: int64
        type: integer
      uploadedBy:
        type: string
    required:
      - id
      - name
      - isCertifiedImage
      - images
      - appliedContainersCount
      - appliedDevicesCount
      - uploadedBy
      - updatedTimeInLongFormat
  /images/getImageBundlesResponseJson:
    properties:
      assignedImageBundleId:
        type: string
      data:
        items:
          $ref: '#/definitions/getImagesBundleData'
        type: array
      imageBundleMapper:
        $ref: '#/definitions/imageBundleMapperField'
      total:
        type: integer
    required:
      - total
      - data
  /images/getImageResponseJson:
    properties:
      data:
        items:
          $ref: '#/definitions/getImagesData'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /images/saveImageBundleResponseJson:
    properties:
      data:
        type: string
    required:
      - data
  /images/v2/getImageBundleByNameResponseJson:
    properties:
      appliedContainersCount:
        type: integer
      appliedDevicesCount:
        type: integer
      imageIds:
        items:
          type: string
        type: array
      images:
        items:
          $ref: '#/definitions/getImagesData'
        type: array
      isCertifiedImageBundle:
        type: string
      key:
        type: string
      name:
        type: string
      note:
        type: string
      updatedDateInLongFormat:
        format: int64
        type: integer
      uploadedBy:
        type: string
      user:
        type: string
    required:
      - key
      - name
      - user
      - isCertifiedImageBundle
      - imageIds
      - images
      - appliedContainersCount
      - appliedDevicesCount
      - note
      - uploadedBy
      - updatedDateInLongFormat
  /images/v2/getImageBundlesResponseJson:
    properties:
      assignedImageBundleId:
        type: string
      data:
        items:
          $ref: '#/definitions/getImagesBundleDetails'
        type: array
      imageBundleMapper:
        $ref: '#/definitions/imageBundleMapperField'
      total:
        type: integer
    required:
      - total
      - data
  /ipConnectivityTest/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Input json is not compliant with schema.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122605'
        errorMessage: Device not reachable
      - errorCode: '122703'
        errorMessage: Exception used to signal fatal problems with mapping of content
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /label:
    properties:
      dateTimeInLongFormat:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      netElementCount:
        type: integer
      note:
        type: string
      type:
        type: string
      user:
        type: string
    required:
      - key
      - name
      - note
      - type
      - user
      - dateTimeInLongFormat
      - netElementCount
      - factoryId
      - id
  /label/addLabelErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Failure- User is unauthorized
      - errorCode: '191500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '192503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '192504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '192505'
        errorMessage: Unable to add new entity
      - errorCode: '192507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '192508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '192509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '192510'
        errorMessage: Failure - Unable to generate unique Id
      - errorCode: '192511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '192512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '192513'
        errorMessage: Unable to load data from persistence store
      - errorCode: '192514'
        errorMessage: Unable to add new entity. Entity already exists
      - errorCode: '192516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '192518'
        errorMessage: Failure - Data already exists in Database
      - errorCode: '192701'
        errorMessage: Exception in reading JSON string as bean class
      - errorCode: '192703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '192705'
        errorMessage: Unable to process the data
      - errorCode: '192844'
        errorMessage: Invalid type
      - errorCode: '192845'
        errorMessage: Invalid Module
      - errorCode: '192889'
        errorMessage: Failure - Invalid input.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /label/appliedDeviceErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Failure - User is unauthorized
      - errorCode: '191500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '192503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '192504'
        errorMessage: Failure - Unable to retrieve entity
      - errorCode: '192506'
        errorMessage: Failure - Unable to update the entity
      - errorCode: '192507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '192508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '192509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '192511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '192512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '192513'
        errorMessage: Unable to load data from persistence store
      - errorCode: '192516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '192718'
        errorMessage: Invalid input parameters
      - errorCode: '192801'
        errorMessage: Failure - Entity does not exist
      - errorCode: '192844'
        errorMessage: Invalid type
      - errorCode: '192845'
        errorMessage: Invalid Module
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /label/deleteLabelErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Failure - User is unauthorized
      - errorCode: '191500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192504'
        errorMessage: Failure - Unable to retrieve entity
      - errorCode: '192506'
        errorMessage: Failure - Unable to update the entity
      - errorCode: '192507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '192508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '192509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '192511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '192512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '192513'
        errorMessage: Unable to load data from persistence store
      - errorCode: '192519'
        errorMessage: Failure - Unable to delete the entity from database
      - errorCode: '192701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '192703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '192705'
        errorMessage: Unable to process the data.
      - errorCode: '192718'
        errorMessage: Invalid input parameters
      - errorCode: '192801'
        errorMessage: ' Failure -Entity does not exist'
      - errorCode: '192844'
        errorMessage: Invalid type
      - errorCode: '192845'
        errorMessage: Invalid Module
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /label/getLabelErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Failure - User is unauthorized
      - errorCode: '191500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '192504'
        errorMessage: Failure - Unable to retrieve entity
      - errorCode: '192506'
        errorMessage: Failure - Unable to update the entity
      - errorCode: '192507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '192508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '192509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '192511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '192512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '192513'
        errorMessage: Unable to load data from persistence store
      - errorCode: '192718'
        errorMessage: Invalid input parameters
      - errorCode: '192801'
        errorMessage: Failure - Entity does not exist
      - errorCode: '192844'
        errorMessage: Invalid type
      - errorCode: '192845'
        errorMessage: Invalid Module
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /label/getLabelInfoErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Failure - User is unauthorized
      - errorCode: '191500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '192504'
        errorMessage: Failure - Unable to retrieve entity
      - errorCode: '192506'
        errorMessage: Failure - Unable to update the entity
      - errorCode: '192507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '192508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '192509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '192511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '192512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '192513'
        errorMessage: Unable to load data from persistence store
      - errorCode: '192718'
        errorMessage: Invalid input parameters
      - errorCode: '192801'
        errorMessage: Failure - Entity does not exist
      - errorCode: '192844'
        errorMessage: Invalid type
      - errorCode: '192845'
        errorMessage: Invalid Module
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /label/updateLabelErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Failure - User is unauthorized
      - errorCode: '191500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '192503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '192504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '192505'
        errorMessage: Unable to add new entity
      - errorCode: '192506'
        errorMessage: Unable to update the entity
      - errorCode: '192507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '192508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '192509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '192510'
        errorMessage: Failure - Unable to generate unique Id
      - errorCode: '192511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '192512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '192513'
        errorMessage: Unable to load data from persistence store
      - errorCode: '192514'
        errorMessage: Unable to add new entity. Entity already exists
      - errorCode: '192516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '192518'
        errorMessage: Failure - Data already exists in Database
      - errorCode: '192701'
        errorMessage: Exception in reading JSON string as bean class
      - errorCode: '192703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '192705'
        errorMessage: Unable to process the data
      - errorCode: '192844'
        errorMessage: Invalid type
      - errorCode: '192845'
        errorMessage: Invalid Module
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /label/updateNoteErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Failure - User is unauthorized
      - errorCode: '191500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '192502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '192503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '192504'
        errorMessage: Failure - Unable to retrieve entity
      - errorCode: '192506'
        errorMessage: Failure - Unable to update the entity
      - errorCode: '192507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '192508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '192509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '192511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '192512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '192513'
        errorMessage: Unable to load data from persistence store
      - errorCode: '192701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '192703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '192705'
        errorMessage: Unable to process the data.
      - errorCode: '192801'
        errorMessage: ' Failure -Entity does not exist'
      - errorCode: '192844'
        errorMessage: Invalid type
      - errorCode: '192845'
        errorMessage: Invalid Module
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /netElement:
    properties:
      architecture:
        type: string
      bootupTimeStamp:
        format: double
        type: number
      complianceCode:
        type: string
      complianceIndication:
        type: string
      deviceInfo:
        type: string
      deviceStatus:
        type: string
      fqdn:
        type: string
      hardwareRevision:
        type: string
      internalBuildId:
        type: string
      internalVersion:
        type: string
      ipAddress:
        type: string
      isDANZEnabled:
        type: string
      isMLAGEnabled:
        type: string
      key:
        type: string
      lastSyncUp:
        format: int64
        type: integer
      memFree:
        type: integer
      memTotal:
        type: integer
      modelName:
        type: string
      parentContainerId:
        type: string
      serialNumber:
        type: string
      sslConfigAvailable:
        type: boolean
      sslEnabledByCVP:
        type: boolean
      systemMacAddress:
        type: string
      taskIdList:
        items:
          $ref: '#/definitions/~1workOrderJson'
        type: array
      tempAction:
        items:
          $ref: '#/definitions/~1tempAction'
        type: array
      type:
        type: string
      unAuthorized:
        type: boolean
      version:
        type: string
      ztpMode:
        type: string
    required:
      - architecture
      - bootupTimeStamp
      - complianceCode
      - complianceIndication
      - deviceStatus
      - deviceInfo
      - fqdn
      - hardwareRevision
      - internalBuildId
      - internalVersion
      - ipAddress
      - isDANZEnabled
      - isMLAGEnabled
      - key
      - lastSyncUp
      - memFree
      - memTotal
      - modelName
      - parentContainerId
      - serialNumber
      - systemMacAddress
      - taskIdList
      - tempAction
      - type
      - unAuthorized
      - version
      - ztpMode
      - sslEnabledByCVP
      - sslConfigAvailable
  /netelementContainerListjson:
    properties:
      containerKey:
        type: string
      containerName:
        type: string
      netelementKey:
        type: string
    required:
      - containerKey
      - containerName
      - netElementKey
  /provisioning/SuccessResponse:
    properties:
      data:
        type: string
    required:
      - data
  /provisioning/cancelReconcileErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122506'
        errorMessage: Unable to update the entity
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122858'
        errorMessage: No such configlet
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /provisioning/checkComplianceErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122601'
        errorMessage: An EAPI request failure occurred
      - errorCode: '122605'
        errorMessage: Device not reachable
      - errorCode: '122701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '122703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '122711'
        errorMessage: There is no netelement available to check compliance.
      - errorCode: '122712'
        errorMessage: Compliance check is already in in-progress state
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122850'
        errorMessage: Invalid Container Id
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
      - errorCode: '122929'
        errorMessage: Device is not ready. Registration in-progress
      - errorCode: '122934'
        errorMessage: Incorrect configuration
      - errorCode: '122949'
        errorMessage: Device is not ready. Registration failed.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /provisioning/containerLevelReconcileErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122830'
        errorMessage: No such container found
      - errorCode: '122831'
        errorMessage: Reconcile is not applicable for undefined container.
      - errorCode: '122832'
        errorMessage: Container level reconcile is already in-progress
      - errorCode: '122833'
        errorMessage: No netelement available for container reconcile
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /provisioning/getConfigletByIdJson:
    properties:
      config:
        type: string
      containerCount:
        type: integer
      dateTimeInLongFormat:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      isAutoBuilder:
        type: string
      isDefault:
        type: string
      isDraft:
        default: false
        type: boolean
      key:
        type: string
      name:
        type: string
      netElementCount:
        type: integer
      note:
        type: string
      reconciled:
        type: boolean
      type:
        type: string
      user:
        type: string
    required:
      - factoryId
      - reconciled
      - isDefault
      - note
      - containerCount
      - netElementCount
      - isAutoBuilder
      - dateTimeInLongFormat
      - user
      - config
      - 'name '
      - 'key '
      - 'id '
      - 'type '
  /provisioning/getConfigletsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132533'
        errorMessage: SQLPredicateBuilder Exception.
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132801'
        errorMessage: Entity does not exist
      - errorCode: '132818'
        errorMessage: Invalid Configlet Builder Type
      - errorCode: '132857'
        errorMessage: Invalid Configlet Type
      - errorCode: '132923'
        errorMessage: Invalid sort column
      - errorCode: '132924'
        errorMessage: Invalid sort order
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /provisioning/getConfigletsJson:
    properties:
      data:
        items:
          $ref: '#/definitions/~1provisioning~1getConfigletByIdJson'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /provisioning/getNetElementByIdErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122801'
        errorMessage: Entity does not exist
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /provisioning/getProposedContainer:
    properties:
      data:
        items:
          $ref: '#/definitions/~1getProposedContainerData'
        type: array
    required:
      - data
  /provisioning/getProposedContainerErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /provisioning/getTempSessionReconciledConfigErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122829'
        errorMessage: No such device found
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /provisioning/getTempSessionReconciledConfiglets:
    properties:
      data:
        items:
          type: string
        type: array
    required:
      - data
  /provisioning/searchConfigletsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '131500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '132502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '132503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '132504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '132718'
        errorMessage: Invalid input parameters
      - errorCode: '132818'
        errorMessage: Invalid Configlet Builder Type
      - errorCode: '132923'
        errorMessage: Invalid sort column
      - errorCode: '132924'
        errorMessage: Invalid sort order
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /provisioning/updateReconcileConfigErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '122503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122810'
        errorMessage: Name cannot be empty
      - errorCode: '122834'
        errorMessage: Configlet Name Already exists
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
      - errorCode: '122853'
        errorMessage: Invalid Key value.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /role/UpdateRoleDetails:
    properties:
      description:
        type: string
      key:
        type: string
      moduleList:
        items:
          $ref: '#/definitions/~1updateRole~1moduleListRequestItems'
        type: array
      name:
        type: string
    required:
      - key
      - name
      - description
      - moduleList
    type: object
  /role/createRole:
    properties:
      description:
        type: string
      moduleList:
        items:
          $ref: '#/definitions/~1updateRole~1moduleListRequestItems'
        type: array
      name:
        type: string
    type: object
  /role/createRole/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '232500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '232502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '232503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '232504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '232505'
        errorMessage: Unable to add new entity.
      - errorCode: '232507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '232508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '232509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '232510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '232511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '232512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '232513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '232514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '232516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '232518'
        errorMessage: Failure - Data already exists in Database
      - errorCode: '232601'
        errorMessage: An EAPI command failure occurred.
      - errorCode: '232602'
        errorMessage: An EAPI request failure occurred.
      - errorCode: '232701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '232702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '232703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '232718'
        errorMessage: Invalid input parameters
      - errorCode: '232810'
        errorMessage: Failure - Name cannot be empty
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /role/createRole/Response:
    properties:
      classId:
        type: integer
      createdBy:
        type: string
      createdOn:
        type: string
      description:
        type: string
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      moduleList:
        items:
          $ref: '#/definitions/~1updateRole~1moduleListResponseItems'
        type: array
      moduleListSize:
        type: integer
      name:
        type: string
    required:
      - classId
      - moduleList
      - moduleListSize
      - createdBy
      - createdOn
      - factoryId
      - description
      - name
      - key
      - id
  /role/deleteRole/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '231500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '232502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '232503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '232504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '232505'
        errorMessage: Unable to add new entity.
      - errorCode: '232507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '232508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '232509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '232510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '232511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '232512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '232513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '232514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '232516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '232520'
        errorMessage: Failure - Invalid input
      - errorCode: '232701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '232702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '232703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '232801'
        errorMessage: Failure - Entity does not exist.
      - errorCode: '232886'
        errorMessage: Superuser role cannot be updated.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /role/dynamicValue:
    properties:
      string:
        type: integer
    required:
      - string
    type: object
  /role/getAppliedUserCount/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '231500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '231501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '232500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '232502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '232503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '232504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '232505'
        errorMessage: Unable to add new entity.
      - errorCode: '232507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - code: 232508
        errorCode: '232508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '232509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '232510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '232511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '232512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '232513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '232514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '232516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '232701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '232703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '232718'
        errorMessage: Invalid input parameters
      - errorCode: '232801'
        errorMessage: Failure - Entity does not exist.
      - errorCode: '232887'
        errorMessage: Superuser role cannot be updated.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /role/getAppliedUsers/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '231500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '232502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '232503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '232504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '232505'
        errorMessage: Unable to add new entity.
      - errorCode: '232507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '232508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '232509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '232510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '232511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '232512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '232513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '232514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '232516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '232701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '232703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '232718'
        errorMessage: Invalid input parameters
      - errorCode: '232801'
        errorMessage: Failure - Entity does not exist.
      - errorCode: '232937'
        errorMessage: Invalid Role Name
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /role/getRole/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '231500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '232502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '232503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '232504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '232505'
        errorMessage: Unable to add new entity.
      - errorCode: '232507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '232508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '232509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '232510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '232511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '232512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '232513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '232514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '232516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '232701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '232703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '232718'
        errorMessage: Invalid input parameters
      - errorCode: '232801'
        errorMessage: Failure - Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /role/getRoleListResponse:
    properties:
      roles:
        items:
          $ref: '#/definitions/~1role~1createRole~1Response'
        type: array
      total:
        type: integer
      users:
        $ref: '#/definitions/~1role~1dynamicValue'
    required:
      - total
      - users
      - roles
  /role/getRoles/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '231500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '232502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '232503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '232504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '232505'
        errorMessage: Unable to add new entity.
      - errorCode: '232507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '232508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '232509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '232510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '232511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '232512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '232513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '232514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '232516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '232701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '232703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '232718'
        errorMessage: Invalid input parameters
      - errorCode: '232801'
        errorMessage: Failure - Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /role/updateRole/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '231500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '232501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '232502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '232503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '232504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '232505'
        errorMessage: Unable to add new entity.
      - errorCode: '232507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '232508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '232509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '232510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '232511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '232512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '232513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '232514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '232516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '232518'
        errorMessage: Data already exists in Database
      - errorCode: '232701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '232702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '232703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '232801'
        errorMessage: Failure - Entity does not exist.
      - errorCode: '232887'
        errorMessage: Superuser role cannot be updated.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /role/userAssignment:
    properties:
      assignedBy:
        type: string
      assignedOn:
        type: string
      userName:
        type: string
    type: object
  /rollback/addNetworkRollbackTempActionsJson:
    properties:
      containerId:
        type: string
      endIndex:
        type: integer
      rollbackTimestamp:
        format: int64
        type: integer
      rollbackType:
        type: string
      startIndex:
        type: integer
      targetManagementIPList:
        items:
          $ref: '#/definitions/~1rollback~1targetManagementIPList'
        type: array
    required:
      - rollbackTimestamp
      - containerId
      - rollbackType
      - startIndex
      - endIndex
      - targetManagementIPList
  /rollback/addNetworkRollbackTempActionsResponse:
    properties:
      data:
        $ref: '#/definitions/~1rollback~1addNetworkRollbackTempActionsResponseData'
      skippedDeviceInfo:
        $ref: '#/definitions/~1rollback~1skippedDeviceInfo'
    required:
      - data
      - skippedDeviceInfo
  /rollback/addNetworkRollbackTempActionsResponseData:
    properties:
      count:
        type: integer
      message:
        type: string
    required:
      - message
      - count
  /rollback/addTempRollbackActionJson:
    properties:
      configRollbackInput:
        $ref: '#/definitions/~1rollback~1configImageRollbackInput'
      imageRollbackInput:
        $ref: '#/definitions/~1rollback~1configImageRollbackInput'
      netElementId:
        type: string
      rollbackTimestamp:
        format: int64
        type: integer
      rollbackType:
        type: string
      targetManagementIP:
        type: string
    required:
      - rollbackTimestamp
      - netElementId
      - rollbackType
      - targetManagementIP
      - configRollbackInput
      - imageRollbackInput
  /rollback/addTempRollbackActionsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '292500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '292502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '292503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '292504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '292532'
        errorMessage: Failure -  No data found.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /rollback/addTempRollbackActionsResponse:
    properties:
      data:
        type: string
    required:
      - data
  /rollback/configImageRollbackInput:
    properties:
      taskId:
        type: string
      timeStamp:
        type: string
    required:
      - timeStamp
      - taskId
  /rollback/detailedInfoArray:
    properties:
      container:
        type: string
      hostname:
        type: string
      ipAddress:
        type: string
      netElementId:
        type: string
      reasonForSkipping:
        type: string
    required:
      - container
      - hostname
      - reasonForSkipping
      - netElementId
      - ipAddress
    type: object
  /rollback/getHierarchyChangeInfoErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '292500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '292502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '292503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '292504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '292532'
        errorMessage: Failure -  No data found.
      - errorCode: '292889'
        errorMessage: Failure -  Invalid input.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /rollback/getHierarchyChangeInfoResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/~1rollback~1getHierarchyChangeInfoResponsedataJson'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /rollback/getHierarchyChangeInfoResponsedataJson:
    properties:
      architecture:
        type: string
      bootupTimeStamp:
        format: int64
        type: integer
      compareString:
        type: string
      completedOnInLongFormat:
        type: string
      complianceCode:
        type: string
      complianceIndication:
        type: string
      createdOnInLongFormat:
        type: string
      currentTaskName:
        type: string
      currentTaskType:
        type: string
      description:
        type: string
      deviceInfo:
        type: string
      deviceStatus:
        type: string
      executedBy:
        type: string
      executedOnInLongFormat:
        type: number
      factoryId:
        type: string
      fqdn:
        type: string
      hardwareRevision:
        type: string
      hierarchyChangedTimestamp:
        format: int64
        type: integer
      id:
        type: string
      internalBuildId:
        type: string
      internalVersion:
        type: string
      ipAddress:
        type: string
      isDANZEnabled:
        type: string
      isHierarchyChanged:
        type: boolean
      isMLAGEnabled:
        type: string
      key:
        type: string
      lastSyncUp:
        type: integer
      memFree:
        type: integer
      memTotal:
        type: integer
      modelName:
        type: string
      newParentContainerId:
        type: string
      parentContainerId:
        type: string
      serialNumber:
        type: string
      systemMacAddress:
        type: string
      taskIdList:
        items:
          $ref: '#/definitions/~1rollback~1taskListObj'
        type: array
      taskStatus:
        type: string
      taskStatusBeforeCancel:
        type: string
      tempAction:
        items:
          $ref: '#/definitions/~1rollback~1tempActionListObj'
        type: array
      templateId:
        type: string
      type:
        type: string
      unAuthorized:
        type: boolean
      version:
        type: string
      workFlowDetailsId:
        type: string
      workOrderDetails:
        $ref: '#/definitions/~1rollback~1workOrderDetailsObj'
      workOrderEscalation:
        type: string
      workOrderState:
        type: string
      workOrderUserDefinedStatus:
        type: string
      ztpMode:
        type: string
    required:
      - ztpMode
      - unAuthorized
      - type
      - deviceStatus
      - parentContainerId
      - isHierarchyChanged
      - internalVersion
      - complianceCode
      - key
      - architecture
      - tempAction
      - compareString
      - serialNumber
      - memFree
      - fqdn
      - memTotal
      - systemMacAddress
      - ipAddress
      - isMLAGEnabled
      - version
      - lastSyncUp
      - deviceInfo
      - taskIdList
      - taskStatusBeforeCancel
      - description
      - newParentContainerId
      - templateId
      - workOrderState
      - completedOnInLongFormat
      - currentTaskName
      - workFlowDetailsId
      - id
      - taskStatus
      - executedOnInLongFormat
      - executedBy
      - createdOnInLongFormat
      - workOrderUserDefinedStatus
      - factoryId
      - currentTaskType
      - workOrderEscalation
      - workOrderDetails
      - modelName
      - hardwareRevision
      - isDANZEnabled
      - internalBuildId
      - complianceIndication
      - bootupTimeStamp
  /rollback/skippedDeviceInfo:
    properties:
      detailedInfo:
        $ref: '#/definitions/~1rollback~1detailedInfoArray'
      skippedDeviceCount:
        type: integer
    required:
      - skippedDeviceCount
      - detailedInfo
  /rollback/targetManagementIPList:
    properties:
      netElementId:
        type: string
      targetManagementIP:
        type: string
    required:
      - netElementId
      - targetManagementIP
    type: object
  /rollback/taskListDataObj:
    properties:
      IS_CONFIG_PUSH_NEEDED:
        type: string
      NETELEMENT_ID:
        type: string
      VIEW:
        type: string
      WORKFLOW_ACTION:
        type: string
      ccId:
        type: string
      currentparentContainerId:
        type: string
      image:
        type: string
      isDeviceRollbackFlow:
        type: string
      isRollbackFromSnapshotFlow:
        type: string
      isRollbackTask:
        type: string
      newparentContainerId:
        type: string
      rollbackTimestamp:
        type: string
      targetIpAddress:
        type: string
    required:
      - IS_CONFIG_PUSH_NEEDED
      - image
      - currentparentContainerId
      - isDeviceRollbackFlow
      - WORKFLOW_ACTION
      - newparentContainerId
      - isRollbackFromSnapshotFlow
      - NETELEMENT_ID
      - VIEW
      - rollbackTimestamp
      - ccId
      - isRollbackTask
      - targetIpAddress
    type: object
  /rollback/taskListObj:
    properties:
      data:
        $ref: '#/definitions/~1rollback~1taskListDataObj'
      newParentContainerName:
        type: string
      note:
        type: string
    required:
      - note
      - newParentContainerName
      - data
    type: object
  /rollback/tempActionListObj:
    properties:
      info:
        type: string
      action:
        type: string
      bestImageContainerId:
        type: string
      ccId:
        type: string
      childTasks:
        type: string
      configletBuilderList:
        items:
          type: string
        type: array
      configletBuilderNamesList:
        items:
          type: string
        type: array
      configletList:
        items:
          type: string
        type: array
      configletNamesList:
        items:
          type: string
        type: array
      containerKey:
        type: string
      factoryId:
        type: string
      fromId:
        type: string
      fromName:
        type: string
      id:
        type: string
      ignoreConfigletBuilderList:
        items:
          type: string
        type: array
      ignoreConfigletBuilderNamesList:
        items:
          type: string
        type: array
      ignoreConfigletList:
        items:
          type: string
        type: array
      ignoreConfigletNamesList:
        items:
          type: string
        type: array
      ignoreNodeId:
        type: string
      ignoreNodeList:
        items:
          type: string
        type: array
      ignoreNodeName:
        type: string
      ignoreNodeNamesList:
        items:
          items: {}
          type: array
        type: array
      imageBundleId:
        type: string
      infoPreview:
        type: string
      key:
        type: string
      mode:
        type: string
      nodeId:
        type: string
      nodeIpAddress:
        type: string
      nodeList:
        items:
          type: string
        type: array
      nodeName:
        type: string
      nodeNamesList:
        items:
          type: string
        type: array
      nodeTargetIpAddress:
        type: string
      nodeType:
        type: string
      note:
        type: string
      oldNodeName:
        type: string
      pageType:
        type: string
      parentTask:
        type: string
      sessionId:
        type: string
      taskId:
        type: string
      timestamp:
        type: string
      toId:
        type: string
      toIdType:
        type: string
      toName:
        type: string
      userId:
        type: string
      viaContainer:
        type: string
    required:
      - toId
      - nodeName
      - note
      - toIdType
      - nodeTargetIpAddress
      - configletBuilderNamesList
      - nodeNamesList
      - mode
      - nodeIpAddress
      - pageType
      - ignoreConfigletBuilderNamesList
      - toName
      - ignoreConfigletBuilderList
      - fromName
      - action
      - ignoreNodeList
      - id
      - oldNodeName
      - ignoreConfigletNamesList
      - key
      - info
      - timestamp
      - parentTask
      - viaContainer
      - factoryId
      - sessionId
      - nodeType
      - fromId
      - nodeList
      - userId
      - ignoreConfigletList
      - childTasks
      - configletList
      - ignoreNodeId
      - ccId
      - ignoreNodeName
      - bestImageContainerId
      - containerKey
      - configletBuilderList
      - imageBundleId
      - nodeId
      - taskId
      - infoPreview
      - configletNamesList
      - ignoreNodeNamesList
    type: object
  /rollback/workOrderDetailsObj:
    properties:
      factoryId:
        type: string
      id:
        type: string
      ipAddress:
        type: string
      netElementHostName:
        type: string
      netElementId:
        type: string
      serialNumber:
        type: string
      workOrderDetailsId:
        type: string
      workOrderId:
        type: string
    required:
      - serialNumber
      - workOrderDetailsId
      - factoryId
      - ipAddress
      - netElementId
      - workOrderId
      - id
      - netElementHostName
    type: object
  /saveTopology/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Failure - Unable to retrieve entity
      - errorCode: '122505'
        errorMessage: Unable to add new entity
      - errorCode: '122506'
        errorMessage: Unable to update the entity
      - errorCode: '122610'
        errorMessage: Data not found.Work List is Empty
      - errorCode: '122701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '122703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122875'
        errorMessage: Cannot Assign to undefined container
      - errorCode: '122929'
        errorMessage: Device is not ready. Registration in-progress
      - errorCode: '122939'
        errorMessage: The device is already in use
      - errorCode: '122949'
        errorMessage: Device is not ready. Registration failed.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /searchTopology/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/deleteTemplatesErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '212718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/deleteTemplatesResponseJson:
    properties:
      result:
        type: string
      templateErrMap:
        properties:
          templateKey1:
            default: nil
            type: string
          templateKey2:
            default: nil
            type: string
        type: object
    required:
      - result
      - templateErrMap
    type: object
  /snapshot/deviceConfigs/extensionsAndPatches:
    properties:
      isAvailableInCVP:
        type: boolean
      name:
        type: string
      version:
        type: string
  /snapshot/deviceConfigs/imageInfo:
    properties:
      extensionsAndPatches:
        items:
          $ref: '#/definitions/~1snapshot~1deviceConfigs~1extensionsAndPatches'
        type: array
      internalBuildVersion:
        type: string
      isAvailableInCVP:
        type: boolean
      softwareImage:
        type: string
      softwareImageVersion:
        type: string
    required:
      - internalBuildVersion
      - softwareImage
      - softwareImageVersion
      - extensionsAndPatches
      - isAvailableInCVP
  /snapshot/deviceConfigsErrorCode:
    example:
      - errorCode: '282504'
        errorMessage: Failure - Unable to retrieve entity from database
      - errorCode: '282604'
        errorMessage: Failed to establish connection with server
      - errorCode: '282611'
        errorMessage: Failed to retrieve extensions info
      - errorCode: '282612'
        errorMessage: Failed to retrieve image info
      - errorCode: '282613'
        errorMessage: Failed to retrieve config head
      - errorCode: '282614'
        errorMessage: Failed to retrieve config lines
      - errorCode: '282615'
        errorMessage: Image info does not exist
      - defaultValue: 'Error: Unable to retrieve device info'
        errorCode: '282618'
      - defaultValue: 'Error:  Unable to typecast the value'
        errorCode: '282621'
      - defaultValue: 'Error: Unable to fetch device serial number at given timestamp'
        errorCode: '282623'
      - errorCode: '282707'
        errorMessage: Content was not supported by the encoding format used
      - errorCode: '282718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/deviceConfigsResponseJson:
    properties:
      imageInfo:
        $ref: '#/definitions/~1snapshot~1deviceConfigs~1imageInfo'
      runningConfigInfo:
        type: string
    required:
      - runningConfigInfo
      - imageInfo
  /snapshot/deviceIDArrayJson:
    properties:
      deviceIDs:
        items:
          type: string
        type: array
    required:
      - deviceIDs
    type: object
  /snapshot/getSnapshotChartData:
    properties:
      data:
        items:
          $ref: '#/definitions/~1data2Array'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /snapshot/getSnapshotChartDataErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '282500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '282502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '282503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '282504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '282532'
        errorMessage: Failure - No data found
      - errorCode: '282889'
        errorMessage: Failure - Invalid input.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/hierarchychangeinfoErrorCode:
    example:
      - errorCode: '282501'
        errorMessage: Failure - Unable to access / login to database
      - defaultValue: 'Error: Unable to retrieve device info'
        errorCode: '282618'
      - defaultValue: 'Error: hierarchy info absent'
        errorCode: '282620'
      - defaultValue: 'Error: Unable to typecast the value'
        errorCode: '282621'
      - defaultValue: 'Error: Unable to fetch provisioned device data'
        errorCode: '282622'
      - defaultValue: 'Error: Empty serial number string'
        errorCode: '282624'
      - errorCode: '282707'
        errorMessage: Content was not supported by the encoding format used
      - errorCode: '282718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/hierarchychangeinfoResponseJson:
    properties:
      hierarchyChangeInfo:
        items: {}
        type: object
    type: object
  /snapshot/snapshotChartJson:
    properties:
      containerId:
        type: string
      count:
        type: integer
      interval:
        type: string
      netElementId:
        type: string
      templateKey:
        type: string
      timeZone:
        type: string
      toDate:
        format: date
        type: string
    required:
      - count
      - interval
      - netElementId
      - containerId
      - templateKey
      - toDate
      - timeZone
  /snapshot/templateErrorCode:
    example:
      - errorCode: '282504'
        errorMessage: Failure - Unable to retrieve entity from database.
      - errorCode: '282619'
        errorMessage: Failed to retrieve template info
      - errorCode: '282707'
        errorMessage: Content was not supported by the encoding format used
      - errorCode: '282718'
        errorMessage: Invalid input parameters
      - errorCode: '2821204'
        errorMessage: Some templates are malformed
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/templateIDsArrayJson:
    properties:
      templateIDs:
        items:
          type: string
        type: array
    required:
      - templateIDs
    type: object
  /snapshot/templateResponseJson:
    properties:
      commandList:
        items:
          type: string
        type: array
      deviceList:
        items:
          type: string
        type: array
      frequency:
        type: integer
      key:
        type: string
      lastUpdatedBy:
        type: string
      name:
        type: string
    required:
      - key
      - name
      - commandList
      - frequency
      - deviceList
      - lastUpdatedBy
    type: object
  /snapshot/templates/captureErrorCode:
    example:
      - errorCode: '282501'
        errorMessage: Failure - Unable to access / login to database
      - errorCode: '282505'
        errorMessage: Failure - Unable to add new entity
      - errorCode: '282602'
        errorMessage: Failed to capture snapshot
      - errorCode: '282604'
        errorMessage: Failed to establish connection with server
      - errorCode: '282605'
        errorMessage: Failed to retrieve scheduled template.
      - errorCode: '282606'
        errorMessage: Failed to extract the template commands.
      - errorCode: '282607'
        errorMessage: Failed to execute commands on device
      - errorCode: '282608'
        errorMessage: Failed to marshal the command output
      - errorCode: '282609'
        errorMessage: Failed to encode content
      - defaultValue: 'Error: Unexpected command response format'
        errorCode: '282617'
      - defaultValue: 'Error: Unable to retrieve device info'
        errorCode: '282618'
      - defaultValue: 'Error:  Unable to typecast the value'
        errorCode: '282621'
      - errorCode: '282707'
        errorMessage: Content was not supported by the encoding format used
      - errorCode: '282718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/templates/captureJson:
    properties:
      deviceID:
        type: string
      generatedBy:
        type: string
    required:
      - deviceID
    type: object
  /snapshot/templates/captureResponseJson:
    properties:
      data:
        type: string
      executionTime:
        type: integer
    required:
      - data
      - executionTime
    type: object
  /snapshot/templates/scheduleErrorCode:
    example:
      - errorCode: '282504'
        errorMessage: Failure - Unable to retrieve entity from database
      - errorCode: '282505'
        errorMessage: Failure - Unable to add new entity
      - errorCode: '282603'
        errorMessage: Failed to schedule template
      - errorCode: '282604'
        errorMessage: Failed to establish connection with server
      - errorCode: '282609'
        errorMessage: Failed to encode content
      - errorCode: '282610'
        errorMessage: Invalid template
      - defaultValue: 'Error: Template is still in pending status'
        errorCode: '282616'
      - errorCode: '282707'
        errorMessage: Content was not supported by the encoding format used
      - errorCode: '282718'
        errorMessage: Invalid input parameters
      - errorCode: '282889'
        errorMessage: Failure - Invalid input
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/templates/scheduleJson:
    properties:
      commands:
        items:
          type: string
        type: array
      deviceList:
        items:
          type: string
        type: array
      frequency:
        type: integer
      name:
        type: string
    required:
      - name
      - commands
      - deviceList
      - frequency
    type: object
  /snapshot/templates/scheduleResponseJson:
    properties:
      status:
        type: string
      templateKey:
        type: string
      templateName:
        type: string
    required:
      - status
      - templateKey
      - templateName
  /snapshot/templates/templateKeys:
    properties:
      key:
        type: string
      name:
        type: string
    required:
      - key
      - name
  /snapshot/templatesErrorCode:
    example:
      - errorCode: '282168'
        errorMessage: Failed to get templates
      - errorCode: '282500'
        errorMessage: A RuntimeException occurred in CVP application
      - errorCode: '282504'
        errorMessage: Failure - Unable to retrieve entity from database.
      - defaultValue: 'Error: Unable to typecast the value'
        errorCode: '282621'
      - errorCode: '282718'
        errorMessage: Invalid input parameters
      - errorCode: '2821203'
        errorMessage: Failed to unmarshal entity
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/templatesResponseJson:
    properties:
      templateKeys:
        items:
          $ref: '#/definitions/~1snapshot~1templates~1templateKeys'
        type: array
    required:
      - templateKeys
    type: object
  /snapshot/templatesinfoErrorCode:
    example:
      - errorCode: '282504'
        errorMessage: Failure - Unable to retrieve entity from database
      - defaultValue: 'Error:  Unable to typecast the value'
        errorCode: '282621'
      - errorCode: '282702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '282707'
        errorMessage: Content was not supported by the encoding format used
      - errorCode: '282718'
        errorMessage: Invalid input parameters
      - errorCode: '2821203'
        errorMessage: Failed to unmarshal entity
      - errorCode: '2821204'
        errorMessage: Some templates are malformed
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /snapshot/templatesinfoResponseJson:
    properties:
      templateInfo:
        items: {}
        type: object
    type: object
  /task/addNoteToTaskErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '142500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '142502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '142503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '142504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '142505'
        errorMessage: Unable to add new entity
      - errorCode: '142508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '142509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '142510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '142513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '142610'
        errorMessage: Data not found.Work List is Empty
      - errorCode: '142611'
        errorMessage: Data not found.Process Instance ID is Empty
      - errorCode: '142612'
        errorMessage: Execution task failed due to invalid task status
      - errorCode: '142613'
        errorMessage: Cancel task failed due to invalid task status
      - errorCode: '142614'
        errorMessage: Task trigger failure
      - errorCode: '142615'
        errorMessage: Unable to trigger the process. Work Flow task is empty
      - errorCode: '142616'
        errorMessage: Invalid WorkOrder Id
      - errorCode: '142701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '142703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /task/addWorkOrderLogErrorCode:
    example:
      - errorCode: '92498'
        errorMessage: Unauthorized user.
      - errorCode: '142951'
        errorMessage: Invalid Task Id.
      - errorCode: '142952'
        errorMessage: Message cannot be empty.
      - errorCode: '142954'
        errorMessage: Source cannot be empty.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /task/cancelTaskErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '141500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '142500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '142502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '142504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '142505'
        errorMessage: Unable to add new entity
      - errorCode: '142508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '142509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '142510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '142513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '142610'
        errorMessage: Data not found.Work List is Empty
      - errorCode: '142611'
        errorMessage: Data not found.Process Instance ID is Empty
      - errorCode: '142612'
        errorMessage: Execution task failed due to invalid task status
      - errorCode: '142613'
        errorMessage: Cancel task failed due to invalid task status
      - errorCode: '142614'
        errorMessage: Task trigger failure
      - errorCode: '142615'
        errorMessage: Unable to trigger the process. Work Flow task is empty
      - errorCode: '142616'
        errorMessage: Invalid WorkOrder Id
      - errorCode: '142701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '142703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '142718'
        errorMessage: Invalid input parameters
      - errorCode: '142801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /task/executeTaskErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '142500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '142502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '142503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '142504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '142505'
        errorMessage: Unable to add new entity
      - errorCode: '142508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '142509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '142510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '142513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '142610'
        errorMessage: Data not found.Work List is Empty
      - errorCode: '142611'
        errorMessage: Data not found.Process Instance ID is Empty
      - errorCode: '142612'
        errorMessage: Execution task failed due to invalid task status
      - errorCode: '142613'
        errorMessage: Cancel task failed due to invalid task status
      - errorCode: '142614'
        errorMessage: Task trigger failure
      - errorCode: '142615'
        errorMessage: Unable to trigger the process. Work Flow task is empty
      - errorCode: '142616'
        errorMessage: Invalid WorkOrder Id
      - errorCode: '142701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '142703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '142718'
        errorMessage: Invalid input parameters
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /task/exportLogsErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '141801'
        errorMessage: Entity does not exist.
      - errorCode: '142502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '142503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '142504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '142532'
        errorMessage: Failure - No data found
      - errorCode: '142889'
        errorMessage: Failure - Invalid input.
      - errorCode: '282500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /task/getAddNotesToTaskSuccessResponse:
    properties:
      data:
        type: string
    required:
      - data
  /task/getAddTaskLogSuccessResponse:
    properties:
      data:
        type: string
    required:
      - data
  /task/getCancelTaskSuccessResponse:
    properties:
      data:
        type: string
    required:
      - data
  /task/getExecuteTaskSuccessResponse:
    properties:
      data:
        type: string
    required:
      - data
  /task/getTaskByIdErrorCode:
    example:
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not confirm to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '141500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '142500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '142502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '142504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '142508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '142509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '142510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '142513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '142610'
        errorMessage: Data not found.Work List is Empty
      - errorCode: '142611'
        errorMessage: Data not found.Process Instance ID is Empty
      - errorCode: '142616'
        errorMessage: Invalid WorkOrder Id
      - errorCode: '142701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '142703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '142718'
        errorMessage: Invalid input parameters
      - errorCode: '142801'
        errorMessage: Entity does not exist.
      - errorCode: '142859'
        errorMessage: No such workorder id.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /task/getTaskByIdSuccessResponse:
    properties:
      ccId:
        type: string
      completedOnInLongFormat:
        format: int64
        type: integer
      createdBy:
        type: string
      createdOnInLongFormat:
        format: int64
        type: integer
      currentTaskName:
        type: string
      currentTaskType:
        type: string
      data:
        $ref: '#/definitions/~1task~1getTaskData'
      description:
        type: string
      executedBy:
        type: string
      executedOnInLongFormat:
        format: int64
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      name:
        type: string
      newParentContainerId:
        type: string
      newParentContainerName:
        type: string
      note:
        type: string
      taskStatus:
        type: string
      taskStatusBeforeCancel:
        type: string
      templateId:
        type: string
      workFlowDetailsId:
        type: string
      workOrderDetails:
        $ref: '#/definitions/~1task~1getWorkOrderDetails'
      workOrderEscalation:
        type: object
      workOrderId:
        type: string
      workOrderState:
        type: string
      workOrderUserDefinedStatus:
        type: string
  /task/getTaskData:
    properties:
      APP_SESSION_ID:
        type: string
      IS_ADD_OR_MOVE_FLOW:
        type: boolean
      IS_CONFIG_PUSH_NEEDED:
        type: string
      NETELEMENT_ID:
        type: string
      VIEW:
        type: string
      WORKFLOW_ACTION:
        type: string
      currentparentContainerId:
        type: string
      imageBundleId:
        type: string
      imageIdList:
        type: string
      imagebundle:
        type: string
      newparentContainerId:
        type: string
    required:
      - IS_CONFIG_PUSH_NEEDED
      - currentparentContainerId
      - WORKFLOW_ACTION
      - newparentContainerId
      - NETELEMENT_ID
      - IS_ADD_OR_MOVE_FLOW
      - VIEW
      - imageIdList
      - imagebundle
      - imageBundleId
      - APP_SESSION_ID
  /task/getTaskStatusByIdErrorCode:
    example:
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '141500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '142500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '142502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '142504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '142508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '142509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '142510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '142513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '142610'
        errorMessage: Data not found.Work List is Empty
      - errorCode: '142611'
        errorMessage: Data not found.Process Instance ID is Empty
      - errorCode: '142616'
        errorMessage: Invalid WorkOrder Id
      - errorCode: '142701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '142703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '142718'
        errorMessage: Invalid input parameters
      - errorCode: '142801'
        errorMessage: Entity does not exist.
      - errorCode: '142859'
        errorMessage: No such workorder id.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /task/getTaskStatusByIdSuccessResponse:
    properties:
      taskStatus:
        type: string
    required:
      - taskStatus
  /task/getTasksArray:
    properties:
      ccId:
        type: string
      completedOnInLongFormat:
        format: int64
        type: integer
      createdBy:
        type: string
      createdOnInLongFormat:
        format: int64
        type: integer
      currentTaskName:
        type: string
      currentTaskType:
        type: string
      data:
        $ref: '#/definitions/~1task~1getTaskData'
      description:
        type: string
      executedBy:
        type: string
      executedOnInLongFormat:
        format: int64
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      name:
        type: string
      newParentContainerId:
        type: string
      newParentContainerName:
        type: string
      note:
        type: string
      taskStatus:
        type: string
      taskStatusBeforeCancel:
        type: string
      templateId:
        type: string
      workFlowDetailsId:
        type: string
      workOrderDetails:
        $ref: '#/definitions/~1task~1getWorkOrderDetails'
      workOrderEscalation:
        type: object
      workOrderId:
        type: string
      workOrderState:
        type: string
      workOrderUserDefinedStatus:
        type: string
    required:
      - workOrderId
      - name
      - workOrderEscalation
      - workOrderState
      - currentTaskName
      - templateId
      - data
      - createdBy
      - executedOnInLongFormat
      - executedBy
      - currentTaskType
      - workFlowDetailsId
      - description
      - workOrderUserDefinedStatus
      - workOrderDetails
      - createdOnInLongFormat
      - completedOnInLongFormat
      - note
      - taskStatus
      - taskStatusBeforeCancel
      - newParentContainerName
      - factoryId
      - newParentContainerId
      - ccId
      - id
  /task/getTasksErrorCode:
    example:
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '142500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '142502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '142503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '142504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '142508'
        errorMessage: Failure Unable to start hazelcast server
      - errorCode: '142509'
        errorMessage: Failure- Unable to retrieve hazelcast map
      - errorCode: '142510'
        errorMessage: Unable to load data from persistence store in hazelcast map
      - errorCode: '142513'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '142610'
        errorMessage: Data not found.Work List is Empty
      - errorCode: '142611'
        errorMessage: Data not found.Process Instance ID is Empty
      - errorCode: '142616'
        errorMessage: Invalid WorkOrder Id
      - errorCode: '142701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '142703'
        errorMessage: Exception used to signal fatal problems with mapping of content.
      - errorCode: '142718'
        errorMessage: Invalid input parameters
      - errorCode: '142801'
        errorMessage: Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /task/getTasksSuccessResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/~1task~1getTasksArray'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  /task/getWorkOrderDetails:
    properties:
      factoryId:
        type: integer
      id:
        type: integer
      ipAddress:
        type: string
      netElementHostName:
        type: string
      netElementId:
        type: string
      serialNumber:
        type: string
      workOrderDetailsId:
        type: string
      workOrderId:
        type: string
    required:
      - workOrderDetailsId
      - netElementHostName
      - netElementId
      - ipAddress
      - workOrderId
      - serialNumber
      - factoryId
      - id
  /tempAction:
    properties:
      info:
        type: string
      action:
        type: string
      bestImageContainerId:
        type: string
      ccId:
        type: string
      childTasks:
        items:
          type: integer
        type: array
      configletBuilderList:
        items:
          type: string
        type: array
      configletBuilderNamesList:
        items:
          type: string
        type: array
      configletList:
        items:
          type: string
        type: array
      configletNamesList:
        items:
          type: string
        type: array
      containerKey:
        type: string
      factoryId:
        type: integer
      fromId:
        type: string
      fromName:
        type: string
      id:
        type: integer
      ignoreConfigletBuilderList:
        items:
          type: string
        type: array
      ignoreConfigletBuilderNamesList:
        items:
          type: string
        type: array
      ignoreConfigletList:
        items:
          type: string
        type: array
      ignoreConfigletNamesList:
        items:
          type: string
        type: array
      ignoreNodeId:
        type: string
      ignoreNodeList:
        items:
          type: string
        type: array
      ignoreNodeName:
        type: string
      ignoreNodeNamesList:
        items:
          type: string
        type: array
      imageBundleId:
        type: string
      infoPreview:
        type: string
      key:
        type: string
      mode:
        type: string
      nodeId:
        type: string
      nodeIpAddress:
        type: string
      nodeList:
        items:
          type: string
        type: array
      nodeName:
        type: string
      nodeNamesList:
        items:
          type: string
        type: array
      nodeTargetIpAddress:
        type: string
      nodeType:
        type: string
      note:
        type: string
      oldNodeName:
        type: string
      pageType:
        type: string
      parentTask:
        type: string
      sessionId:
        type: string
      taskId:
        type: integer
      timestamp:
        format: int64
        type: integer
      toId:
        type: string
      toIdType:
        type: string
      toName:
        type: string
      userId:
        type: string
      viaContainer:
        type: boolean
    required:
      - ccId
      - sessionId
      - containerKey
      - taskId
      - info
      - infoPreview
      - note
      - action
      - nodeType
      - nodeId
      - toId
      - fromId
      - nodeName
      - toName
      - fromName
      - childTasks
      - parentTask
      - oldNodeName
      - toIdType
      - configletList
      - ignoreConfigletList
      - configletNamesList
      - ignoreConfigletNamesList
      - nodeList
      - ignoreNodeList
      - nodeNamesList
      - ignoreNodeNamesList
      - nodeIpAddress
      - nodeTargetIpAddress
      - userId
      - key
      - ignoreNodeId
      - ignoreNodeName
      - imageBundleId
      - mode
      - timestamp
      - configletBuilderList
      - configletBuilderNamesList
      - ignoreConfigletBuilderList
      - ignoreConfigletBuilderNamesList
      - pageType
      - viaContainer
      - bestImageContainerId
      - factoryId
      - id
  /tempActionInput:
    properties:
      info:
        type: string
      action:
        type: string
      bestImageContainerId:
        type: string
      ccId:
        type: string
      childTasks:
        items:
          type: integer
        type: array
      configCompareCount:
        $ref: '#/definitions/~1configCompareCount'
      configletBuilderList:
        items:
          type: string
        type: array
      configletBuilderNamesList:
        items:
          type: string
        type: array
      configletList:
        items:
          type: string
        type: array
      configletNamesList:
        items:
          type: string
        type: array
      containerKey:
        type: string
      fromId:
        type: string
      fromName:
        type: string
      ignoreConfigletBuilderList:
        items:
          type: string
        type: array
      ignoreConfigletBuilderNamesList:
        items:
          type: string
        type: array
      ignoreConfigletList:
        items:
          type: string
        type: array
      ignoreConfigletNamesList:
        items:
          type: string
        type: array
      ignoreNodeId:
        type: string
      ignoreNodeList:
        items:
          type: string
        type: array
      ignoreNodeName:
        type: string
      ignoreNodeNamesList:
        items:
          type: string
        type: array
      imageBundleId:
        type: string
      infoPreview:
        type: string
      key:
        type: string
      mode:
        type: string
      nodeId:
        type: string
      nodeIpAddress:
        type: string
      nodeList:
        items:
          type: string
        type: array
      nodeName:
        type: string
      nodeNamesList:
        items:
          type: string
        type: array
      nodeTargetIpAddress:
        type: string
      nodeType:
        type: string
      note:
        type: string
      oldNodeName:
        type: string
      pageType:
        type: string
      parentTask:
        type: string
      sessionId:
        type: string
      taskId:
        type: integer
      timestamp:
        format: int64
        type: integer
      toId:
        type: string
      toIdType:
        type: string
      toName:
        type: string
      userId:
        type: string
      viaContainer:
        type: boolean
    required:
      - ccId
      - sessionId
      - containerKey
      - taskId
      - info
      - infoPreview
      - note
      - action
      - nodeType
      - nodeId
      - toId
      - fromId
      - nodeName
      - toName
      - fromName
      - childTasks
      - parentTask
      - oldNodeName
      - toIdType
      - configletList
      - ignoreConfigletList
      - configletNamesList
      - ignoreConfigletNamesList
      - nodeList
      - ignoreNodeList
      - nodeNamesList
      - ignoreNodeNamesList
      - nodeIpAddress
      - nodeTargetIpAddress
      - userId
      - key
      - ignoreNodeId
      - ignoreNodeName
      - imageBundleId
      - mode
      - timestamp
      - configletBuilderList
      - configletBuilderNamesList
      - ignoreConfigletBuilderList
      - ignoreConfigletBuilderNamesList
      - pageType
      - viaContainer
      - bestImageContainerId
      - configCompareCount
  /topology:
    properties:
      childContainerCount:
        type: integer
      childContainerList:
        items:
          $ref: '#/definitions/~1topology'
        type: array
      childNetElementCount:
        type: integer
      childNetElementList:
        items:
          $ref: '#/definitions/~1netElement'
        type: array
      childTaskCount:
        type: integer
      deviceStatus:
        $ref: '#/definitions/~1deviceStatus'
      hierarchyNetElementCount:
        type: integer
      key:
        type: string
      mode:
        type: string
      name:
        type: string
      parentContainerId:
        type: string
      tempAction:
        items:
          $ref: '#/definitions/~1tempAction'
        type: array
      tempEvent:
        items:
          $ref: '#/definitions/~1event'
        type: array
      type:
        type: string
    required:
      - key
      - name
      - type
      - childContainerCount
      - childNetElementCount
      - parentContainerId
      - mode
      - deviceStatus
      - childTaskCount
      - childContainerList
      - childNetElementList
      - hierarchyNetElementCount
      - tempAction
      - tempEvent
  /updateNetElementImageById/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '121860'
        errorMessage: Invalid image file
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /updateRole/moduleListRequestItems:
    properties:
      mode:
        type: string
      name:
        type: string
    required:
      - mode
      - name
    type: object
  /updateRole/moduleListResponseItems:
    properties:
      factoryId:
        type: integer
      id:
        type: integer
      mode:
        type: string
      name:
        type: string
    required:
      - mode
      - name
      - factoryId
      - id
    type: object
  /user/UserDetails:
    properties:
      roles:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/~1user~1UserDetails~1UserDetails'
    required:
      - user
      - roles
    type: object
  /user/UserDetails/UserDetails:
    properties:
      contactNumber:
        type: string
      email:
        format: email
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        format: password
        type: string
      userId:
        type: string
      userStatus:
        type: string
    required:
      - userStatus
      - userId
      - password
      - email
      - firstName
      - lastName
      - contactNumber
    type: string
  /user/addUserErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '201500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '202502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '202503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '202504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '202505'
        errorMessage: Unable to add new entity.
      - errorCode: '202507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '202508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '202509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '202510'
        errorMessage: Failure - Unable to generate unique Id.
      - errorCode: '202511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '202512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '202513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '202514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '202516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '202518'
        errorMessage: Failure - Data already exists in Database
      - errorCode: '202536'
        errorMessage: Failure - Contact Number is invalid.
      - errorCode: '202537'
        errorMessage: Failure - E-mail Address is invalid.
      - errorCode: '202538'
        errorMessage: Failure - User Name is invalid.
      - errorCode: '202539'
        errorMessage: Failure - First Name is invalid.
      - errorCode: '202540'
        errorMessage: Failure - Second Name is invalid.
      - errorCode: '202601'
        errorMessage: An EAPI command failure occurred.
      - errorCode: '202602'
        errorMessage: An EAPI request failure occurred.
      - errorCode: '202702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '202703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '202801'
        errorMessage: Failure - Entity does not exist.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /user/deleteUsersErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '201500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '202502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '202505'
        errorMessage: Unable to add new entity.
      - errorCode: '202507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '202508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '202509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '202511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '202512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '202513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '202516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '202538'
        errorMessage: Failure - UserName is invalid
      - errorCode: '202701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '202702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '202703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '202718'
        errorMessage: Invalid input parameters
      - errorCode: '202886'
        errorMessage: Failure - Superuser cannot be deleted.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /user/dynamicValue:
    properties:
      string:
        items:
          type: string
        type: array
    required:
      - string
    type: object
  /user/enableDisableUsersErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '201500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '202502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '202503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '202504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '202505'
        errorMessage: Unable to add new entity.
      - errorCode: '202506'
        errorMessage: Unable to update the entity.
      - errorCode: '202507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '202508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '202509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '202511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '202512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '202513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '202516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '202701'
        errorMessage: Exception in reading JSON string as bean class
      - errorCode: '202702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '202703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '202884'
        errorMessage: Failure - Cannot disable Superuser.
      - errorCode: '202889'
        errorMessage: Failure - Invalid input.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /user/getOnlineUserCount:
    properties:
      count:
        type: integer
    required:
      - count
  /user/getOnlineUserCountErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '202500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202504'
        errorMessage: Unable to retrieve entity from database.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /user/getUserDetails:
    properties:
      roles:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/~1user~1user'
    required:
      - roles
      - user
  /user/getUserErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '201500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '202502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '202503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '202504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '202507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '202508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '202509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '202511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '202512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '202513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '202516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '202718'
        errorMessage: Invalid input parameters
      - errorCode: '202801'
        errorMessage: Failure - Entity does not exist
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /user/getUsersDetails:
    properties:
      roles:
        $ref: '#/definitions/~1user~1dynamicValue'
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/~1user~1user'
        type: array
    required:
      - total
      - users
      - roles
  /user/getUsersErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '201500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '202502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '202503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '202504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '202507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '202508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '202509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '202511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '202512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '202513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '202516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '202718'
        errorMessage: Invalid input parameters
      - errorCode: '202801'
        errorMessage: Failure - Entity does not exist
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /user/responseForAddUser:
    properties:
      data:
        $ref: '#/definitions/~1user~1user'
    required:
      - data
  /user/responseForSuccess:
    properties:
      data:
        type: string
    required:
      - data
  /user/updateUserErrorCode:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '201500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '202501'
        errorMessage: Failure - Unable to access / login to database.
      - errorCode: '202502'
        errorMessage: Failure - Unable to connect to database.
      - errorCode: '202503'
        errorMessage: Unable to retrieve data from database.
      - errorCode: '202504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '202506'
        errorMessage: Unable to update the entity.
      - errorCode: '202507'
        errorMessage: Failure - Unable to retrieve hazelcast config file.
      - errorCode: '202508'
        errorMessage: Failure - Unable to start hazelcast server.
      - errorCode: '202509'
        errorMessage: Failure - Unable to retrieve hazelcast map.
      - errorCode: '202511'
        errorMessage: Unable to load data from persistence store in hazelcast map.
      - errorCode: '202512'
        errorMessage: Failure - Unable to load data from persistence store.
      - errorCode: '202513'
        errorMessage: Unable to load data from persistence store.
      - errorCode: '202514'
        errorMessage: Unable to add new entity. Entity already exists.
      - errorCode: '202515'
        errorMessage: Failure - Unable to add session to Hazelcast map
      - errorCode: '202516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '202536'
        errorMessage: Failure - Contact Number is invalid.
      - errorCode: '202537'
        errorMessage: Failure - E-mail Address is invalid.
      - errorCode: '202538'
        errorMessage: Failure - User Name is invalid.
      - errorCode: '202540'
        errorMessage: Failure - Second Name is invalid.
      - errorCode: '202701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '202702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '202703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '202706'
        errorMessage: Failure - Data is Empty.
      - errorCode: '202804'
        errorMessage: Failure - User Name cannot be updated.
      - errorCode: '202884'
        errorMessage: Failure - Cannot disable Superuser.
      - errorCode: '202885'
        errorMessage: Failure - Superuser cannot be edited.
      - errorCode: '202887'
        errorMessage: Failure - Superuser cannot be edited.
      - errorCode: '202974'
        errorMessage: Default password cannot be used
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /user/user:
    properties:
      contactNumber:
        type: string
      currentStatus:
        type: string
      email:
        type: string
      factoryId:
        type: integer
      firstName:
        type: string
      id:
        type: integer
      lastAccessed:
        type: number
      lastName:
        type: string
      password:
        type: string
      userId:
        type: string
      userStatus:
        type: string
      userType:
        type: string
    required:
      - factoryId
      - id
      - lastName
      - contactNumber
      - email
      - userId
      - userStatus
      - firstName
      - currentStatus
      - password
      - lastAccessed
      - userType
  /userManagement/getAppliedUserCountResponse:
    properties:
      data:
        type: integer
  /userManagement/responseForSuccess:
    properties:
      data:
        type: string
    required:
      - data
  /v2/saveTopology/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Failure - Unable to retrieve entity
      - errorCode: '122505'
        errorMessage: Unable to add new entity
      - errorCode: '122506'
        errorMessage: Unable to update the entity
      - errorCode: '122610'
        errorMessage: Data not found.Work List is Empty
      - errorCode: '122701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '122703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122875'
        errorMessage: Cannot Assign to undefined container
      - errorCode: '122929'
        errorMessage: Device is not ready. Registration in-progress
      - errorCode: '122939'
        errorMessage: The device is already in use
      - errorCode: '122949'
        errorMessage: Device is not ready. Registration failed.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /v2/validateAndCompareConfiglets/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Input json is not compliant with schema.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122401'
        errorMessage: Unauthorized user
      - errorCode: '122408'
        errorMessage: input json is not compliant with schema
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122506'
        errorMessage: Unable to update the entity
      - errorCode: '122601'
        errorMessage: An EAPI request failure occurred
      - errorCode: '122604'
        errorMessage: EAPI response is null
      - errorCode: '122605'
        errorMessage: Device not reachable
      - errorCode: '122701'
        errorMessage: Exception in reading JSON string as bean class.
      - errorCode: '122703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122751'
        errorMessage: Device certificate not installed
      - errorCode: '122810'
        errorMessage: Failure - Name cannot be empty
      - errorCode: '122829'
        errorMessage: No such device found
      - errorCode: '122830'
        errorMessage: No such container found
      - errorCode: '122833'
        errorMessage: No netelement available for container reconcile
      - errorCode: '122850'
        errorMessage: Invalid Container Id
      - errorCode: '122851'
        errorMessage: Invalid Netelement Id
      - errorCode: '122929'
        errorMessage: Device is not ready. Registration in-progress.
      - errorCode: '122944'
        errorMessage: The current EOS version on this device is not supported by CVP. Please upgrade the device to manage.
      - errorCode: '122949'
        errorMessage: Device is not ready. Registration failed.
      - errorCode: '122959'
        errorMessage: Reconcile configlet cannot be reordered
      - errorCode: '1221029'
        errorMessage: SSL configuration unavailable
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /v3/getconfigfortask/ErrorCodes:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '121500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122401'
        errorMessage: Unauthorized user
      - errorCode: '122500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '122504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '122605'
        errorMessage: Device not reachable
      - errorCode: '122706'
        errorMessage: Data is Empty
      - errorCode: '122718'
        errorMessage: Invalid input parameters
      - errorCode: '122751'
        errorMessage: Device certificate not installed
      - errorCode: '122961'
        errorMessage: 'Invalid configuration mode. '
      - errorCode: '1221029'
        errorMessage: SSL configuration unavailable
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  /version3getconfigfortask:
    properties:
      configCapturedAt:
        type: string
      configs:
        items:
          $ref: '#/definitions/~1configlet'
        type: array
      designedConfig:
        items:
          $ref: '#/definitions/configItemModel'
        type: array
      errors:
        items:
          $ref: '#/definitions/v2~1errors'
        type: array
      isReconcileInvoked:
        type: boolean
      mismatch:
        type: integer
      new:
        type: integer
      reconcile:
        type: integer
      runningConfig:
        items:
          $ref: '#/definitions/configItemModel'
        type: array
      runningConfigcount:
        type: integer
      targetIpAddress:
        type: string
      total:
        type: integer
      warnings:
        items:
          type: string
        type: array
    required:
      - runningConfig
      - errors
      - reconcile
      - warnings
      - designedConfig
      - mismatch
      - targetIpAddress
      - runningConfigcount
      - new
      - configs
      - total
      - isReconcileInvoked
      - configCapturedAt
  /vesionTwoGetConfigForTaskjson:
    properties:
      Total:
        type: integer
      configs:
        items:
          $ref: '#/definitions/~1configlet'
        type: array
      designedConfig:
        items:
          $ref: '#/definitions/configItemModel'
        type: array
      errors:
        items: {}
        type: array
      mismatch:
        type: integer
      new:
        type: integer
      reconcile:
        type: integer
      reconciledConfig:
        type: string
      runningConfig:
        items:
          $ref: '#/definitions/configItemModel'
        type: array
      targetIpAddress:
        type: string
      warnings:
        items:
          type: string
        type: array
    required:
      - reconciledConfig
      - reconcile
      - new
      - configs
      - designedConfig
      - Total
      - runningConfig
      - mismatch
      - warnings
      - errors
      - targetIpAddress
  /workOrderData:
    properties:
      IS_ADD_OR_MOVE_FLOW:
        type: boolean
      IS_CONFIG_PUSH_NEEDED:
        type: string
      NETELEMENT_ID:
        type: string
      VIEW:
        type: string
      WORKFLOW_ACTION:
        type: string
      currentparentContainerId:
        type: string
      newparentContainerId:
        type: string
    required:
      - IS_CONFIG_PUSH_NEEDED
      - currentparentContainerId
      - WORKFLOW_ACTION
      - newparentContainerId
      - NETELEMENT_ID
      - IS_ADD_OR_MOVE_FLOW
      - VIEW
  /workOrderDetails:
    properties:
      factoryId:
        type: integer
      id:
        type: integer
      ipAddress:
        type: string
      netElementHostName:
        type: string
      netElementId:
        type: string
      serialNumber:
        type: string
      workOrderDetailsId:
        type: string
      workOrderId:
        type: string
    required:
      - workOrderDetailsId
      - netElementHostName
      - netElementId
      - ipAddress
      - workOrderId
      - serialNumber
      - factoryId
      - id
  /workOrderEscalation: {}
  /workOrderJson:
    properties:
      ccId:
        type: string
      completedOnInLongFormat:
        type: integer
      createdBy:
        type: string
      createdOnInLongFormat:
        type: integer
      currentTaskName:
        type: string
      currentTaskType:
        type: string
      data:
        $ref: '#/definitions/~1workOrderData'
      description:
        type: string
      executedBy:
        type: string
      executedOnInLongFormat:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      name:
        type: string
      newParentContainerId:
        type: string
      newParentContainerName:
        type: string
      note:
        type: string
      taskStatus:
        default: ACTIVE
        type: string
      taskStatusBeforeCancel:
        type: string
      templateId:
        type: string
      workFlowDetailsId:
        type: string
      workOrderDetails:
        $ref: '#/definitions/~1workOrderDetails'
      workOrderEscalation:
        $ref: '#/definitions/~1workOrderEscalation'
      workOrderId:
        type: string
      workOrderState:
        default: ACTIVE
        type: string
      workOrderUserDefinedStatus:
        type: string
    required:
      - workOrderId
      - name
      - workOrderEscalation
      - workOrderState
      - currentTaskName
      - templateId
      - data
      - createdBy
      - executedOnInLongFormat
      - executedBy
      - currentTaskType
      - workFlowDetailsId
      - description
      - workOrderUserDefinedStatus
      - workOrderDetails
      - createdOnInLongFormat
      - completedOnInLongFormat
      - note
      - taskStatus
      - taskStatusBeforeCancel
      - newParentContainerName
      - ccId
      - factoryId
      - newParentContainerId
      - id
  AuditExportLogsError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '102500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '102504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '112498'
        errorMessage: Unauthorized user
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  AuditGetLogsError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '102500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '102504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '102702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '102718'
        errorMessage: Invalid input parameters
      - errorCode: '102841'
        errorMessage: Invalid Category
      - errorCode: '112498'
        errorMessage: Unauthorized user
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  AuditGetLogsInput:
    properties:
      category:
        type: string
      dataSize:
        format: int64
        type: integer
      endTime:
        format: int64
        type: integer
      lastRetrievedAudit:
        $ref: '#/definitions/lastRetrivedAudit'
      objectKey:
        type: string
      queryParam:
        type: string
      startTime:
        format: int64
        type: integer
    required:
      - startTime
      - endTime
      - category
      - objectKey
      - dataSize
      - queryParam
      - lastRetrievedAudit
  AuditLogs:
    properties:
      data:
        items:
          $ref: '#/definitions/AuditLogsArray'
        type: array
    required:
      - data
  AuditLogsArray:
    properties:
      activity:
        type: string
      category:
        type: string
      dateTimeInLongFormat:
        format: int64
        type: integer
      objectKey:
        type: string
      subObjectKey:
        type: string
      subObjectName:
        type: string
      userName:
        type: string
    required:
      - userName
      - category
      - activity
      - objectKey
      - subObjectName
      - subObjectKey
      - dateTimeInLongFormat
  CVPUserProfile:
    properties:
      Version:
        type: string
      authenticationServerType:
        type: string
      authorizationServerType:
        type: string
      defaultUserFirstLogin:
        type: boolean
      roles:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/LoginUserObject'
    required:
      - defaultUserFirstLogin
      - roles
      - authenticationServerType
      - Version
      - authorizationServerType
      - user
  ChangePasswordModel:
    properties:
      contactNumber:
        type: string
      currentPassword:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      oldPassword:
        type: string
      userId:
        type: string
    required:
      - userId
      - oldPassword
      - currentPassword
      - email
      - firstName
      - lastName
      - contactNumber
  Container:
    description: Detailed data of a container
    properties:
      CreatedBy:
        type: string
      CreatedOn:
        format: int64
        type: integer
      Key:
        type: string
      Mode:
        enum:
          - expand
          - collapse
        type: string
      Name:
        type: string
  CvpInfo:
    properties:
      version:
        type: string
    required:
      - version
  DeleteDeviceFailed:
    type: object
    additionalProperties:
      type: string
    example:
      <deviceID 1>: failure reason
      <deviceID 2>: failure reason
  DeleteDevicesReq:
    properties:
      data:
        items:
          type: string
        type: array
    required:
      - data
  DeleteDevicesResp:
    description: Response of deleting a list of devices
    properties:
      result:
        description: 'Contains "success" if all requested devices are deleted, "failed" otherwise'
        type: string
      failedDevices:
        description: DeviceIDs of devices that could not be deleted and the reason for failure
        $ref: '#/definitions/DeleteDeviceFailed'
        type: object
  Device:
    description: Detailed data of a device in the inventory
    properties:
      architecture:
        type: string
      bootupTimestamp:
        format: float
        type: number
      complianceCode:
        type: string
      complianceIndication:
        type: string
      danzEnabled:
        type: boolean
      domainName:
        type: string
      fqdn:
        type: string
      hardwareRevision:
        type: string
      hostname:
        type: string
      internalBuild:
        type: string
      internalVersion:
        type: string
      ipAddress:
        type: string
      memFree:
        format: int64
        type: integer
      memTotal:
        format: int64
        type: integer
      mlagEnabled:
        type: boolean
      modelName:
        type: string
      parentContainerKey:
        type: string
      serialNumber:
        type: string
      status:
        type: string
      systemMacAddress:
        type: string
      unAuthorized:
        type: boolean
      version:
        type: string
      ztpMode:
        type: boolean
  DeviceOnboardingFailure:
    description: IP address or hostname of a device that could not be onboarded and the reason of failure
    properties:
      host:
        description: IP addresses or hostname of the device
        type: string
      error:
        description: Error encountered while onboarding the device
        type: string
    required:
      - host
      - error
  GetCvpInfoError:
    example:
      - errorCode: '111500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '112500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  GetInventoryDeviceConfigurationError:
    example:
      - errorCode: '112498'
        errorMessage: Failure - User is unauthorized.
      - errorCode: '172401'
        errorMessage: Failure - Unauthorized user.
      - errorCode: '172605'
        errorMessage: Failure - Device not reachable.
      - errorCode: '172718'
        errorMessage: Invalid input parameters
      - errorCode: '172751'
        errorMessage: Device certificate not installed
      - errorCode: '172801'
        errorMessage: Entity does not exist.
      - errorCode: '172929'
        errorMessage: Device is not ready. Registration in-progress.
      - errorCode: '173500'
        errorMessage: Failure - Could not log in to the switch..
      - errorCode: '1721029'
        errorMessage: SSL configuration unavailable
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
  HostNameDeviceMap:
    type: object
    additionalProperties:
      type: string
    example:
      <host-name 1>: <DeviceID 1>
      <host-name 2>: <DeviceID 2>
  InventoryDeviceConfiguration:
    properties:
      output:
        type: string
      warnings:
        items:
          type: string
        type: array
    required:
      - output
      - warnings
  LabelDetails:
    properties:
      name:
        type: string
      note:
        type: string
      type:
        type: string
  LabelDetailsUpdate:
    properties:
      key:
        type: string
      name:
        type: string
      note:
        type: string
      type:
        type: string
  LoginAuthenticateError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112402'
        errorMessage: Authentication client failure
      - errorCode: '112403'
        errorMessage: authorization failure
      - errorCode: '112405'
        errorMessage: Your credential is not enabled in the CloudVision Portal. Please contact your network-admin
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '112500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '112501'
        errorMessage: Failure - Unable to access / login to database
      - errorCode: '112502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '112503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '112504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '112505'
        errorMessage: Unable to add new entity
      - errorCode: '112507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '112508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '112509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '112510'
        errorMessage: Failure - Unable to generate unique Id
      - errorCode: '112511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '112512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '112513'
        errorMessage: Failure -Unable to shutdown hazelcast server
      - errorCode: '112515'
        errorMessage: Failure - Unable to add session to Hazelcast map
      - errorCode: '112516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '112519'
        errorMessage: Failure - Unable to delete the entity
      - errorCode: '112701'
        errorMessage: 'Exception in reading JSON string as bean class '
      - errorCode: '112702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
      - errorCode: '112703'
        errorMessage: Exception used to signal fatal problems with mapping of content
      - errorCode: '112802'
        errorMessage: Server unreachable.
      - errorCode: '112803'
        errorMessage: External authentication server is not reachable
      - errorCode: '112808'
        errorMessage: Failure - External servers are disabled
      - errorCode: '1121010'
        errorMessage: Purging is in-progress
      - errorCode: '1121013'
        errorMessage: Invalid user credentials
      - errorCode: '1121014'
        errorMessage: An unknown error has occurred from the authentication server
      - errorCode: '1121015'
        errorMessage: Invalid shared secret key
      - errorCode: '1121016'
        errorMessage: Access is denied due to invalid credential or invalid shared secret key
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  LoginAuthenticateResponse:
    properties:
      authenticationType:
        type: string
      authorizationType:
        type: string
      permissionList:
        items:
          $ref: '#/definitions/LoginModuleList'
        type: array
      roles:
        items:
          $ref: '#/definitions/LoginRoles'
        type: array
      sessionId:
        type: string
      user:
        $ref: '#/definitions/LoginUserObject'
      userName:
        type: string
    required:
      - userName
      - sessionId
      - roles
      - authenticationType
      - permissionList
      - authorizationType
      - user
  LoginChangePasswordError:
    properties:
      '92407': {}
      '111500': {}
      '112404': {}
      '112406': {}
      '112498': {}
      '112500': {}
      '112502': {}
      '112503': {}
      '112504': {}
      '112506': {}
      '112507': {}
      '112508': {}
      '112509': {}
      '112510': {}
      '112511': {}
      '112512': {}
      '112513': {}
      '112516': {}
      '112701': {}
      '112702': {}
      '112703': {}
      '112801': {}
      '112974': {}
  LoginGetPermissionError:
    properties:
      '92407': {}
      '112498': {}
      '112500': {}
      '112502': {}
      '112503': {}
      '112504': {}
      '112507': {}
      '112508': {}
      '112509': {}
      '112511': {}
      '112512': {}
      '112513': {}
      '112516': {}
      '112517': {}
      '112701': {}
      '112718': {}
      '112801': {}
  LoginGetUserProfileError:
    properties:
      '92407': {}
      '112498': {}
      '112500': {}
      '112502': {}
      '112503': {}
      '112504': {}
      '112507': {}
      '112508': {}
      '112509': {}
      '112511': {}
      '112512': {}
      '112513': {}
      '112516': {}
      '112517': {}
      '112701': {}
      '112718': {}
      '112801': {}
  LoginModuleList:
    properties:
      factoryId:
        type: integer
      id:
        type: integer
      mode:
        type: string
      name:
        type: string
    required:
      - factoryId
      - id
      - name
      - mode
    type: object
  LoginResponseSuccess:
    properties:
      data:
        type: string
    required:
      - data
  LoginRoles:
    properties:
      classId:
        type: integer
      createdBy:
        type: string
      createdOn:
        type: number
      description:
        type: string
      factoryId:
        type: string
      id:
        type: integer
      key:
        type: string
      moduleList:
        items:
          $ref: '#/definitions/LoginModuleList'
        type: array
      moduleListSize:
        type: integer
      name:
        type: string
    required:
      - id
      - moduleList
      - factoryId
      - createdOn
      - moduleListSize
      - createdBy
      - classId
      - description
      - name
      - key
    type: object
  LoginUserAuthenticate:
    properties:
      password:
        type: string
      userId:
        type: string
    required:
      - userId
      - password
  LoginUserObject:
    properties:
      contactNumber:
        type: string
      currentStatus:
        type: string
      email:
        type: string
      factoryId:
        type: integer
      firstName:
        type: string
      id:
        type: integer
      lastAccessed:
        type: number
      lastName:
        type: string
      password:
        type: string
      userId:
        type: string
      userStatus:
        type: string
    required:
      - factoryId
      - id
      - lastName
      - contactNumber
      - email
      - userId
      - userStatus
      - firstName
      - currentStatus
      - password
      - lastAccessed
  LoginUserRoleDetails:
    properties:
      permissionList:
        items:
          $ref: '#/definitions/LoginModuleList'
        type: array
    required:
      - role
  LogoutError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '112500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application
      - errorCode: '112501'
        errorMessage: Failure - Unable to access / login to database
      - errorCode: '112502'
        errorMessage: Failure - Unable to connect to database
      - errorCode: '112503'
        errorMessage: Unable to retrieve data from database
      - errorCode: '112504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '112506'
        errorMessage: Unable to update the entity
      - errorCode: '112507'
        errorMessage: Failure - Unable to retrieve hazelcast config file
      - errorCode: '112508'
        errorMessage: Failure - Unable to start hazelcast server
      - errorCode: '112509'
        errorMessage: Failure - Unable to retrieve hazelcast map
      - errorCode: '112511'
        errorMessage: Failure - Unable to load data from persistence store in hazelcast map
      - errorCode: '112512'
        errorMessage: Failure - Unable to load data from persistence store
      - errorCode: '112513'
        errorMessage: Failure -Unable to shutdown hazelcast server
      - errorCode: '112516'
        errorMessage: Failure - Unable to retrieve session from Hazelcast map
      - errorCode: '112517'
        errorMessage: Failure - Unable to delete session from Hazelcast map
      - errorCode: '112519'
        errorMessage: Failure - Unable to delete the entity from database
      - errorCode: '112701'
        errorMessage: 'Exception in reading JSON string as bean class '
      - errorCode: '112702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
  OnboardDevicesReq:
    description: List of IP addresses or host names of devices to be onboarded
    properties:
      hosts:
        items:
          type: string
        type: array
    required:
      - hosts
  OnboardDevicesResp:
    description: Response of a request to onboard a list of devices
    properties:
      failed:
        description: IP addresses or hostnames of the devices that could not be onboarded and the reasons for failure
        items:
          $ref: '#/definitions/DeviceOnboardingFailure'
        type: array
      hostToDevIdMap:
        description: Hostname to device ID mappings
        $ref: '#/definitions/HostNameDeviceMap'
        type: object
  ProvisionStreamingReq:
    description: List of deviceIDs to be provisioned
    properties:
      data:
        items:
          $ref: '#/definitions/provisionDeviceModel'
        type: array
    required:
      - data
  ProvisionStreamingResp:
    description: List of devices which couldn't be provisioned
    properties:
      data:
        $ref: '#/definitions/provisionedDeviceRespModel'
    required:
      - data
  SSLBindCertWithCSRError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322505'
        errorMessage: Unable to add new entity.
      - errorCode: '322718'
        errorMessage: Invalid Input Parameter
      - errorCode: '322728'
        errorMessage: Unsupported algorithm.
      - errorCode: '322752'
        errorMessage: Certificate expired
      - errorCode: '322767'
        errorMessage: Error reading certificate
      - errorCode: '322768'
        errorMessage: Private key and public cert mismatch
      - errorCode: '322771'
        errorMessage: Could not import cert since CSR does not exist
      - errorCode: '322772'
        errorMessage: File size cannot exceed 1 MB
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLBindCertWithCSRInput:
    properties:
      publicCertFile:
        type: string
      publicCertFileName:
        type: string
    required:
      - publicCertFileName
      - publicCertFile
  SSLCSRResponseJson:
    properties:
      certStoreKey:
        type: string
      certType:
        type: string
      commonName:
        type: string
      country:
        type: string
      createdBy:
        type: string
      createdOn:
        type: integer
      description:
        type: string
      digestAlgorithm:
        type: string
      emailId:
        type: string
      encryptAlgorithm:
        type: string
      key:
        type: string
      keyLength:
        type: integer
      location:
        type: string
      organization:
        type: string
      organizationUnit:
        type: string
      passPhraseProtected:
        type: boolean
      state:
        type: string
      subjectAlternateNameDNSList:
        items:
          type: string
        type: array
      subjectAlternateNameIPList:
        items:
          type: string
        type: array
    required:
      - key
      - certStoreKey
      - certType
      - commonName
      - organization
      - organizationUnit
      - location
      - state
      - country
      - subjectAlternateNameIPList
      - subjectAlternateNameDNSList
      - description
      - emailId
      - keyLength
      - digestAlgorithm
      - encryptAlgorithm
      - passPhraseProtected
      - createdBy
      - createdOn
  SSLCertificateDetailsResponseJson:
    properties:
      certEnabled:
        type: boolean
      certStoreKey:
        type: string
      certType:
        type: string
      commonName:
        type: string
      country:
        type: string
      createdBy:
        type: string
      createdOn:
        type: integer
      description:
        type: string
      digestAlgorithm:
        type: string
      encryptAlgorithm:
        type: string
      issuedBy:
        type: string
      issuedOn:
        type: integer
      issuedTo:
        type: string
      key:
        type: string
      keyLength:
        type: integer
      location:
        type: string
      organization:
        type: string
      organizationUnit:
        type: string
      passPhraseProtected:
        type: boolean
      privateKeyFileName:
        type: string
      publicCertFileName:
        type: string
      selfSigned:
        type: boolean
      state:
        type: string
      subjectAlternateNameDNSList:
        items:
          type: string
        type: array
      subjectAlternateNameIPList:
        items:
          type: string
        type: array
      validFrom:
        type: integer
      validTill:
        type: integer
      validity:
        type: integer
    required:
      - key
      - certType
      - certEnabled
      - commonName
      - publicCertFileName
      - privateKeyFileName
      - organization
      - organizationUnit
      - location
      - state
      - country
      - subjectAlternateNameIPList
      - subjectAlternateNameDNSList
      - description
      - keyLength
      - selfSigned
      - digestAlgorithm
      - encryptAlgorithm
      - createdBy
      - createdOn
      - issuedTo
      - issuedBy
      - issuedOn
      - validity
      - validFrom
      - validTill
  SSLCertificateDetailsResponseJsonWithoutKey:
    properties:
      certEnabled:
        type: boolean
      certStoreKey:
        type: string
      certType:
        type: string
      commonName:
        type: string
      country:
        type: string
      createdBy:
        type: string
      createdOn:
        type: integer
      description:
        type: string
      digestAlgorithm:
        type: string
      encryptAlgorithm:
        type: string
      issuedBy:
        type: string
      issuedOn:
        type: integer
      issuedTo:
        type: string
      key:
        type: string
      keyLength:
        type: integer
      location:
        type: string
      organization:
        type: string
      organizationUnit:
        type: string
      passPhraseProtected:
        type: boolean
      privateKeyFileName:
        type: string
      publicCertFileName:
        type: string
      selfSigned:
        type: boolean
      state:
        type: string
      subjectAlternateNameDNSList:
        items:
          type: string
        type: array
      subjectAlternateNameIPList:
        items:
          type: string
        type: array
      validFrom:
        type: integer
      validTill:
        type: integer
      validity:
        type: integer
    required:
      - certType
      - certEnabled
      - commonName
      - publicCertFileName
      - privateKeyFileName
      - organization
      - organizationUnit
      - location
      - state
      - country
      - subjectAlternateNameIPList
      - subjectAlternateNameDNSList
      - description
      - keyLength
      - selfSigned
      - digestAlgorithm
      - encryptAlgorithm
      - createdBy
      - createdOn
      - issuedTo
      - issuedBy
      - issuedOn
      - validity
      - validFrom
      - validTill
  SSLDeleteCSRError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322532'
        errorMessage: Failure - No data found
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLDeleteProposedCertificateError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322532'
        errorMessage: Failure - No data found
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLExportCSRError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322532'
        errorMessage: Failure - No data found
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLExportCSRResponse:
    properties:
      csr:
        type: string
      fileName:
        type: string
    required:
      - fileName
      - csr
  SSLExportCertificateError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322532'
        errorMessage: Failure - No data found
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLExportCertificateInput:
    properties:
      key:
        type: string
      passPhrase:
        type: string
    required:
      - key
      - passPhrase
  SSLExportCertificateResponse:
    properties:
      cert:
        type: string
      fileName:
        type: string
    required:
      - fileName
      - cert
  SSLGenerateCSRError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322505'
        errorMessage: Unable to add new entity.
      - errorCode: '322727'
        errorMessage: Field length exceeded.
      - errorCode: '322753'
        errorMessage: Unsupported key length
      - errorCode: '322754'
        errorMessage: Unsupported digest algorithm
      - errorCode: '322755'
        errorMessage: Unsupported encrypt algorithm
      - errorCode: '322757'
        errorMessage: Invalid country code
      - errorCode: '322759'
        errorMessage: Failure - Mandatory field(s) cannot be empty
      - errorCode: '322761'
        errorMessage: Invalid email id.
      - errorCode: '322763'
        errorMessage: Could not add CSR since CSR already exists
      - errorCode: '322764'
        errorMessage: 'CommonName, Organization, OrganizationUnit, Location and State cannot contain ''+'', ''#'', '';'', ''Double Quotation'', ''<'', ''>'' ,''Forward Slash'' ,''Backward Slash''.'
      - errorCode: '322765'
        errorMessage: Failure - Problem while generating cert/CSR.
      - errorCode: '322846'
        errorMessage: Invalid IP Address
      - errorCode: '3221018'
        errorMessage: Error while creating subject alternate name.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLGenerateCSRInputJson:
    properties:
      commonName:
        type: string
      country:
        type: string
      description:
        type: string
      digestAlgorithm:
        type: string
      emailId:
        type: string
      encryptAlgorithm:
        type: string
      keyLength:
        type: integer
      location:
        type: string
      organization:
        type: string
      organizationUnit:
        type: string
      state:
        type: string
      subjectAlternateNameDNSList:
        items:
          type: string
        type: array
      subjectAlternateNameIPList:
        items:
          type: string
        type: array
    required:
      - commonName
      - organization
      - organizationUnit
      - location
      - state
      - country
      - keyLength
      - digestAlgorithm
      - encryptAlgorithm
  SSLGenerateCertificateError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322505'
        errorMessage: Unable to add new entity.
      - errorCode: '322727'
        errorMessage: Field length exceeded.
      - errorCode: '322753'
        errorMessage: Unsupported key length
      - errorCode: '322754'
        errorMessage: Unsupported digest algorithm
      - errorCode: '322755'
        errorMessage: Unsupported encrypt algorithm
      - errorCode: '322756'
        errorMessage: Valid days must be between 1 and 10000
      - errorCode: '322757'
        errorMessage: Invalid country code
      - errorCode: '322759'
        errorMessage: Failure - Mandatory field(s) cannot be empty
      - errorCode: '322762'
        errorMessage: Invalid cert type
      - errorCode: '322764'
        errorMessage: 'CommonName, Organization, OrganizationUnit, Location and State cannot contain ''+'', ''#'', '';'', ''Double Quotation'', ''<'', ''>'' ,''Forward Slash'' ,''Backward Slash''.'
      - errorCode: '322765'
        errorMessage: Failure - Problem while generating cert/CSR.
      - errorCode: '322778'
        errorMessage: Error fetching certificate compliance check time
      - errorCode: '322788'
        errorMessage: 'Cannot create device certificate authority. Device certificate authority will expire in xx days/day, xx hours/hour, xx minutes/minute.'
      - errorCode: '322846'
        errorMessage: Invalid IP Address
      - errorCode: '3221018'
        errorMessage: Error while creating subject alternate name.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLGenerateCertificateInput:
    properties:
      certType:
        type: string
      commonName:
        type: string
      country:
        type: string
      description:
        type: string
      digestAlgorithm:
        type: string
      encryptAlgorithm:
        type: string
      keyLength:
        type: integer
      location:
        type: string
      organization:
        type: string
      organizationUnit:
        type: string
      state:
        type: string
      subjectAlternateNameDNSList:
        items:
          type: string
        type: array
      subjectAlternateNameIPList:
        items:
          type: string
        type: array
      validity:
        type: integer
    required:
      - commonName
      - keyLength
      - digestAlgorithm
      - encryptAlgorithm
      - validity
  SSLGetCertificatesError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322532'
        errorMessage: Failure -  No data found.
      - errorCode: '322762'
        errorMessage: Invalid cert type
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLImportCertAndPrivateKeyError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '92702'
        errorMessage: Exception in parsing content that does not conform to JSON syntax as per specification.
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322505'
        errorMessage: Unable to add new entity.
      - errorCode: '322718'
        errorMessage: Invalid Input Parameter
      - errorCode: '322728'
        errorMessage: Unsupported algorithm.
      - errorCode: '322752'
        errorMessage: Certificate expired
      - errorCode: '322759'
        errorMessage: Failure - Mandatory field(s) cannot be empty
      - errorCode: '322762'
        errorMessage: Invalid cert type
      - errorCode: '322766'
        errorMessage: Error reading private key
      - errorCode: '322767'
        errorMessage: Error reading certificate
      - errorCode: '322768'
        errorMessage: Private key and public cert mismatch
      - errorCode: '322769'
        errorMessage: Invalid certificate
      - errorCode: '322772'
        errorMessage: File size cannot exceed 1 MB
      - errorCode: '322775'
        errorMessage: Invalid passphrase or private key
      - errorCode: '322778'
        errorMessage: Error fetching certificate compliance check time
      - errorCode: '322786'
        errorMessage: 'Cannot import device certificate authority. Device certificate authority will expire in xx days/day, xx hours/hour, xx minutes/minute.'
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLImportCertAndPrivateKeyInput:
    properties:
      certType:
        type: string
      passPhrase:
        type: string
      privateKey:
        type: string
      privateKeyFileName:
        type: string
      publicCert:
        type: string
      publicCertFileName:
        type: string
    required:
      - publicCertFileName
      - privateKeyFileName
      - publicCert
      - privateKey
      - certType
      - passPhrase
  SSLInstallCertificateError:
    example:
      - errorCode: '92407'
        errorMessage: Access Denied
      - errorCode: '112498'
        errorMessage: Unauthorized user
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database
      - errorCode: '322505'
        errorMessage: Unable to add new entity.
      - errorCode: '322770'
        errorMessage: Nginx ssl cert could not be backed up
      - errorCode: '322776'
        errorMessage: Failed installing SSL certificate. Reverted back to old SSL certs.
      - errorCode: '322777'
        errorMessage: Failed installing SSL certificate. Failed reverting back to old SSL certs.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  SSLResponseDataJson:
    properties:
      data:
        type: string
    required:
      - data
  SSLResponseDataJsonWithEventIdAndType:
    properties:
      data:
        type: string
      eventId:
        type: string
      eventType:
        type: string
    required:
      - data
      - eventId
      - eventType
  TrustedCertificate:
    properties:
      certName:
        type: string
      certType:
        type: string
      classId:
        type: integer
      country:
        type: string
      digestAlgorithm:
        type: string
      emailId:
        type: string
      encryptAlgorithm:
        type: string
      fingerPrint:
        type: string
      issuedTo:
        type: string
      key:
        type: string
      keyLength:
        type: integer
      location:
        type: string
      organization:
        type: string
      organizationUnit:
        type: string
      signedBy:
        type: string
      state:
        type: string
      subjectAltName:
        type: string
      uploadedBy:
        type: string
      validFrom:
        type: integer
      validTill:
        type: integer
    required:
      - classId
      - certName
      - signedBy
      - validFrom
      - validTill
      - fingerPrint
      - uploadedBy
      - organization
      - organizationUnit
      - location
      - state
      - country
      - emailId
      - subjectAltName
      - keyLength
      - digestAlgorithm
      - encryptAlgorithm
      - issuedTo
      - certType
      - key
  TrustedCertificates:
    properties:
      total:
        type: integer
      trustedServers:
        items:
          $ref: '#/definitions/TrustedCertificate'
        type: array
    required:
      - total
      - trustedServers
  TrustedCertificatesArray:
    properties:
      data:
        items:
          type: string
        type: array
    required:
      - data
  TrustedCertificatesCertDetail:
    properties:
      certName:
        type: string
      classId:
        type: integer
      country:
        type: string
      digestAlgorithm:
        type: string
      emailId:
        type: string
      encryptAlgorithm:
        type: string
      fingerPrint:
        type: string
      issuedTo:
        type: string
      keyLength:
        type: integer
      location:
        type: string
      organization:
        type: string
      organizationUnit:
        type: string
      signedBy:
        type: string
      state:
        type: string
      subjectAltName:
        type: string
      uploadedBy:
        type: string
      validFrom:
        type: integer
      validTill:
        type: integer
    required:
      - classId
      - certName
      - signedBy
      - validFrom
      - validTill
      - fingerPrint
      - uploadedBy
      - issuedTo
      - organization
      - organizationUnit
      - location
      - state
      - country
      - subjectAltName
      - encryptAlgorithm
      - digestAlgorithm
      - keyLength
  TrustedCertificatesDeleteError:
    example:
      - errorCode: '92407'
        errorMessage: Access denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '322726'
        errorMessage: Cert does not exist
      - errorCode: '322767'
        errorMessage: Error reading certificate
      - errorCode: '322795'
        errorMessage: Default certs cannot be deleted.
      - errorCode: '322889'
        errorMessage: Failure - Invalid input.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  TrustedCertificatesDeleteResponse:
    properties:
      data:
        type: string
    required:
      - data
  TrustedCertificatesExportError:
    example:
      - errorCode: '92407'
        errorMessage: Access denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '322725'
        errorMessage: Default certs cannot be exported
      - errorCode: '322726'
        errorMessage: Cert does not exist
      - errorCode: '322767'
        errorMessage: Error reading certificate
      - errorCode: '322889'
        errorMessage: Failure - Invalid input.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  TrustedCertificatesGetCertDetailError:
    example:
      - errorCode: '92407'
        errorMessage: Access denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '322767'
        errorMessage: Error reading certificate
      - errorCode: '322889'
        errorMessage: Failure - Invalid input.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  TrustedCertificatesGetCertsError:
    example:
      - errorCode: '92407'
        errorMessage: Access denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '322701'
        errorMessage: Exception in reading JSON string as bean class
      - errorCode: '322767'
        errorMessage: Error reading certificate
      - errorCode: '322889'
        errorMessage: Failure - Invalid input.
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  TrustedCertificatesUpload:
    properties:
      certificate:
        type: string
    required:
      - certificate
  TrustedCertificatesUploadError:
    example:
      - errorCode: '92407'
        errorMessage: Access denied.
      - errorCode: '112498'
        errorMessage: Unauthorized user.
      - errorCode: '322500'
        errorMessage: A RuntimeException occurred in the CloudVision Portal application.
      - errorCode: '322504'
        errorMessage: Unable to retrieve entity from database.
      - errorCode: '322505'
        errorMessage: Unable to add new entity.
      - errorCode: '322752'
        errorMessage: Certificate expired
      - errorCode: '322767'
        errorMessage: Error reading certificate
      - errorCode: '322772'
        errorMessage: File size cannot exceed 5 MB
      - errorCode: '322798'
        errorMessage: Cert already exists
      - errorCode: '322799'
        errorMessage: Invalid file format
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    required:
      - errorCode
      - errorMessage
  TrustedCertificatesUploadResponse:
    properties:
      data:
        type: string
    required:
      - data
  UpdateNotesToLabel:
    properties:
      key:
        type: string
      note:
        type: string
  addLabelResponse:
    properties:
      dateTimeInLongFormat:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      netElementCount:
        type: integer
      note:
        type: string
      type:
        type: string
      user:
        type: string
  addTaskLog:
    properties:
      message:
        type: string
      source:
        type: string
      taskId:
        type: string
    required:
      - taskId
      - message
      - source
  addTempAction:
    properties:
      data:
        items:
          $ref: '#/definitions/tempProposedActionModel'
        type: array
  addTempGeneratedConfigletModel:
    properties:
      data:
        items:
          $ref: '#/definitions/~1configlet~1addTempGeneratedConfigletModel'
        type: array
    required:
      - data
  appliedDeviceResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/deviceLabelResponse'
        type: array
      total:
        type: integer
  autoConfigletGeneratorData:
    properties:
      configletBuilderId:
        type: string
      containerId:
        type: string
      netElementIds:
        items:
          type: string
        type: array
      pageType:
        type: string
    required:
      - configletBuilderId
      - netElementIds
      - containerId
      - pageType
  autoConfigletGeneratorDataArray:
    properties:
      configlet:
        $ref: '#/definitions/autoConfigletGeneratorDataconfiglet'
      isExistingGc:
        type: boolean
      netElementId:
        type: string
      status:
        type: string
    required:
      - status
      - configlet
      - netElementId
  autoConfigletGeneratorDataconfiglet:
    properties:
      config:
        type: string
      containerCount:
        type: integer
      dateTimeInLongFormat:
        type: integer
      isAutoBuilder:
        type: string
      isDefault:
        type: string
      isDraft:
        default: false
        type: boolean
      key:
        type: string
      name:
        type: string
      netElementCount:
        type: integer
      note:
        type: string
      reconciled:
        type: boolean
      tempConfigletObjectIdMapper:
        $ref: '#/definitions/~1configlet~1tempConfigletObjectIdMapperJson'
      type:
        type: string
      user:
        type: string
    required:
      - config
      - tempConfigletObjectIdMapper
      - user
      - isAutoBuilder
      - dateTimeInLongFormat
      - reconciled
      - containerCount
      - netElementCount
      - isDefault
      - note
      - name
      - key
      - type
      - isDraft
  cancelImages:
    properties:
      data:
        type: string
    required:
      - data
  checkCompliance:
    properties:
      nodeId:
        type: string
      nodeType:
        type: string
  configItemModel:
    properties:
      blockId:
        type: string
      code:
        type: string
      command:
        type: string
      parentRowId:
        format: int32
        type: integer
      rowId:
        format: int32
        type: integer
      shouldReconcile:
        type: boolean
    required:
      - command
      - rowId
      - code
      - blockId
      - parentRowId
      - shouldReconcile
  configNote:
    properties:
      key:
        description: existing configlet key
        type: string
      note:
        type: string
    required:
      - key
      - note
  configUpdate:
    properties:
      config:
        type: string
      key:
        description: existing configlet key
        type: string
      name:
        type: string
      reconciled:
        default: false
        type: boolean
      waitForTaskIds:
        default: false
        type: boolean
    required:
      - name
      - config
      - key
  configlet/validateConfigErrorType:
    properties:
      error:
        type: string
      lineNo:
        type: integer
    required:
      - lineNo
      - error
  configlet/validateConfigWarningType:
    properties:
      lineNo:
        type: integer
      warning:
        type: string
    required:
      - lineNo
      - warning
  configletBuilder:
    properties:
      action:
        type: string
      formList:
        items:
          $ref: '#/definitions/~1configlet~1configletBuilderFormArray'
        type: array
      mainScript:
        $ref: '#/definitions/~1configlet~1configletBuildermainScriptArray'
    required:
      - formList
      - action
      - mainScript
  configletBuilderAdd:
    properties:
      data:
        $ref: '#/definitions/~1configlet~1configletBuilderAddData'
      name:
        type: string
      waitForTaskIds:
        default: false
        type: boolean
    required:
      - name
      - data
  configletBuilderPreview:
    properties:
      configletBuilderId:
        type: string
      containerId:
        type: string
      containerToId:
        type: string
      mode:
        type: string
      netElementIds:
        items:
          type: string
        type: array
      pageType:
        type: string
      previewValues:
        items:
          $ref: '#/definitions/~1configlet~1configletBuilderPreviewArray'
        type: array
    required:
      - previewValues
      - configletBuilderId
      - netElementId
      - pageType
      - mode
      - containerId
      - containerToId
  configletModel:
    properties:
      config:
        type: string
      name:
        type: string
    required:
      - config
      - name
  containerjson:
    properties:
      dateTimeInLongFormat:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      mode:
        type: string
      name:
        type: string
      root:
        type: boolean
      undefined:
        type: boolean
      userId:
        type: string
    required:
      - name
      - key
      - root
      - undefined
      - userId
      - dateTimeInLongFormat
      - mode
      - factoryId
      - id
  dataSuccessResponse:
    properties:
      data:
        type: string
  deleteConfiglet:
    items: {}
    properties:
      key:
        type: string
      name:
        type: string
    required:
      - key
      - name
    type: array
  deleteImage:
    properties:
      key:
        type: string
      name:
        type: string
    required:
      - name
      - key
  deleteImg:
    properties:
      data:
        items:
          $ref: '#/definitions/deleteImage'
        type: array
    required:
      - data
  deletedExtensions:
    properties:
      imageId:
        type: string
      rebootRequired:
        type: string
    required:
      - imageId
      - rebootRequired
  designedConfig:
    properties:
      configIdList:
        items:
          type: string
        type: array
      netElementId:
        type: string
      pageType:
        type: string
    required:
      - netElementId
      - configIdList
      - pageType
  designedConfig2:
    properties:
      configIdList:
        items:
          type: string
        type: array
      netElementId:
        description: existing configlet key
        type: string
    required:
      - netElementId
      - configIdList
  deviceLabelResponse:
    properties:
      appliedBy:
        type: string
      appliedDate:
        type: number
      containerName:
        type: string
      hostName:
        type: string
      ipAddress:
        type: string
      totalDevicesCount:
        type: integer
  exportConfigletsModel:
    properties:
      data:
        items:
          type: string
        type: array
    required:
      - data
  getConfigletByAnyMapperModel:
    properties:
      configletId_123:
        $ref: '#/definitions/getMapperElementsModel'
    required:
      - configletId_123
  getConfigletsByNetelementIdModel:
    properties:
      configletList:
        items:
          $ref: '#/definitions/~1configlet'
        type: array
      configletMapper:
        $ref: '#/definitions/getConfigletByAnyMapperModel'
      total:
        format: int32
        type: integer
    required:
      - total
      - configletList
      - configletMapper
  getContainerinfobyidjson:
    properties:
      associatedConfiglets:
        type: integer
      associatedSwitches:
        type: integer
      bundleName:
        type: string
      danzEnabledSwitches:
        type: integer
      date:
        type: integer
      name:
        type: string
      parentName:
        type: string
      userId:
        type: string
    type: object
  getExternalEventData:
    properties:
      pendingTask:
        type: integer
      startDateLongFormat:
        format: int64
        type: integer
    required:
      - pendingTask
      - startDateLongFormat
  getImageBundleAppliedDevicesData:
    properties:
      appliedBy:
        type: string
      appliedDate:
        format: int64
        type: integer
      containerName:
        type: string
      hostName:
        type: string
      ipAddress:
        type: string
      totalDevicesCount:
        type: integer
    required:
      - containerName
      - appliedBy
      - appliedDate
      - hostName
      - ipAddress
      - totalDevicesCount
  getImageBundleByAnyIdModel:
    properties:
      imageBundleList:
        items:
          $ref: '#/definitions/imagesBundleData'
        type: array
      imageBundleMapper:
        $ref: '#/definitions/getImageBundleByAnyMapperModel'
      total:
        format: int32
        type: integer
    required:
      - total
      - imageBundleList
      - imageBundleMapper
  getImageBundleByAnyMapperModel:
    properties:
      imageBundleId_123:
        $ref: '#/definitions/getMapperElementsModel'
    required:
      - imageBundleId_123
  getImagesBundleData:
    properties:
      appliedContainersCount:
        type: integer
      appliedDevicesCount:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      imageIds:
        items:
          type: string
        type: array
      isCertifiedImageBundle:
        type: string
      key:
        type: string
      name:
        type: string
      note:
        type: string
      updatedDateinLongFormat:
        format: int64
        type: integer
      user:
        type: string
    required:
      - key
      - name
      - isCertifiedImageBundle
      - note
      - user
      - updatedDateinLongFormat
      - appliedContainersCount
      - appliedDevicesCount
      - imageIds
      - factoryId
      - id
  getImagesBundleDetails:
    properties:
      appliedContainersCount:
        type: integer
      appliedDevicesCount:
        type: integer
      imageIds:
        items:
          type: string
        type: array
      images:
        items:
          $ref: '#/definitions/getImagesData'
        type: array
      isCertifiedImageBundle:
        type: string
      key:
        type: string
      name:
        type: string
      note:
        type: string
      updatedDateInLongFormat:
        format: int64
        type: integer
      uploadedBy:
        type: string
    required:
      - key
      - name
      - isCertifiedImageBundle
      - imageIds
      - images
      - appliedContainersCount
      - appliedDevicesCount
      - note
      - uploadedBy
      - updatedDateInLongFormat
  getImagesData:
    properties:
      factoryId:
        type: integer
      id:
        type: integer
      imageFile:
        type: string
      imageFileName:
        type: string
      imageId:
        type: string
      imageSize:
        type: string
      isHotFix:
        type: string
      isRebootRequired:
        type: string
      key:
        type: string
      md5:
        type: string
      name:
        type: string
      sha512:
        type: string
      swiMaxHwepoch:
        type: string
      swiVarient:
        type: string
      uploadedDateinLongFormat:
        format: int64
        type: integer
      user:
        type: string
      version:
        type: string
    required:
      - key
      - name
      - imageId
      - imageFileName
      - imageSize
      - user
      - uploadedDateinLongFormat
      - isHotFix
      - md5
      - version
      - isRebootRequired
      - swiVarient
      - swiMaxHwepoch
      - sha512
      - imageFile
      - factoryId
      - id
  getLabelsResponse:
    properties:
      labels:
        items:
          $ref: '#/definitions/addLabelResponse'
        type: array
      total:
        type: integer
  getMapperElementsModel:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
    required:
      - type
      - name
      - id
  getTempConfigsByContainerIdModel:
    properties:
      assignedConfigletBuilders:
        items:
          type: string
        type: array
      assignedConfiglets:
        items:
          type: string
        type: array
      existingConfigletBuilders:
        items:
          type: string
        type: array
      existingConfiglets:
        items:
          type: string
        type: array
      ignoredConfigletBuilders:
        items:
          type: string
        type: array
      ignoredConfiglets:
        items:
          type: string
        type: array
      proposedConfiglets:
        items:
          $ref: '#/definitions/~1configlet'
        type: array
      tempConfigletObjectIdMapper:
        type: string
    required:
      - assignedConfiglets
      - ignoredConfiglets
      - existingConfiglets
      - assignedConfigletBuilders
      - ignoredConfigletBuilders
      - existingConfigletBuilders
      - proposedConfiglets
      - tempConfigletObjectIdMapper
  getTempConfigsByNetelementIdModel:
    properties:
      assignedConfigletBuilders:
        items:
          type: string
        type: array
      assignedConfiglets:
        items:
          type: string
        type: array
      deviceConfigletBuilders:
        items:
          type: string
        type: array
      deviceConfiglets:
        items:
          type: string
        type: array
      existingConfigletBuilders:
        items:
          type: string
        type: array
      existingConfiglets:
        items:
          type: string
        type: array
      ignoredConfigletBuilders:
        items:
          type: string
        type: array
      ignoredConfiglets:
        items:
          type: string
        type: array
      proposedConfiglets:
        items:
          $ref: '#/definitions/~1configlet'
        type: array
    required:
      - assignedConfiglets
      - ignoredConfiglets
      - existingConfiglets
      - deviceConfiglets
      - assignedConfigletBuilders
      - ignoredConfigletBuilders
      - existingConfigletBuilders
      - deviceConfigletBuilders
      - proposedConfiglets
  image:
    properties:
      imageSize:
        type: string
      isRebootRequired:
        type: string
      md5:
        type: string
      name:
        type: string
      sha512:
        type: string
      swiMaxHwepoch:
        type: string
      swiVarient:
        type: string
      version:
        type: string
    required:
      - name
      - imageSize
      - sha512
      - md5
      - version
      - isRebootRequired
      - swiMaxHwepoch
      - swiVarient
  imageBundleMapperContent:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
    required:
      - name
      - id
      - type
  imageBundleMapperField:
    properties:
      imageBundle_id:
        $ref: '#/definitions/imageBundleMapperContent'
    required:
      - imageBundle_id
  imageData:
    properties:
      appliedContainersCount:
        type: integer
      appliedDevicesCount:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      imageFile:
        type: string
      imageFileName:
        type: string
      imageId:
        type: string
      imageSize:
        type: string
      isHotFix:
        type: string
      isRebootRequired:
        type: string
      key:
        type: string
      md5:
        type: string
      name:
        type: string
      sha512:
        type: string
      swiMaxHwepoch:
        type: string
      swiVarient:
        type: string
      uploadedDateinLongFormat:
        format: int64
        type: integer
      user:
        type: string
      version:
        type: string
    required:
      - key
      - name
      - imageId
      - imageFileName
      - imageSize
      - user
      - uploadedDateinLongFormat
      - appliedContainersCount
      - appliedDevicesCount
      - isHotFix
      - md5
      - version
      - isRebootRequired
      - swiVarient
      - swiMaxHwepoch
      - sha512
      - imageFile
      - factoryId
      - id
  imageSaveActionData:
    properties:
      appliedContainersCount:
        format: int32
        type: integer
      appliedDevicesCount:
        format: int32
        type: integer
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/imageData'
        type: array
      isCertifiedImage:
        type: string
      name:
        type: string
      updatedTimeInLongFormat:
        format: int64
        type: integer
      uploadedBy:
        type: string
    required:
      - id
      - name
      - images
      - appliedContainersCount
      - appliedDevicesCount
      - uploadedBy
      - updatedTimeInLongFormat
  imagesBundleData:
    properties:
      appliedContainersCount:
        type: integer
      appliedDevicesCount:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      imageIds:
        items:
          type: string
        type: array
      isCertifiedImageBundle:
        type: string
      key:
        type: string
      name:
        type: string
      note:
        type: string
      updatedDateinLongFormat:
        format: int64
        type: integer
      user:
        type: string
    required:
      - key
      - name
      - isCertifiedImageBundle
      - note
      - user
      - updatedDateinLongFormat
      - appliedContainersCount
      - appliedDevicesCount
      - imageIds
      - factoryId
      - id
  ipConnectivity:
    properties:
      ipAddress:
        type: string
    required:
      - ipAddress
  labelData:
    properties:
      data:
        items:
          type: string
        type: array
    required:
      - data
  labelInfoResponse:
    properties:
      dateTimeInLongFormat:
        type: integer
      factoryId:
        type: integer
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      netElementCount:
        type: integer
      note:
        type: string
      type:
        type: string
      user:
        type: string
  lastRetrivedAudit:
    properties:
      activity:
        type: string
      category:
        type: string
      dateTimeInLongFormat:
        format: int64
        type: integer
      objectKey:
        type: string
      subObjectKey:
        type: string
      subObjectName:
        type: string
      userName:
        type: string
    required:
      - activity
      - category
      - dateTimeInLongFormat
      - objectKey
      - subObjectKey
      - subObjectName
      - userName
  notes:
    properties:
      name:
        type: string
      note:
        type: string
    required:
      - name
      - note
  notesWorkFlow:
    properties:
      note:
        type: string
      workOrderId:
        type: string
    required:
      - workOrderId
      - note
  provisionDeviceModel:
    properties:
      deviceId:
        type: string
    required:
      - deviceId
  provisionedDeviceRespModel:
    description: List of deviceIds which couldn't be provisioned
    properties:
      failed:
        additionalProperties:
          type: string
    example:
      failed:
        <deviceID 1>: failure reason
        <deviceID 2>: failure reason
  role/getAppliedUsersList:
    properties:
      data:
        items:
          $ref: '#/definitions/~1role~1userAssignment'
        type: array
      total:
        type: integer
    required:
      - total
      - data
  saveUpdateImages:
    properties:
      images:
        items:
          $ref: '#/definitions/image'
        type: array
      isCertifiedImage:
        type: string
      name:
        type: string
    required:
      - isCertifiedImage
      - images
      - name
  searchtopologyjson:
    properties:
      containerList:
        items:
          $ref: '#/definitions/containerjson'
        type: array
      keywordList:
        items:
          type: string
        type: array
        uniqueItems: true
      netElementContainerList:
        items:
          $ref: '#/definitions/~1netelementContainerListjson'
        type: array
      netElementList:
        items:
          $ref: '#/definitions/~1netElement'
        type: array
      total:
        type: integer
    type: object
  taskid:
    properties:
      data:
        items:
          type: string
        type: array
    required:
      - data
  tempProposedActionModel:
    properties:
      info:
        type: string
      action:
        type: string
      configCompareCount:
        $ref: '#/definitions/~1configCompareCount'
      fromId:
        type: string
      fromName:
        type: string
      infoPreview:
        type: string
      nodeId:
        type: string
      nodeName:
        type: string
      nodeType:
        type: string
      toId:
        type: string
      toIdType:
        type: string
      toName:
        type: string
  updateImage:
    properties:
      deletedExtensions:
        items:
          $ref: '#/definitions/deletedExtensions'
        type: array
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/image'
        type: array
      isCertifiedImage:
        type: string
      name:
        type: string
    required:
      - isCertifiedImage
      - deletedExtensions
      - images
      - name
      - id
  updateReconcile:
    properties:
      config:
        type: string
      key:
        type: string
      name:
        type: string
      reconciled:
        type: boolean
      unCheckedLines:
        type: string
    required:
      - name
      - config
      - reconciled
  updateReconcileConfigletModel:
    properties:
      data:
        $ref: '#/definitions/~1configlet'
    required:
      - data
  v2/errors:
    properties:
      configletId:
        type: string
      configletLineNo:
        type: integer
      error:
        type: string
  v2/validateandcomparejson:
    properties:
      designedConfig:
        items:
          $ref: '#/definitions/configItemModel'
        type: array
      errors:
        items:
          $ref: '#/definitions/v2~1errors'
        type: array
      isReconcileInvoked:
        type: boolean
      mismatch:
        format: int32
        type: integer
      new:
        format: int32
        type: integer
      reconcile:
        format: int32
        type: integer
      reconciledConfig:
        $ref: '#/definitions/~1configlet'
      runningConfig:
        items:
          $ref: '#/definitions/configItemModel'
        type: array
      total:
        format: int32
        type: integer
      warnings:
        items:
          type: string
        type: array
    required:
      - reconciledConfig
      - reconcile
      - new
      - designedConfig
      - total
      - runningConfig
      - isReconcileInvoked
      - mismatch
      - warnings
      - errors
  validateAndCompareConfiglets:
    properties:
      configIdList:
        items:
          type: string
        type: array
      netElementId:
        type: string
      pageType:
        type: string
    required:
      - netElementId
      - configIdList
  validateConfig:
    properties:
      config:
        type: string
      netElementId:
        type: string
    required:
      - netElementId
      - config
  validateconfigletBuilderScript:
    properties:
      data:
        type: string
    required:
      - data
info:
  description: |
    REST APIs for CloudVision Cluster Management and Network Provisioning.

    ## Migration to Resource APIs

    CloudVision is migrating to state-based APIs supporting read, write, and subscribe operations for all cluster management, network provisioning, and network telemetry information. These APIs are exposed over gRPC and websocket endpoints, as well as as REST endpoints over HTTPS.

    APIs with Resource API alternatives available are called out below.

    ## API Deprecation Process

    CloudVision's APIs are versioned and supported across release trains.

    APIs are marked as deprecated at least one major release train prior to removal, with instructions on the alternative API to use. Deprecated APIs are explicitely called out below.
  title: CloudVision REST APIs
  version: 2021.3.0
paths:
  /aaa/createServer.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: JSON holds server settings details
          in: body
          name: ServerSettings
          required: true
          schema:
            $ref: '#/definitions/~1aaa~1AAAServerSettings'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1createServerErrorCode'
      tags:
        - aaa
      description: This is a proxy service that create server settings for a server type.
      operationId: createServer.do
      summary: Create server settings for a server type.
  /aaa/deleteServer.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'JSON holds server settings id list which needs to be deleted. Example : [ "Id1", "Id2", ...]'
          in: body
          name: Server
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1deleteServerErrorCode'
      tags:
        - aaa
      description: This is a proxy service that deletes server settings.
      operationId: deleteServer.do
      summary: Delete server settings.
  /aaa/editServer.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: JSON holds modified server settings details
          in: body
          name: ServerSettings
          required: true
          schema:
            $ref: '#/definitions/~1aaa~1AAAServerSettingsForEdit'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1editServerErrorCode'
      tags:
        - aaa
      description: This is a proxy service that updates server settings for a server type.
      operationId: editServer.do
      summary: Edit server settings for a server type.
  /aaa/getAAADetailsById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The phrase that is to be searched on the AAADetails id
          in: query
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1AAADetails'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1getAAADetailsByIdErrorCode'
      tags:
        - aaa
      description: This is a proxy service that returns AAADetails based on it's id.
      operationId: getAAADetailsById.do
      summary: To get AAADetails by id.
  /aaa/getServerById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Holds the phrase that is the key for AAAServer entry
          in: query
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1aaaServers'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1getServerByIdErrorCode'
      tags:
        - aaa
      description: This is a proxy service that returns server details based on its id.
      operationId: getServerById.do
      summary: To get server details based on its id.
  /aaa/getServers.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Holds server type to for which servers will be fetched
          in: query
          name: serverType
          required: true
          type: string
        - description: Holds the phrase that is to be searched on the properties of each server settings data
          in: query
          name: queryParam
          required: false
          type: string
        - description: Holds the starting value of the results to be paginated.
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Holds the end value of the results to be paginated
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1servers'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1getServersErrorCode'
      tags:
        - aaa
      description: This is a proxy service that retrieves a list of servers for a server type.
      operationId: getServers.do
      summary: To get a list of servers for a server type.
  /aaa/saveAAADetails.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: JSON holds AAADetails such as authentication type and authorization type
          in: body
          name: AAADetails
          required: true
          schema:
            $ref: '#/definitions/~1aaa~1AAA'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1saveAAADetailsErrorCode'
      tags:
        - aaa
      description: This is a proxy service that saves AAADetails such as authentication type and authorization type.
      operationId: saveAAADetails.do
      summary: To save AAADetails such as authentication type and authorization type.
  /aaa/testServerConnectivity.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: JSON holds server settings and user information.
          in: body
          name: Server
          required: true
          schema:
            $ref: '#/definitions/~1aaa~1AAAServerAndUserForTest'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1aaa~1testServerConnectivityErrorCode'
      tags:
        - aaa
      description: This is a proxy service that tests the external server connectivity.
      operationId: testServerConnectivity.do
      summary: Tests the external server connectivity.
  /audit/exportLogs.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: startTime
          in: query
          name: startTime
          required: true
          type: string
        - description: endTime
          in: query
          name: endTime
          required: true
          type: string
        - description: category
          in: query
          name: category
          required: true
          type: string
        - description: objectKey
          in: query
          name: objectKey
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/AuditExportLogsError'
      tags:
        - audit
      description: This exports the audit logs in a csv file which is named as category_objectKey_timestamp.csv
      operationId: audit_exportLogs.do
      summary: To export audit logs
  /audit/getLogs.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'If query param value is empty, then all logs will be retrieved. LastRetrievedAudit field is optional. ''category'' field value may hold ''User'',''Inventory'', ''Configlet'', ''Image'' and other service names. Log message will be truncated if message content exceeds specific number of characters.'
          in: body
          name: Filter values to retrieve audit logs of an user
          required: true
          schema:
            $ref: '#/definitions/AuditGetLogsInput'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/AuditLogs'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/AuditGetLogsError'
      tags:
        - audit
      description: Fetches activity logs of a CVP user
      operationId: getLogs.do
      summary: This API is used to fetch audit logs
  /configlet/addConfiglet.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Configuration to add to database.Example: {"config": "sample config", "name": "test" }'
          in: body
          name: configlet
          required: true
          schema:
            $ref: '#/definitions/configletModel'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addConfigletJson1'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addConfigletErrorCode'
      tags:
        - configlet
      description: This API is used to add a configlet
      operationId: addConfiglet.do
      summary: This API is used to add a configlet
  /configlet/addConfigletBuilder.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Specifies whether draft or not
          format: string
          in: query
          name: isDraft
          required: true
          type: string
        - description: configlet builder to be added
          in: body
          name: configletBuilderAdd
          required: true
          schema:
            $ref: '#/definitions/configletBuilderAdd'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addConfigletJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addConfigletBuilderErrorCode'
      tags:
        - configlet
      description: This API is used to add a configlet builder
      operationId: addConfigletBuilder.do
      summary: This API is used to add a configlet builder
  /configlet/addConfigletsAndAssociatedMappers.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Configlet mappers to add to database
          in: body
          name: configletsAndAssociatedMappers
          required: true
          schema:
            $ref: '#/definitions/~1configlet~1addConfigletsAndAssociatedMappersRequest'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addNoteToConfigletJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addConfigletsAndAssociatedMappersErrorCode'
      tags:
        - configlet
      description: This API is used to add configlet and associate mappers
      operationId: addConfigletsAndAssociatedMappers.do
      summary: This API is used to add configlet and associate mappers
  /configlet/addNoteToConfiglet.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Note to be added to the database
          in: body
          name: configlet note
          required: true
          schema:
            $ref: '#/definitions/configNote'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addNoteToConfigletJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addNoteToConfigletErrorCode'
      tags:
        - configlet
      description: This API is used to add note to a configlet
      operationId: addNoteToConfiglet.do
      summary: This API is used to add note to a configlet
  /configlet/addTempConfigletBuilder.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Type of the configlet builder(form/mainScript)
          format: string
          in: query
          name: type
          required: false
          type: string
        - description: id of the configlet builder
          format: string
          in: query
          name: id
          required: false
          type: string
        - description: Temporary configlet builder to be added(Requires data either in formList or in mainScript field)
          in: body
          name: configletBuilder
          required: true
          schema:
            $ref: '#/definitions/configletBuilder'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addNoteToConfigletJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addTempConfigletBuilderErrorCode'
      tags:
        - configlet
      description: This API is used to add temporary configlet builder
      operationId: addTempConfigletBuilder.do
      summary: This API is used to add temporary configlet builder
  /configlet/addTempGeneratedConfiglet.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: |-
            It should contain configletId,action,netElementId
            and objectType
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/addTempGeneratedConfigletModel'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addTempGeneratedConfiglet'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addTempGeneratedConfigletErrorCode'
      tags:
        - configlet
      description: This API is used to add temp generated configlets
      operationId: addTempGeneratedConfiglet.do
      summary: This API is used to add temp generated configlets
  /configlet/autoConfigletGenerator.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: generating auto builder
          in: body
          name: autoConfigletGenerator
          required: true
          schema:
            $ref: '#/definitions/autoConfigletGeneratorData'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1autoConfigletGeneratorJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1autoConfigletGeneratorErrorCode'
      tags:
        - configlet
      description: This API is used to generate auto configlet builder
      operationId: autoConfigletGenerator.do
      summary: This API is used to generate auto configlet builder
  /configlet/cancelConfigletBuilder.do:
    delete:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The builder id
          format: string
          in: query
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addNoteToConfigletJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1cancelConfigletBuilderErrorCode'
      tags:
        - configlet
      description: This API is used to cancel the temporary configlet builder
      operationId: cancelConfigletBuilder.do
      summary: This API is used to cancel the temporary configlet builder
  /configlet/configletBuilderPreview.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Temporary configlet builder to be added
          in: body
          name: configletBuilderPreview
          required: true
          schema:
            $ref: '#/definitions/configletBuilderPreview'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1configletBuilderPreviewJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1configletBuilderPreviewErrorCode'
      tags:
        - configlet
      description: This API is used to generate configlet builder preview
      operationId: configletBuilderPreview.do
      summary: This API is used to generate configlet builder preview
  /configlet/deleteConfiglet.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Input must always be an Array of object specified in Model Schema. Example: [{"key": "configlet_id", "name": "configlet_name" }]'
          in: body
          name: deleteConfiglet
          required: true
          schema:
            $ref: '#/definitions/deleteConfiglet'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addNoteToConfigletJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1deleteConfigletErrorCode'
      tags:
        - configlet
      description: This API is used to delete a configlet
      operationId: deleteConfiglet.do
      summary: This API is used to delete a configlet
  /configlet/exportConfiglets.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'ArrayList of data to be exported (Configlet id''s, Configlet Builder Id''s etc.)'
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/exportConfigletsModel'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addNoteToConfigletJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1exportConfigletsErrorCode'
      tags:
        - configlet
      description: This API is used to export configlets to .zip file
      operationId: exportConfiglets.do
      summary: This API is used to export configlets
  /configlet/getAppliedContainers.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Name of the configlet
          format: string
          in: query
          name: configletName
          required: true
          type: string
        - description: Search String
          format: string
          in: query
          name: queryparam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination.If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getAppliedContainersJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getAppliedContainersErrorCode'
      tags:
        - configlet
      description: This API is used to get the list of containers for which a given configlet has been assigned
      operationId: getAppliedContainers.do
      summary: This API is used to get a list of containers for which a given configlet has been assigned
  /configlet/getAppliedDeviceCount.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Configlet Id
          in: query
          name: configletId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getAppliedDevicesCountJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getAppliedDeviceCountErrorCode'
      tags:
        - configlet
      description: This API is used to get a list of devices on which a configlet has been applied
      operationId: configlet_getAppliedDeviceCount.do
      summary: This API is used to get a list of devices on which a configlet has been applied
  /configlet/getAppliedDevices.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: name of the configlet
          format: string
          in: query
          name: configletName
          required: true
          type: string
        - description: Search String
          format: string
          in: query
          name: queryparam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination.If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getAppliedDevicesJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getAppliedDevicesErrorCode'
      tags:
        - configlet
      description: This API is used to get a list of devices for which a given configlet has been assigned
      operationId: configlet_getAppliedDevices.do
      summary: This API is used to get a list of devices for which a given configlet has been assigned
  /configlet/getConfigletBuilder.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The builder id to be fetched
          format: string
          in: query
          name: id
          required: true
          type: string
        - description: 'The builder type to be fetched - form, mainScript'
          format: string
          in: query
          name: type
          required: false
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletBuilderJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletBuilderErrorCode'
      tags:
        - configlet
      description: This API is used to get the configlet builder
      operationId: getConfigletBuilder.do
      summary: This API is used to get the configlet builder
  /configlet/getConfigletById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Configlet Id
          format: string
          in: query
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletByIdJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletByIdErrorCode'
      tags:
        - configlet
      description: This API is used to get configlet by id
      operationId: getConfigletById.do
      summary: This API is used to get configlet by id
  /configlet/getConfigletByName.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Configlet name
          format: string
          in: query
          name: name
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletByIdJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletByNameErrorCode'
      tags:
        - configlet
      description: 'This API is used to get configlet by it''s name. '
      operationId: getConfigletByName.do
      summary: This API is used to get configlet by it's name
  /configlet/getConfigletHistory.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Configlet Id
          format: string
          in: query
          name: configletId
          required: true
          type: string
        - description: Search String
          format: string
          in: query
          name: queryparam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletHistoryJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletHistoryJsonErrorCode'
      tags:
        - configlet
      description: This API is used to get the configlet history
      operationId: getConfigletHistory.do
      summary: This API is used to get the configlet history
  /configlet/getConfiglets.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Object type - 'netelement' or 'container'
          format: string
          in: query
          name: objectType
          type: string
        - description: Object id - netElementId or containerId
          format: string
          in: query
          name: objectId
          type: string
        - description: 'Type of configlet to return. Following types are allowed :-<br><ul><li>Configlet - Returns static and generated configlets</li><li>Builder - Returns builder as well as draft configlets</li><li>Draft - Returns draft configlets</li><li>BuilderWithoutDraft - Returns only builder configlets</li><li>IgnoreDraft - Returns everything other than draft configlets</li><li>Static - Returns static configlets </li><li>Generated - Returns generated configlets</li></ul>Multiple values separated by comma can be given to type parameter (eg. static,generated will fetch both the types). '
          format: string
          in: query
          name: type
          type: string
        - description: Start index for pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: 'End index for the pagination. If 0, then all records will be returned'
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: 'Sort based on the column .Sortable Columns are name,containerCount,netElementCount,note,type,user,dateTimeInLongFormat'
          format: string
          in: query
          name: sortByColumn
          type: string
        - description: Sort Order - Ascending or Descending
          format: string
          in: query
          name: sortOrder
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletsJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletsErrorCode'
      tags:
        - configlet
      description: 'This API is used to get the Configlets. Parameters - ''type'', ''objectType'' and ''objectId'' are case sensitive'
      operationId: getConfiglets.do
      summary: This API is used to get the Configlets
  /configlet/getConfigletsAndAssociatedMappers.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1addConfigletsAndAssociatedMappersJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletsAndAssociatedMappersErrorCode'
      tags:
        - configlet
      description: This API is used to get configlets and their associated mappers
      operationId: getConfigletsAndAssociatedMappers.do
      summary: This API is used to get configlets and their associated mappers
  /configlet/getCurrentManagementIp.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Proposed config from which the Current Management IP has to be retrieved
          in: body
          name: Proposed Config
          required: true
          schema:
            $ref: '#/definitions/designedConfig2'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getCurrentManagementIp'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getCurrentManagementIpErrorCode'
      tags:
        - configlet
      description: This API is used to get the Current Management IP from Proposed config
      operationId: getCurrentManagementIp.do
      summary: This API is used to get current management IP from proposed config
  /configlet/getHierarchicalBuilderCount.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Container id to get hierarchial builder count
          format: string
          in: query
          name: containerId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getHierarchicalBuilderCountJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getHierarchicalBuilderCountErrorCode'
      tags:
        - configlet
      description: This API is used to get the hierarchical configlet builder count
      operationId: getHierarchicalBuilderCount.do
      summary: This API is used to get the hierarchical configlet builder count
  /configlet/getHierarchicalConfigletBuilders.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The container id to get hierarchial configlet builders
          format: string
          in: query
          name: containerId
          required: true
          type: string
        - description: The query text
          format: string
          in: query
          name: queryParam
          type: string
        - description: The startIndex to be fetched
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: The endIndex to be fetched
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getHierarchicalBuilderJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getHierarchicalConfigletBuildersErrorCode'
      tags:
        - configlet
      description: This API is used to get hierarchical configlet builders
      operationId: getHierarchicalConfigletBuilders.do
      summary: This API is used to get hierarchical configlet builders
  /configlet/getManagementIp.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Search String
          format: string
          in: query
          name: queryparam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination.If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: Designed config from which the list of management IPs has to be retrieved
          in: body
          name: Designed Config
          required: true
          schema:
            $ref: '#/definitions/designedConfig'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getManagementIpJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getManagementIpErrorCode'
      tags:
        - configlet
      description: This API is used to get a list of management IPs from Designed config
      operationId: getManagementIp.do
      summary: This API is used to get a list of management IPs from Designed config
  /configlet/importConfiglets.do:
    post:
      consumes:
        - multipart/form-data
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: zip file to upload
          in: formData
          name: file
          required: true
          type: file
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1configletEventJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1importConfigletsErrorCode'
      tags:
        - configlet
      description: This API is used to import the configlets
      operationId: importConfiglets.do
      summary: This API is used to import the configlets
  /configlet/searchConfiglets.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Object type - netelement or container
          format: string
          in: query
          name: objectType
          type: string
        - description: Object id - netElementId or containerId
          format: string
          in: query
          name: objectId
          type: string
        - description: 'Type of configlet to return. Following types are allowed :-<br><ul><li>Configlet - Returns static and generated configlets</li><li>Builder - Returns builder as well as draft configlets</li><li>Draft - Returns draft configlets</li><li>BuilderWithoutDraft - Returns only builder configlets</li><li>IgnoreDraft - Returns everything other than draft configlets</li><li>Static - Returns static configlets </li><li>Generated - Returns generated configlets</li></ul>Multiple values separated by comma can be given to type parameter (eg. static,generated will fetch both the types). '
          format: string
          in: query
          name: type
          required: false
          type: string
        - description: Search String
          format: string
          in: query
          name: queryparam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination.If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: 'Sort based on the column .Sortable Columns are name,containerCount,netElementCount,note,type,user,dateTimeInLongFormat'
          format: string
          in: query
          name: sortByColumn
          type: string
        - description: Sort Order - Ascending or Descending
          format: string
          in: query
          name: sortOrder
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1getConfigletsJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1searchConfigletsErrorCode'
      tags:
        - configlet
      description: This API is used to get a list of configlets based on a search string
      operationId: searchConfiglets.do
      summary: This API is used to get configlets based on a search string
  /configlet/updateConfiglet.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Configuration to add to database
          in: body
          name: config
          required: true
          schema:
            $ref: '#/definitions/configUpdate'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1updateConfigletJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1updateConfigletErrorCode'
      tags:
        - configlet
      description: This API is used to update a configlet
      operationId: updateConfiglet.do
      summary: This API is used to update a configlet
  /configlet/updateConfigletBuilder.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Specifies whether draft or not
          format: string
          in: query
          name: isDraft
          required: true
          type: string
        - description: id of the builder to be updated
          format: string
          in: query
          name: id
          required: true
          type: string
        - default: save
          description: action should be save or saveas
          format: string
          in: query
          name: action
          required: false
          type: string
        - description: configlet builder to be updated
          in: body
          name: configletBuilderUpdate
          required: true
          schema:
            $ref: '#/definitions/configletBuilderAdd'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1configletEventJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1updateConfigletBuilderErrorCode'
      tags:
        - configlet
      description: This API is used to update configlet builder
      operationId: updateConfigletBuilder.do
      summary: This API is used to update configlet builder
  /configlet/validateConfig.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: validate configuration
          in: body
          name: validate
          required: true
          schema:
            $ref: '#/definitions/validateConfig'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1validateConfigJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1validateConfigErrorCode'
      tags:
        - configlet
      description: This API is used to validate a configlet
      operationId: validateConfig.do
      summary: This API is used to validate configlet
  /configlet/validateConfigHistory.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: holds history id
          in: query
          name: historyId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1validateConfigHistoryJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1validateConfigHistoryErrorCode'
      tags:
        - configlet
      description: This API is used to validate a configlet history
      operationId: validateConfigHistory.do
      summary: This API is used to validate a configlet history
  /configlet/validateScript.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Script to be validated
          in: body
          name: data
          required: true
          schema:
            $ref: '#/definitions/validateconfigletBuilderScript'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1validateScriptJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1configlet~1validateScriptErrorCode'
      tags:
        - configlet
      description: This API is used to validate  the configlet builder script
      operationId: validateScript.do
      summary: This API is used to validate  the configlet builder script
  /cvpInfo/getCvpInfo.do:
    get:
      produces:
        - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/CvpInfo'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Error processing request
          schema:
            $ref: '#/definitions/GetCvpInfoError'
      tags:
        - cvpInfo
      operationId: getCvpInfo.do
      summary: This api call is used to get CVP Information.
  /event/cancelEvent.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique 'parent event id' of an event to be cancelled
          format: String
          in: query
          name: eventId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1sucessStringResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1cancelEventErrorCode'
      tags:
        - event
      deprecated: true
      description: |-
        Cancels the selected event.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. It is only meant for internal use by various provisioning UIs and will be removed in a future release.
      operationId: cancelEvent.do
      summary: This API is used to cancel an event
  /event/getAllEvents.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Starting index of pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Ending index of pagination. If end index is 0 then all records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: 'If true then all events will be retrieved else, other events except completed & cancelled events will be retrieved'
          format: String
          in: query
          name: isCompletedRequired
          required: true
          type: boolean
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getAllEventsSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getAllEventsErrorCode'
      tags:
        - event
      deprecated: true
      description: |-
        Fetches all events from CVP.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. It is only meant for internal use by various provisioning UIs and will be removed in a future release.
      operationId: getAllEvents.do
      summary: This API is used to get all the events
  /event/getErrorEvents.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'The query parameter. If it is empty, then all error events will be returned'
          format: String
          in: query
          name: queryparam
          type: string
        - description: Unique id of a parent event
          format: String
          in: query
          name: eventId
          required: true
          type: string
        - description: 'Type of the event. For eg : ''compliancecheck'', ''containerreconcile''. eventTypes like ''backup_restore'' will return empty data since those Events donot contain error events'
          format: String
          in: query
          name: eventType
          required: true
          type: string
        - description: Starting index of pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Ending index of pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getErrorEventsSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getErrorEventsErrorCode'
      tags:
        - event
      deprecated: true
      description: |-
        Fetches all error events associated with a parent event.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. It is only meant for internal use by various provisioning UIs and will be removed in a future release.
      operationId: getErrorEvents.do
      summary: This API is used to get all error events associated with a parent event
  /event/getEventById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique id of child or parent event
          format: string
          in: query
          name: eventId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getEventByIdSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getEventByIdErrorCode'
      tags:
        - event
      deprecated: true
      description: |-
        Fetches the event associated with the event id.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. It is only meant for internal use by various provisioning UIs and will be removed in a future release.
      operationId: getEventById.do
      summary: This API is used to get the event data by it's event id
  /event/getEventDataById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique id of the parent event
          format: string
          in: query
          name: eventId
          required: true
          type: string
        - description: 'The query parameter. If this value is empty, then all child events will be returned'
          format: string
          in: query
          name: queryparam
          required: false
          type: string
        - description: Starting index of pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Ending index of pagination.If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getEventDataByIdSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getEventDataByIdErrorCode'
      tags:
        - event
      deprecated: true
      description: |-
        Fetches all child event data of a parent event.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. It is only meant for internal use by various provisioning UIs and will be removed in a future release.
      operationId: getEventDataById.do
      summary: This API is used to get child events of a parent event
  /event/getEventInfo.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'The query parameter. If it is empty, then all events will be returned'
          format: String
          in: query
          name: queryparam
          type: string
        - description: 'Status of the event. For eg : ''mismatch'', ''errors'', ''completed'', ''pending'''
          format: String
          in: query
          name: requiredEventStatus
          required: true
          type: string
        - description: Unique id of a parent event
          format: String
          in: query
          name: eventId
          required: true
          type: string
        - description: 'Type of the event. For eg : ''compliancecheck'', ''containerreconcile'', ''backup_restore'''
          format: String
          in: query
          name: eventType
          required: true
          type: string
        - description: Starting index of pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Ending index of pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getEventInfoSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1getEventInfoErrorCode'
      tags:
        - event
      deprecated: true
      description: |-
        Fetches all events based on the status.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. It is only meant for internal use by various provisioning UIs and will be removed in a future release.
      operationId: getEventInfo.do
      summary: This API is used to get all event data associated with a parent eventId
  /event/markAsRead.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1sucessStringResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1event~1markAsReadErrorCode'
      tags:
        - event
      deprecated: true
      description: |-
        Clears notification count.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. It is only meant for internal use by various provisioning UIs and will be removed in a future release.
      operationId: markAsRead.do
      summary: This API is used to clear notifications count after a user has viewed the notifications
  /image/addImage.do:
    post:
      consumes:
        - multipart/form-data
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: File to upload.
          in: formData
          name: file
          required: true
          type: file
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1addImageSucessResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1addImageErrorCodes'
      tags:
        - image
      description: Adds the uploaded image file to data store.
      operationId: addImage.do
      summary: This api is used to add/upload an image into CVP.
  /image/addNotesToImageBundle.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The image json to add notes to the image bundle in database.
          in: body
          name: imageBundleJson
          required: true
          schema:
            $ref: '#/definitions/notes'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1saveImageBundleResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1addNotesToImageBundleErrorCodes'
      tags:
        - image
      description: Adds notes to the image bundle available in CVP.
      operationId: addNotesToImageBundle.do
      summary: This api is used to add notes to the image bundle.
  /image/cancelImages.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The image json to cancel from data store.
          in: body
          name: imageId
          required: true
          schema:
            $ref: '#/definitions/cancelImages'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1saveImageBundleResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1cancelImagesErrorCodes'
      tags:
        - image
      description: It calls the Image management service to discard/cancel the uploaded image/image bundle before save.
      operationId: cancelImages.do
      summary: This api is used to cancel the uploaded image file or image bundle.
  /image/deleteImageBundles.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The image json to delete from the database
          in: body
          name: deleteImageJson
          required: true
          schema:
            $ref: '#/definitions/deleteImg'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1saveImageBundleResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1deleteImageBundlesErrorCodes'
      tags:
        - image
      description: Deletes the already uploaded image bundle from data store.
      operationId: deleteImageBundles.do
      summary: This api is used to delete the uploaded image bundle from CVP.
  /image/getAppliedDeviceCount.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: It holds the ImageBundleId.
          format: String
          in: query
          name: imageBundleId
          required: true
          type: string
        - description: 'It holds the updated list of imageIds to be saved. InputFormat: imageId1,imageId2,imageId3,...'
          format: String
          in: query
          name: imageIdList
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1getAppliedDeviceJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1getAppliedDeviceCountErrorCodes'
      tags:
        - image
      description: Gets the count of devices to which the image bundle is applied.
      operationId: image_getAppliedDeviceCount.do
      summary: This api is used to get a applied device count for an image bundle.
  /image/getImageBundleAppliedContainers.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The image bundle name.
          format: String
          in: query
          name: imageName
          required: true
          type: string
        - description: Start index for the pagination.
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned.
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: The query parameter
          format: String
          in: query
          name: queryparam
          required: false
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1getImageBundleAppliedDevicesResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1getImageBundleAppliedContainersErrorCodes'
      tags:
        - image
      description: Returns the container details to which the image bundle is applied.
      operationId: getImageBundleAppliedContainers.do
      summary: This api is used to fetch the containers to which the image bundle is applied.
  /image/getImageBundleAppliedDevices.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The image bundle name.
          format: String
          in: query
          name: imageName
          required: true
          type: string
        - description: Start index for the pagination.
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned.
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: The query parameter.
          format: String
          in: query
          name: queryparam
          required: false
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1getImageBundleAppliedDevicesResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1getImageBundleAppliedDevicesErrorCodes'
      tags:
        - image
      description: Returns the netelement details to which the image bundle is applied.
      operationId: getImageBundleAppliedDevices.do
      summary: This api is used to fetch the devices to which the image bundle is applied.
  /image/getImageBundleByName.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The image bundle name.
          format: String
          in: query
          name: name
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1getImageBundleByNameResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1getImageBundleByNameErrorCodes'
      tags:
        - image
      description: Returns the image bundle available in CVP for the specified image bundle name.
      operationId: getImageBundleByName.do
      summary: This api is used to get the image bundle by name.
  /image/getImageBundles.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The netelement id/container id used to fetch associated image bundle.
          format: String
          in: query
          name: objectId
          required: false
          type: string
        - description: It can be netelement or container. Used to fetch the image bundle associated to the netelement or container.
          format: String
          in: query
          name: objectType
          required: false
          type: string
        - description: The query parameter for search.
          format: String
          in: query
          name: queryparam
          required: false
          type: string
        - description: Start index for the pagination.
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned.
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1getImageBundlesResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1getImageBundlesErrorCodes'
      tags:
        - image
      description: Returns all the image bundles available in CVP.
      operationId: getImageBundles.do
      summary: This api is used to get all the image bundles.
  /image/getImages.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The query parameter for search.
          format: String
          in: query
          name: queryparam
          required: false
          type: string
        - description: Start index for the pagination.
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned.
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1getImageResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1getImagesErrorCodes'
      tags:
        - image
      description: Returns all the images uploaded to and available in CVP.
      operationId: getImages.do
      summary: This api is used to get all the images.
  /image/saveImageBundle.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The image json to add to database.
          in: body
          name: imageJson
          required: true
          schema:
            $ref: '#/definitions/saveUpdateImages'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1saveImageBundleResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1saveImageBundleErrorCodes'
      tags:
        - image
      description: It adds an image bundle containing image and extensions.
      operationId: saveImageBundle.do
      summary: This api is used to save an image bundle into CVP.
  /image/updateImageBundle.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The image json to update to the data store.
          in: body
          name: updateImageJson
          required: true
          schema:
            $ref: '#/definitions/updateImage'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1saveImageBundleResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1updateImageBundleErrorCodes'
      tags:
        - image
      description: It updates the already available image bundle containing image and extensions.
      operationId: updateImageBundle.do
      summary: This api is used to update the image bundle available in CVP.
  /image/v2/getImageBundleByName.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The image bundle name.
          format: String
          in: query
          name: name
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1v2~1getImageBundleByNameResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1getImageBundleByNameErrorCodes'
      tags:
        - image
      description: Returns the image bundle available in CVP for the specified image bundle name.
      operationId: getImageBundleByNameV2.do
      summary: This api is used to get the image bundle by name.
  /image/v2/getImageBundles.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The netelement id/container id used to fetch associated image bundle.
          format: String
          in: query
          name: objectId
          required: false
          type: string
        - description: It can be netelement or container. Used to fetch the image bundle associated to the netelement or container.
          format: String
          in: query
          name: objectType
          required: false
          type: string
        - description: The query parameter for search.
          format: String
          in: query
          name: queryparam
          required: false
          type: string
        - description: Start index for the pagination.
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned.
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1images~1v2~1getImageBundlesResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1image~1getImageBundlesErrorCodes'
      tags:
        - image
      description: Returns all the image bundles available in CVP.
      operationId: getImageBundlesV2.do
      summary: This api is used to get all the image bundles.
  /inventory/containers:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Only containers with the given name are returned
          in: query
          name: name
          required: false
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/Container'
            type: array
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '500':
          description: Internal server error
          schema:
            type: string
      tags:
        - inventory
      description: 'If no query parameter is provided, a list of all the existing containers is returned. If ''name'' is provided, only containers with the given name are returned.'
      operationId: getContainers
      summary: To retrieve a list of all containers
  /inventory/device/config:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Id of the netelement for which configuration has to be fetched.
          format: String
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/InventoryDeviceConfiguration'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/GetInventoryDeviceConfigurationError'
      tags:
        - inventory
      description: Returns the configuration retrieved from a netelement.
      operationId: GetDeviceConfiguration
      summary: To retrieve the inventory configuration
  /inventory/devices:
    delete:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Contains the array of deviceIDs to be deleted. Eg. ["deviceID1","deviceID2"]'
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteDevicesReq'
      responses:
        '200':
          description: Key "failedDevices" contains IDs of devices which could not be deleted and the reason for failure. The key "result" contains "success" if all requested devices are deleted
          schema:
            $ref: '#/definitions/DeleteDevicesResp'
        '400':
          description: Bad Request
          schema:
            type: string
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
      tags:
        - inventory
      description: 'Deletes the devices from the inventory. In case of partial success, HTTP status code of 200 is returned and the response body contains the list of deviceIDs of the failed devices'
      operationId: deleteDevice
      summary: To delete devices from the inventory
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Only provisioned devices, devices that are mapped to a container and are visible in the network provisioning tab, are returned if set to true'
          in: query
          name: provisioned
          required: false
          type: boolean
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/Device'
            type: array
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '500':
          description: Internal server error
          schema:
            type: string
      tags:
        - inventory
      description: 'If no query parameter is provided, a list of all devices that are streaming data to CVP is returned. Only provisioned devices, devices that are mapped to a container and are visible in the network provisioning tab, are returned if the query parameter ''provisioning'' is set to ''true'''
      operationId: getDevices
      summary: To retrieve all devices in the inventory
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: IP addresses or host names of devices to be onboarded
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/OnboardDevicesReq'
      responses:
        '200':
          description: Key "failed" contains IP addresses or hostnames of the devices that could not be onboarded and the reasons for failure. Key "hostToDevIdMap" contains hostname to device ID mappings for devices that are successfully onboarded.
          schema:
            $ref: '#/definitions/OnboardDevicesResp'
        '400':
          description: Bad Request
          schema:
            type: string
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '500':
          description: Failed to onboard any of the provided devices
          schema:
            $ref: '#/definitions/OnboardDevicesResp'
      tags:
        - inventory
      description: 'Initializes onboarding for the provided devices. In case of partial success, HTTP status code of 200 is returned and the response body contains the list of hostnames or IP addresses of the failed devices'
      operationId: onboardDevice
      summary: To import devices in the inventory
  /label/addLabel.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'JSON holds Label Details such as name, note and type'
          in: body
          name: AddLabel
          required: true
          schema:
            $ref: '#/definitions/LabelDetails'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/addLabelResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1label~1addLabelErrorCode'
      tags:
        - label
      description: Returns the response message (Success/Failure)
      operationId: addLabel.do
      summary: To add the Label in Datastore
  /label/deleteLabel.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Contains the array of Label Ids to be deleted. Eg. ["labelId1","labelId2"]'
          in: body
          name: key
          required: true
          schema:
            $ref: '#/definitions/labelData'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/dataSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1label~1deleteLabelErrorCode'
      tags:
        - label
      description: Returns the response message (Success/Failure)
      operationId: deleteLabel.do
      summary: To delete the Label in Datastore
  /label/getAppliedDevices.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Holds the value for label id. Enter either Label Id or Label Name
          in: query
          name: labelId
          required: true
          type: string
        - description: Holds the phrase that is to be searched on the properties of Label
          in: query
          name: queryparam
          required: false
          type: string
        - description: Holds the starting value of the results to be paginated
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Holds the end value of the results to be paginated. End index value 0 returns all the records
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/appliedDeviceResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1label~1appliedDeviceErrorCode'
      tags:
        - label
      description: Returns the list of the retrieved logs for a label
      operationId: label_getAppliedDevices.do
      summary: To get the logs of a label
  /label/getLabelInfo.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Holds the id of the Label.
          in: query
          name: labelId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/labelInfoResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1label~1getLabelInfoErrorCode'
      tags:
        - label
      description: Returns the information about the label
      operationId: getLabelInfo.do
      summary: To get the label information by its Id
  /label/getLabels.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Holds the value for the type of module
          in: query
          name: module
          required: true
          type: string
        - description: Holds the value for the type of label
          in: query
          name: type
          required: true
          type: string
        - description: Holds the phrase that is to be searched on the properties of Label
          in: query
          name: queryparam
          required: false
          type: string
        - description: Holds the starting value of the results to be paginated
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Holds the end value of the results to be paginated. End index value 0 returns all the records
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/getLabelsResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1label~1getLabelErrorCode'
      tags:
        - label
      description: Returns the list of all the retrieved Labels from the datastore
      operationId: getLabels.do
      summary: To get all the labels from the Datastore
  /label/updateLabel.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'JSON holds Label Details such as label key, name, note and type'
          in: body
          name: UpdateLabel
          required: true
          schema:
            $ref: '#/definitions/LabelDetailsUpdate'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/dataSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1label~1updateLabelErrorCode'
      tags:
        - label
      description: Returns the response message (Success/Failure)
      operationId: updateLabel.do
      summary: To update the Label in Datastore
  /label/updateNotesToLabel.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: JSON holds Note to be updated along with a unique key that identifies the Label
          in: body
          name: UpdateNotesToLabel
          required: true
          schema:
            $ref: '#/definitions/UpdateNotesToLabel'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/dataSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1label~1updateNoteErrorCode'
      tags:
        - label
      description: Returns the response message (Success/Failure)
      operationId: updateNotesToLabel.do
      summary: To update the notes for a Label in the Datastore
  /login/authenticate.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: unique user id of the user
          in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/LoginUserAuthenticate'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/LoginAuthenticateResponse'
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/LoginAuthenticateError'
      tags:
        - login
      description: This method validates the login credentials and returns the session id along with the authorization details
      operationId: authenticate.do
      summary: Log into the CVP application
  /login/changePassword.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChangePasswordModel'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/LoginResponseSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/LoginChangePasswordError'
      tags:
        - login
      description: This method is used for changing the current user's password and contact information. It is used both for onboarding and for regular password and profile updates.
      operationId: changePassword.do
      summary: Change user's password and contact information
  /login/getCVPUserProfile.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: ID of user
          in: query
          name: userId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/CVPUserProfile'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/LoginGetUserProfileError'
      tags:
        - login
      description: This proxy service is used to get a user's profile from the CVP system.
      operationId: getCVPUserProfile.do
      summary: To get a user's CVP profile
  /login/getPermissions.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/LoginUserRoleDetails'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/LoginGetPermissionError'
      tags:
        - login
      description: This proxy service is used to get user role for a logged in user.
      operationId: getPermissions.do
      summary: To get user role
  /login/home.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/LoginResponseSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
      tags:
        - login
      deprecated: true
      description: |-
        This proxy service is used to validate the session.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. It is only meant for internal use by the UI and will be removed in a future release.
      operationId: home.do
      summary: To validate session
  /login/logout.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: No response was specified
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/LogoutError'
      tags:
        - login
      description: This method logs the user out from the current session and redirects back to login page
      operationId: logout.do
      summary: Log out from the current session
  /provisioning/addTempAction.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: This schema holds the data to be added in temp action
          in: body
          name: tempProposedAction
          required: true
          schema:
            $ref: '#/definitions/addTempAction'
        - description: Unique id of a node. eg.- ContainerId - root
          in: query
          name: nodeId
          required: true
          type: string
        - description: Query to be be searched. If the value is empty then returns all data
          in: query
          name: queryParam
          required: false
          type: string
        - description: Either 'topology' or 'list'
          in: query
          name: format
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1filterTopologyJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1addTempAction~1ErrorCodes'
      tags:
        - provisioning
      description: Creates temp proposed actions. List of actions can be added using array
      operationId: addTempAction.do
      summary: This API is used to add temporary proposed actions
  /provisioning/cancelReconcile.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Configlet ID for which the reconcile has to be reverted
          in: query
          name: configletId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1cancelReconcileErrorCode'
      tags:
        - provisioning
      description: Reverts the reconcile changes made.
      operationId: cancelReconcile.do
      summary: Reverts the reconcile changes made.
  /provisioning/checkCompliance.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: This schema holds the parameters to execute the checkCompliance call. Node type can be - 'netelement' or 'container'
          in: body
          name: checkCompliance
          required: true
          schema:
            $ref: '#/definitions/checkCompliance'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1netElement'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1checkComplianceErrorCode'
      tags:
        - provisioning
      deprecated: true
      description: |-
        This API is used to check the compliance.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.3 train.
      operationId: checkCompliance.do
      summary: This API is used to check the compliance
  /provisioning/containerLevelReconcile.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique id of a container
          in: query
          name: containerId
          required: true
          type: string
        - default: false
          description: Flag to reconcile both new and mismatch lines
          in: query
          name: reconcileAll
          required: false
          type: boolean
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1containerLevelReconcileErrorCode'
      tags:
        - provisioning
      description: Triggers reconcile in container level
      operationId: containerLevelReconcile.do
      summary: This API is used to trigger reconcile in container level
  /provisioning/deleteAllTempAction.do:
    delete:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1deleteAllTempAction~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1deleteAllTempAction~1ErrorCodes'
      tags:
        - provisioning
      description: Deletes all temporarily created actions
      operationId: provisioning_deleteAllTempAction.do
      summary: This API is used to delete all temp actions
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Empty POST Call
          in: body
          name: validate
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1deleteAllTempAction~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1deleteAllTempAction~1ErrorCodes'
      tags:
        - provisioning
      description: Deletes all temporarily created actions
      operationId: deleteAllTempAction.do
      summary: This API is used to delete all temp actions
  /provisioning/deleteTempAction.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Temp proposed action object to be deleted
          in: body
          name: tempProposedAction
          required: true
          schema:
            $ref: '#/definitions/~1tempActionInput'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1deleteTempAction~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1deleteTempAction~1ErrorCodes'
      tags:
        - provisioning
      description: Deletes given temp action data
      operationId: deleteTempAction.do
      summary: This API is used to delete a single temp action
  /provisioning/devices:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: DeviceIDs of devices to be provisioned
          name: deviceIDs
          in: body
          required: true
          schema:
            $ref: '#/definitions/ProvisionStreamingReq'
      responses:
        '200':
          description: 'Key "data" contains "success" if all devices are provisioned. Otherwise, it contains list of devices that could not be provisioned along with failure reason.'
          schema:
            $ref: '#/definitions/ProvisionStreamingResp'
        '400':
          description: Bad Request
          schema:
            type: string
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
      tags:
        - provisioning
      description: 'Enables provisioning for existing streaming devices. In case of partial success, HTTP status code of 200 is returned and the response body contains the list of failed devices'
      summary: This API is used to enable provisioning for an existing streaming device
      operationId: provisionStreamingDevices
  /provisioning/filterTopology.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The node id
          in: query
          name: nodeId
          required: false
          type: string
        - description: Text to be searched for
          in: query
          name: queryParam
          required: false
          type: string
        - description: The format of view - 'topology' or 'list'
          in: query
          name: format
          required: true
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1filterTopologyJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1filterTopology~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to retrieve ZTP topology data
      operationId: filterTopology.do
      summary: This API is used to retrieve ZTP topology data
  /provisioning/getAllTempActions.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Starting index for pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Ending index for pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getAllTempActions~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getAllTempActions~1ErrorCodes'
      tags:
        - provisioning
      description: Returns the list of temporarily created proposed actions
      operationId: getAllTempActions.do
      summary: This API is used to get all temporary actions
  /provisioning/getConfigletsByContainerId.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique id of a container
          in: query
          name: containerId
          required: true
          type: string
        - description: Query value to be searched. If the value is empty then returns all data
          in: query
          name: queryParam
          type: string
        - description: Starting index of pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Ending index of pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getConfigletsByContainerId~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getConfigletsByContainerId~1ErrorCodes'
      tags:
        - provisioning
      description: Fetches all configlets assigned to a container
      operationId: getConfigletsByContainerId.do
      summary: This API is used to get the configlet information associated with a container
  /provisioning/getConfigletsByNetElementId.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The device netelement id
          in: query
          name: netElementId
          required: true
          type: string
        - description: The query param
          in: query
          name: queryParam
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/getConfigletsByNetelementIdModel'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getConfigletsByNetElementId~1ErrorCodes'
      tags:
        - provisioning
      description: Returns the configlets data associated with the device
      operationId: getConfigletsByNetElementId.do
      summary: This API is used to get configlets data by netelement id
  /provisioning/getContainerInfoById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Container Id for which the information needs to be fetched.
          in: query
          name: containerId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/getContainerinfobyidjson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getContainerInfoById~1ErrorCodes'
      tags:
        - provisioning
      description: 'This API is used to get the container info for the given containerId. '
      operationId: topology.do
      summary: This API is used to get the container info for the given containerId.
  /provisioning/getImageBundleByContainerId.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The container id.
          in: query
          name: containerId
          required: true
          type: string
        - description: The session scope. Possible values 'true' or 'false'
          in: query
          name: sessionScope
          required: true
          type: string
        - description: The query param
          in: query
          name: queryParam
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/getImageBundleByAnyIdModel'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getImageBundleByContainerId~1ErrorCodes'
      tags:
        - provisioning
      description: Returns the image bundle assigned to a container
      operationId: getImageBundleByContainerId.do
      summary: This API is used to get the image bundle using container id.
  /provisioning/getImageBundleByNetElementId.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The netelement id.
          in: query
          name: netElementId
          required: true
          type: string
        - description: The session scope. Possible values 'true' or 'false'
          in: query
          name: sessionScope
          required: true
          type: string
        - description: The query param
          in: query
          name: queryParam
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/getImageBundleByAnyIdModel'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getImageBundleByNetElementId~1ErrorCodes'
      tags:
        - provisioning
      description: Returns the image bundle assigned to the device.
      operationId: getImageBundleByNetElementId.do
      summary: This API is used to get the image bundle using netelement id.
  /provisioning/getImageForTask.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The workorder id for the image task
          format: string
          in: query
          name: workorderid
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/imageSaveActionData'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getImageForTask~1ErrorCodes'
      tags:
        - provisioning
      description: Returns the image data for the given task.
      operationId: getImageForTask.do
      summary: This API is used to get the image data for the task.
  /provisioning/getLabelsByNetElementId.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'The search param '
          format: string
          in: query
          name: queryParam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: net element id
          format: string
          in: query
          name: netElementId
          required: true
          type: string
        - description: 'label type - ''custom'', ''system'' or ''all'''
          format: string
          in: query
          name: type
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getLabelsByNetElementId'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getLabelsByNetElementId~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to get the labels on a netElement from the data store.
      operationId: getLabelsByNetElementId.do
      summary: This API is used to get the labels on a netElement
  /provisioning/getNetElementById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The netelement id
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1netElement'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1getNetElementByIdErrorCode'
      tags:
        - provisioning
      description: Returns the netelement data for given id
      operationId: getNetElementById.do
      summary: This API is used to get the netelement data by id
  /provisioning/getNetElementImageById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: net element id
          format: string
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1dataSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getNetElementImageById~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to get the uploaded image information by netelement id for Topology in the CVP system.
      operationId: getNetElementImageById.do
      summary: This API is used to get the uploaded image information by netelement id
  /provisioning/getNetElementInfoById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique id of the netelement
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getNetElementInfoById~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getNetElementInfoById~1ErrorCodes'
      tags:
        - provisioning
      description: Retrieves netelement's information of the assicated netelement id
      operationId: getNetElementInfoById.do
      summary: This API is used to get the netelement information by its id
  /provisioning/getNetElementList.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: container Id
          format: string
          in: query
          name: nodeId
          required: true
          type: string
        - description: search param
          format: string
          in: query
          name: queryParam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: 'Context query param '
          format: string
          in: query
          name: contextQueryParam
          required: false
          type: string
        - description: Ignore Add - 'true' or 'false'
          format: string
          in: query
          name: ignoreAdd
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getNetElementList~1SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getNetElementList~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to get the netElement List by container in the CVP system.
      operationId: getNetElementList.do
      summary: This API is used to get the netElement List
  /provisioning/getProposedContainer.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique id of a netelement
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1getProposedContainer'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1getProposedContainerErrorCode'
      tags:
        - provisioning
      description: Fetches the proposed container of the given netelement
      operationId: getProposedContainer.do
      summary: This API is used to get the proposed container of a netelement
  /provisioning/getTempConfigsByContainerId.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The container id
          in: query
          name: containerId
          required: true
          type: string
        - description: The page type
          in: query
          name: pageType
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/getTempConfigsByContainerIdModel'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getTempConfigsByContainerId~1ErrorCodes'
      tags:
        - provisioning
      description: Returns the temp configs data using the container id.
      operationId: getTempConfigsByContainerId.do
      summary: This API is used to get the temp config data using the container id
  /provisioning/getTempConfigsByNetElementId.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The device netelement id.
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/getTempConfigsByNetelementIdModel'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getTempConfigsByNetElementId~1ErrorCodes'
      tags:
        - provisioning
      description: 'Returns the temp configs data using the device netelement id. '
      operationId: getTempConfigsByNetElementId.do
      summary: This API is used to get the temp configs data using the device netelement id.
  /provisioning/getTempLabelsByNetElementId.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: ' The netelement id'
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getTempLabelsByNetElementId'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getTempLabelsByNetElementId~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to get all temp labels by netelement id from the CVP system.
      operationId: getTempLabelsByNetElementId.do
      summary: This API is used to get all temp labels by netelement id
  /provisioning/getTempSessionReconciledConfiglets.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The device netelement id
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1getTempSessionReconciledConfiglets'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1getTempSessionReconciledConfigErrorCode'
      tags:
        - provisioning
      description: Returns a list of temp session reconcile configlets id
      operationId: getTempSessionReconciledConfiglets.do
      summary: This API is used to get the temp session reconcile configlets id list
  /provisioning/getconfigfortask.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Work Order Id for which the config to be fetched.
          in: query
          name: workorderid
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getConfigForTaskjson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getconfigfortask~1ErrorCodes'
      tags:
        - provisioning
      deprecated: true
      description: |-
        This API is used to get configlets for the specified task.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. Uses should be migrated to the /provisioning/v3/getconfigfortask API.
      operationId: getconfigfortask.do
      summary: This API is used to get configlets for the specified task.
  /provisioning/ipConnectivityTest.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Ipaddress of device to check the connectivity
          in: body
          name: ipConnectivityJson
          required: true
          schema:
            $ref: '#/definitions/ipConnectivity'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1dataSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1ipConnectivityTest~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to test the connectivity of the target IP address.
      operationId: ipConnectivityTest.do
      summary: This API is used to test the connectivity of the target IP address.
  /provisioning/saveTopology.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'JSON data to add the list of temp action. An empty array ''[]'' input will be used to save all tempActions created in CVP'
          in: body
          name: saveTopology
          required: false
          schema:
            default: '[]'
            type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1dataSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1saveTopology~1ErrorCodes'
      tags:
        - provisioning
      deprecated: true
      description: |-
        This API is used to save the temporary changes made in the Network Provisioning page.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. Uses should be migrated to the /provisioning/v2/saveTopology.do API.
      operationId: saveTopology.do
      summary: This API is used to save the temporary changes made in the Network Provisioning page.
  /provisioning/searchTopology.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Text to be be searched
          in: query
          name: queryParam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/searchtopologyjson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1searchTopology~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to perform search on Topology data.
      operationId: searchTopology.do
      summary: This API is used to perform search on Topology data.
  /provisioning/updateNetElementImageById.do:
    post:
      consumes:
        - multipart/form-data
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Image to upload - The image must be in .png format
          format: byte
          in: formData
          name: netElementImage
          required: true
          type: file
        - description: the net Element ID
          format: string
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1dataSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1updateNetElementImageById~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to update the uploaded image information by netelement id for Topology in the CVP system.
      operationId: updateNetElementImageById.do
      summary: This API is used to update the uploaded image information by netelement id
  /provisioning/updateReconcileConfiglet.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The json format
          in: body
          name: updateReconcile
          required: true
          schema:
            $ref: '#/definitions/updateReconcile'
        - description: The device netelement id
          in: query
          name: netElementId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/updateReconcileConfigletModel'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1updateReconcileConfigErrorCode'
      tags:
        - provisioning
      description: Adds or updates the reconcile configlet
      operationId: updateReconcileConfiglet.do
      summary: This API used to add or update reconcile configlet
  /provisioning/v2/getconfigfortask.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Work Order Id for which the config to be fetched.
          in: query
          name: workorderid
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1vesionTwoGetConfigForTaskjson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getconfigfortask~1ErrorCodes'
      tags:
        - provisioning
      deprecated: true
      description: |-
        Fetches configlets for the specified task.

        **DEPRECATION NOTICE**: This API is marked as deprecated as of the 2020.2 train. Uses should be migrated to the /provisioning/v3/getconfigfortask API.
      operationId: v2/getconfigfortask.do
      summary: This API is used to get configlets for the specified task.
  /provisioning/v2/saveTopology.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'JSON data to add the list of temp action. An empty array ''[]'' input will be used to save all tempActions created in CVP.'
          in: body
          name: saveTopology
          required: false
          schema:
            default: '[]'
            type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1dataSuccessWithTaskIds'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1v2~1saveTopology~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to save the changes made in ztp.(Optional - Call with list of temporary proposed actions)
      operationId: v2_saveTopology.do
      summary: This API is used to save the changes made in ztp.
  /provisioning/v2/validateAndCompareConfiglets.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Configlets that are to be validated. Possible Values of pageType - ''viewConfig'', ''managementIPValidation'', ''validate'' etc..'
          in: body
          name: validate
          required: true
          schema:
            $ref: '#/definitions/validateAndCompareConfiglets'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/v2~1validateandcomparejson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1v2~1validateAndCompareConfiglets~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to validate configlets and to generate reconcile configlets.
      operationId: validateAndCompareConfiglets.do
      summary: This API is used to validate configlets and to generate reconcile configlets.
  /provisioning/v3/filterTopology.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The node id
          in: query
          name: nodeId
          required: false
          type: string
        - description: Text to be searched for
          in: query
          name: queryParam
          required: false
          type: string
        - description: The format of view - 'topology' or 'list'
          in: query
          name: format
          required: true
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: filterTopology will return one of 'topology' or 'list' based on the format specified
          schema:
            $ref: '#/definitions/~1filterTopologyJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1filterTopology~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to retrieve ZTP topology data
      operationId: v3/filterTopology.do
      summary: This API is used to retrieve ZTP topology data
  /provisioning/v3/getConfiglets.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Object type - 'netelement' or 'container'
          format: string
          in: query
          name: objectType
          type: string
        - description: Object id - netElementId or containerId
          format: string
          in: query
          name: objectId
          type: string
        - description: 'Type of configlet to return. Following types are allowed :-<br><ul><li>All - Returns every type of configlet</li><li>Configlet - Returns static and generated configlets</li><li>Builder - Returns builder as well as draft configlets</li><li>Draft - Returns draft configlets</li><li>BuilderWithoutDraft - Returns only builder configlets</li><li>IgnoreDraft - Returns everything other than draft configlets</li><li>Static - Returns static configlets </li><li>Generated - Returns generated configlets</li></ul>Multiple values separated by comma can be given to type parameter (eg. static,generated will fetch both the types). '
          format: string
          in: query
          name: type
          type: string
        - description: Start index for pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: 'End index for the pagination. If 0, then all records will be returned'
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: 'Sort based on the column .Sortable Columns are name,containerCount,netElementCount,note,type,user,dateTimeInLongFormat'
          format: string
          in: query
          name: sortByColumn
          type: string
        - description: Sort Order - Ascending or Descending
          format: string
          in: query
          name: sortOrder
          type: string
        - description: 'Flag to handle whether the configlet body is returned. Currently only lightRead=true is supported. For uses that set lightRead=false, refer to /configlet/getConfiglets.do'
          in: query
          name: lightRead
          type: boolean
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1getConfigletsJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1getConfigletsErrorCode'
      tags:
        - provisioning
      description: 'This API is used to get the Configlets. Parameters - ''type'', ''objectType'' and ''objectId'' are case sensitive'
      operationId: v3/getConfiglets.do
      summary: This API is used to get the Configlets
  /provisioning/v3/getContainerInfo.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Container Id for which the information needs to be fetched.
          in: query
          name: containerId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/getContainerinfobyidjson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1getContainerInfoById~1ErrorCodes'
      tags:
        - provisioning
      description: 'This API is used to get the container info for the given containerId. '
      operationId: v3/getContainerInfo.do
      summary: This API is used to get the container info for the given containerId.
  /provisioning/v3/getconfigfortask.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Work order id for which the configuration has to be retrived.
          in: query
          name: workorderid
          required: true
          type: string
        - description: View mode of the configlet. Possible values - 'saved' and 'current'
          in: query
          name: configviewmode
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1version3getconfigfortask'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1v3~1getconfigfortask~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to get configlets for a specified according to the view type - 'saved' or 'current'
      operationId: v3/getconfigfortask.do
      summary: This API is used to get configlets for a specified task
  /provisioning/v3/searchConfiglets.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Object type - netelement or container
          format: string
          in: query
          name: objectType
          type: string
        - description: Object id - netElementId or containerId
          format: string
          in: query
          name: objectId
          type: string
        - description: 'Type of configlet to return. Following types are allowed :-<br><ul><li>Configlet - Returns static and generated configlets</li><li>Builder - Returns builder as well as draft configlets</li><li>Draft - Returns draft configlets</li><li>BuilderWithoutDraft - Returns only builder configlets</li><li>IgnoreDraft - Returns everything other than draft configlets</li><li>Static - Returns static configlets </li><li>Generated - Returns generated configlets</li></ul>Multiple values separated by comma can be given to type parameter (eg. static,generated will fetch both the types). '
          format: string
          in: query
          name: type
          required: false
          type: string
        - description: Search String
          format: string
          in: query
          name: queryParam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination.If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
        - description: 'Sort based on the column .Sortable Columns are name,containerCount,netElementCount,note,type,user,dateTimeInLongFormat'
          format: string
          in: query
          name: sortByColumn
          type: string
        - description: Sort Order - Ascending or Descending
          format: string
          in: query
          name: sortOrder
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1getConfigletsJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1provisioning~1searchConfigletsErrorCode'
      tags:
        - provisioning
      description: This API is used to get a list of configlets based on a search string
      operationId: v3/searchConfiglets.do
      summary: This API is used to get configlets based on a search string
  /provisioning/v3/searchTopology.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Text to be be searched
          in: query
          name: queryParam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: 'If the returned total is -1, use /provisioning/searchTopology instead'
          schema:
            $ref: '#/definitions/searchtopologyjson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '440':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1searchTopology~1ErrorCodes'
      tags:
        - provisioning
      description: This API is used to perform search on Topology data.
      operationId: v3/searchTopology.do
      summary: This API is used to perform search on Topology data.
  /role/createRole.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Holds the JSON POST data for creating a role in the CVP system. ModuleList contains list of available modules along with its permission. Example: "ModuleList": [ { "mode": "rw", "name": "account"},... ]'
          in: body
          name: Create Role
          required: true
          schema:
            $ref: '#/definitions/~1role~1createRole'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1createRole~1Response'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1createRole~1ErrorCodes'
      tags:
        - role
      description: This is a proxy service that creates role in the CVP system.
      operationId: createRole.do
      summary: To create role in the CVP system.
  /role/deleteRoles.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'List of comma separated role keys that is to be deleted. Eg.["label-key1","label-key2"]'
          in: body
          name: key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1userManagement~1responseForSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1deleteRole~1ErrorCodes'
      tags:
        - role
      description: This is a proxy service that deletes a role from the CVP system.
      operationId: deleteRoles.do
      summary: To delete a role in the CVP system.
  /role/getAppliedUserCount.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The role Id for which the applied user count needs to be fetched
          in: query
          name: roleId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1userManagement~1getAppliedUserCountResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1getAppliedUserCount~1ErrorCodes'
      tags:
        - role
      description: This is a proxy service that get the count of applied users when updating a role to the CVP system.
      operationId: getAppliedUserCount.do
      summary: To get the count of applied users when updating a role to the CVP system.
  /role/getAppliedUsers.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The role name for which the user list is to be fetched
          format: string
          in: query
          name: roleName
          required: true
          type: string
        - description: The query param to be searched
          format: string
          in: query
          name: queryparam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/role~1getAppliedUsersList'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1getAppliedUsers~1ErrorCodes'
      tags:
        - role
      description: Returns the paginated applied users list
      operationId: getAppliedUsers.do
      summary: To get the applied users list for a role
  /role/getRole.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique id associated with the role
          format: string
          in: query
          name: roleId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1createRole~1Response'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1getRole~1ErrorCodes'
      tags:
        - role
      description: Returns the details about the corresponding role
      operationId: getRole.do
      summary: 'To get the role for the given role id '
  /role/getRoles.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The query param to be searched
          format: string
          in: query
          name: queryParam
          required: false
          type: string
        - description: Start index for the pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1getRoleListResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1getRoles~1ErrorCodes'
      tags:
        - role
      description: Returns the paginated roles result
      operationId: getRoles.do
      summary: To get the roles
  /role/updateRole.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Holds the JSON POST data for updating a role to CVP system.
          in: body
          name: Update Role
          required: true
          schema:
            $ref: '#/definitions/~1role~1UpdateRoleDetails'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1userManagement~1responseForSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1role~1updateRole~1ErrorCodes'
      tags:
        - role
      description: This is a proxy service that updates a role to the CVP system.
      operationId: updateRole.do
      summary: To update a role to the CVP system.
  /rollback/addNetworkRollbackTempActions.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: |-
            Json to create temporary action for the container level rollback.  
              ["rollbackType" can be: 1)Config Rollback, 
             2)Image Rollback, 3)Config and Image Rollback ]
          in: body
          name: addNetworkRollbackTempActionsJson
          required: true
          schema:
            $ref: '#/definitions/~1rollback~1addNetworkRollbackTempActionsJson'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1rollback~1addNetworkRollbackTempActionsResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1rollback~1addTempRollbackActionsErrorCode'
      tags:
        - rollback
      description: This proxy service is used to create temporary action for the container level rollback
      operationId: addNetworkRollbackTempActions.do
      summary: To create temporary actions for the container level rollback
  /rollback/addTempRollbackAction.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: |-
            Json to create temporary action for the device level rollback.   
              ["rollbackType" can be: 1)Config Rollback, 
             2)Image Rollback, 3)Config and Image Rollback ]
          in: body
          name: addTempRollbackActionJson
          required: true
          schema:
            $ref: '#/definitions/~1rollback~1addTempRollbackActionJson'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1rollback~1addTempRollbackActionsResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1rollback~1addTempRollbackActionsErrorCode'
      tags:
        - rollback
      description: This proxy service is used to create temporary action for the device level rollback
      operationId: addTempRollbackAction.do
      summary: To create temporary action for the device level rollback
  /rollback/getNetElementsForRollback.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: container Id for which info to be retrieved
          in: query
          name: containerId
          required: true
          type: string
        - description: timestamp
          format: int64
          in: query
          name: timestamp
          required: true
          type: integer
        - description: searchText to be retrieved
          in: query
          name: searchText
          required: false
          type: string
        - description: |-
            startIndex   
              [Please enter valid Integer]
          in: query
          name: startIndex
          required: true
          type: string
        - description: |-
            endIndex   
              [Please enter valid Integer]
          in: query
          name: endIndex
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1rollback~1getHierarchyChangeInfoResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1rollback~1getHierarchyChangeInfoErrorCode'
      tags:
        - rollback
      description: This proxy service is used to fetch all devices under given containerId with hierarchy change info etc
      operationId: getHierarchyChangeInfo.do
      summary: To get netelements Information
  '/snapshot/deviceConfigs/{deviceID}':
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: the serial number of the device.
          in: path
          name: deviceID
          required: true
          type: string
        - description: 'If it is true, it will fetch the current image info and running config info,ignores the timeStamp.'
          in: query
          name: current
          required: true
          type: boolean
        - description: 'if current field value is not “true”, then the image info and running config info for this timestamp will be fetched.'
          in: query
          name: timestamp
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1deviceConfigsResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1deviceConfigsErrorCode'
      tags:
        - snapshot
      description: This proxy service is used to get image info and running config by deviceID for the specific timeStamp.
      operationId: deviceConfigs
      summary: To get image info and running config by deviceID for the specific timeStamp
  /snapshot/getSnapshotChartData.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: |-
            Json to get the snapshot chart data.  
              [ Both "netElementId" and "containerId" cannot be populated at the same time.  
              "interval" can be: 1)hourly, 
             2)daily, 3)weekly, 4)monthly ]
          in: body
          name: snapshotChartJson
          required: true
          schema:
            $ref: '#/definitions/~1snapshot~1snapshotChartJson'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1getSnapshotChartData'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1getSnapshotChartDataErrorCode'
      tags:
        - snapshot
      description: This proxy service is used to fetch data for the snapshot chart for a device / container
      operationId: snapshot_getSnapshotChartData.do
      summary: To get SnapshotChartData
  /snapshot/hierarchychangeinfo:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: timestamp value of the selected rollback point.
          format: int64
          in: query
          name: timestamp
          required: true
          type: integer
        - description: deviceIDs - serialNumber of the devices.
          in: body
          name: deviceIDArrayJson
          required: true
          schema:
            $ref: '#/definitions/~1snapshot~1deviceIDArrayJson'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1hierarchychangeinfoResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1hierarchychangeinfoErrorCode'
      tags:
        - snapshot
      description: This proxy service is used to fetch the hierarchy change information of the devices at given timeStamp.
      operationId: hierarchychangeinfo
      summary: To get the  hierarchy change info
  /snapshot/template:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Id of the template.
          in: query
          name: templateId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templateResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templateErrorCode'
      tags:
        - snapshot
      description: This proxy service is used to get the template info for given templateId..
      operationId: getSnapshotChartData.do
      summary: To get the  template
  /snapshot/templates:
    delete:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'JSON holds snapshot template key list which needs to be deleted. Example : [ "Id1", "Id2", ...]'
          in: body
          name: Templates
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1deleteTemplatesResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1deleteTemplatesErrorCode'
      tags:
        - snapshot
      description: This proxy service is used to delete snapshot templates
      operationId: delete_templates
      summary: To delete the  Snapshot templates
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: query to be retrieved
          in: query
          name: queryparam
          required: false
          type: string
        - description: |-
            startIndex 
             [Please enter valid Integer]
          in: query
          name: startIndex
          required: true
          type: string
        - description: |-
            endIndex 
             [Please enter valid Integer]
          in: query
          name: endIndex
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templatesResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templatesErrorCode'
      tags:
        - snapshot
      description: This proxy service is used to fetch all the template key and names.
      operationId: get_templates
      summary: To get the  Snapshot templates
  /snapshot/templates/info:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: templateIDs - Keys of templates
          in: body
          name: templateIDsArrayJson
          required: true
          schema:
            $ref: '#/definitions/~1snapshot~1templateIDsArrayJson'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templatesinfoResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templatesinfoErrorCode'
      tags:
        - snapshot
      description: This proxy service is used to fetch the template info of template keys given
      operationId: templatesinfo
      summary: To get the  template info for template keys
  /snapshot/templates/schedule:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: |-
            "name": "name you want to give to the template,"
            "commands": ["list of commands (show or bash)", ...],
            "deviceList": ["list of device serial numbers on which to schedule"],
            "frequency": "frequency in seconds in string format. Eg. ‘200’, ‘20’".
          in: body
          name: scheduleJson
          required: true
          schema:
            $ref: '#/definitions/~1snapshot~1templates~1scheduleJson'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templates~1scheduleResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templates~1scheduleErrorCode'
      tags:
        - snapshot
      description: This proxy service is used to create the template and schedule the list of commands against the mentioned list of devices with the given frequency.
      operationId: /snapshot/templates/schedule
      summary: To schedule and create the template.
  '/snapshot/templates/{templateKey}/capture':
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: template key of the template.
          in: path
          name: templateKey
          required: true
          type: string
        - description: |-
            deviceIDs - serialNumber of the deviceID.
            If generatedBy field is absent, it gets defaulted to "Change Control". Only supported values for this field are "User" and "ChangeControl".
          in: body
          name: captureJson
          required: true
          schema:
            $ref: '#/definitions/~1snapshot~1templates~1captureJson'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templates~1captureResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1snapshot~1templates~1captureErrorCode'
      tags:
        - snapshot
      description: This proxy service is used to capture the snapshot for a device using given templatekey
      operationId: capture
      summary: To capture the  Snapshot
  /ssl/bindCertWithCSR.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: CA Signed public certificate file. PublicCert file in Base64 format and PublicCertFileName
          in: body
          name: publicCert
          required: true
          schema:
            $ref: '#/definitions/SSLBindCertWithCSRInput'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLCertificateDetailsResponseJsonWithoutKey'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLBindCertWithCSRError'
      tags:
        - ssl
      description: This service is used to import CA signed public certificate.
      operationId: bindCertWithCSR.do
      summary: To import CA signed public certificate.
  /ssl/deleteCSR.do:
    delete:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLResponseDataJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLDeleteCSRError'
      tags:
        - ssl
      description: This service is used to delete CSR.
      operationId: deleteCSR.do
      summary: To delete CSR.
  /ssl/deleteProposedCertificate.do:
    delete:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLResponseDataJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLDeleteProposedCertificateError'
      tags:
        - ssl
      description: This service is used to delete proposed certificate.
      operationId: deleteProposedCertificate.do
      summary: To delete proposed certificate associated to user's session.
  /ssl/exportCSR.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLExportCSRResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLExportCSRError'
      tags:
        - ssl
      description: This service is used to export the CSR.
      operationId: exportCSR.do
      summary: To export the CSR.
  /ssl/exportCertificate.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Certificate Details. Certificate Key and PassPhrase
          in: body
          name: exportCertificate
          required: true
          schema:
            $ref: '#/definitions/SSLExportCertificateInput'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLExportCertificateResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLExportCertificateError'
      tags:
        - ssl
      description: This service is used to export the Certificate.
      operationId: exportCertificate.do
      summary: To export the Certificate.
  /ssl/generateCSR.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'CSR details. Values for keyLength - 2048 or 4096, digestAlgorithm - SHA256withRSA, and encryptAlgorithm - RSA.'
          in: body
          name: generateCSR
          required: true
          schema:
            $ref: '#/definitions/SSLGenerateCSRInputJson'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLCSRResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLGenerateCSRError'
      tags:
        - ssl
      description: This service is used to generate CSR through CVP.
      operationId: generateCSR.do
      summary: To generate CSR through CVP.
  /ssl/generateCertificate.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Certificate Details. Values for keyLength - 2048 or 4096, digestAlgorithm - SHA256withRSA, and encryptAlgorithm - RSA.'
          in: body
          name: generateCertificate
          required: true
          schema:
            $ref: '#/definitions/SSLGenerateCertificateInput'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLCertificateDetailsResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLGenerateCertificateError'
      tags:
        - ssl
      description: 'This service is used to generate certificate through CVP. (Note: The key attribute in response json will be null for the certType ''cvpCert''.)'
      operationId: generateCertificate.do
      summary: To generate certificate through CVP.
  /ssl/getCertificate.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Types of the certificate. Possible Cert Types : cvpCert, csr, dcaCert'
          in: query
          name: certType
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLCertificateDetailsResponseJson'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLGetCertificatesError'
      tags:
        - ssl
      description: This proxy service is used to get certificate.
      operationId: getCertificate.do
      summary: To get the certificate based on CertType.
  /ssl/importCertAndPrivateKey.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Certificate Details . CertType: cvpCert,dcaCert. PrivateKey and PublicCert files in Base64 format . PrivateKeyFileName , PublicCertFileName and PassPhrase'
          in: body
          name: publicCert
          required: true
          schema:
            $ref: '#/definitions/SSLImportCertAndPrivateKeyInput'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLCertificateDetailsResponseJsonWithoutKey'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLImportCertAndPrivateKeyError'
      tags:
        - ssl
      description: This service is used to import public certificate with private key.
      operationId: importCertAndPrivateKey.do
      summary: To import public certificate with private key.
  /ssl/installCertificate.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLResponseDataJsonWithEventIdAndType'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/SSLInstallCertificateError'
      tags:
        - ssl
      description: This service is used to install proposed certificate in CVP.
      operationId: installCertificate.do
      summary: To install proposed certificate in CVP.
  /task/addNoteToTask.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Adds notes to the selected task
          in: body
          name: note
          required: true
          schema:
            $ref: '#/definitions/notesWorkFlow'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getAddNotesToTaskSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1addNoteToTaskErrorCode'
      tags:
        - task
      description: Adds notes to the task
      operationId: addNoteToTask.do
      summary: This API is used to add notes of selected task
  /task/cancelTask.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Array of task ids to be cancelled
          in: body
          name: taskIds
          required: true
          schema:
            $ref: '#/definitions/taskid'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getCancelTaskSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1cancelTaskErrorCode'
      tags:
        - task
      description: Cancels the task created
      operationId: cancelTask.do
      summary: This API is used to cancel the task
  /task/executeTask.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Array of task ids to be executed
          in: body
          name: taskId
          required: true
          schema:
            $ref: '#/definitions/taskid'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getExecuteTaskSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1executeTaskErrorCode'
      tags:
        - task
      description: Triggers the execution of selected work flow task
      operationId: executeTask.do
      summary: This API is used to execute the selected task
  /task/getTaskById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique ID of the workflow task
          in: query
          name: taskId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getTaskByIdSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getTaskByIdErrorCode'
      tags:
        - task
      description: Fetches the task data of corresponding task id
      operationId: getTaskById.do
      summary: This API is used to get the task data
  /task/getTaskStatusById.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Unique ID of the work flow task
          in: query
          name: taskId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getTaskStatusByIdSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getTaskStatusByIdErrorCode'
      tags:
        - task
      description: Fetches the task status of the requested task id
      operationId: getTaskStatusById.do
      summary: This API is used to get the task status
  /task/getTasks.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: The query parameter. If it is empty then all tasks will be returned
          format: String
          in: query
          name: queryparam
          type: string
        - description: Starting index of pagination
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: Ending index of pagination. If end index is 0 then all the records will be returned
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getTasksSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getTasksErrorCode'
      tags:
        - task
      description: Fetches the list of tasks based upon the query value
      operationId: getTasks.do
      summary: This API is used to get the list of tasks
  /trustedCertificates/delete.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'JsonArray to delete trustedServers.Example: { "data ": ["string"]}'
          in: body
          name: data
          required: true
          schema:
            $ref: '#/definitions/TrustedCertificatesArray'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/TrustedCertificatesDeleteResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/TrustedCertificatesDeleteError'
      tags:
        - trustedCertificates
      description: This service is used to delete trusted server certificate.
      operationId: /trustedCertificates/delete.do
      summary: To delete trusted server certificate for given fingerprint
  /trustedCertificates/export.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'JsonArray to export trusted server Certificates.Example: { "data ": ["string"]}'
          in: body
          name: data
          required: true
          schema:
            $ref: '#/definitions/TrustedCertificatesArray'
      responses:
        '200':
          description: Description was not specified
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/TrustedCertificatesExportError'
      tags:
        - trustedCertificates
      description: This service is used to export trusted server certificate.
      operationId: /trustedCertificates/export.do
      summary: To export trusted server certificate for given fingerprint
  /trustedCertificates/getCertInfo.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: fingerPrint of the trusted server
          in: query
          name: fingerPrint
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/TrustedCertificatesCertDetail'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/TrustedCertificatesGetCertDetailError'
      tags:
        - trustedCertificates
      description: This proxy service is used to get Trusted Server Information.
      operationId: /trustedCertificates/getCertInfo.do
      summary: To get the trusted server Information.
  /trustedCertificates/getCerts.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Query Param for the trusted server
          in: query
          name: queryParam
          required: false
          type: string
        - description: Start index for the pagination
          in: query
          name: startIndex
          required: true
          type: integer
        - description: End index for the pagination. If end index is 0 then all the records will be returned
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/TrustedCertificates'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/TrustedCertificatesGetCertsError'
      tags:
        - trustedCertificates
      description: This proxy service is used to get Trusted Servers.
      operationId: /trustedCertificates/getCerts.do
      summary: To get the trusted servers.
  /trustedCertificates/upload.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Base64 encoded certificate string.Example: { "certificate ": ["string"]}'
          in: body
          name: certificate
          required: true
          schema:
            $ref: '#/definitions/TrustedCertificatesUpload'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/TrustedCertificatesUploadResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/TrustedCertificatesUploadError'
      tags:
        - trustedCertificates
      description: This service is used to upload Trusted Servers and adds the certificate to the system.
      operationId: /trustedCertificates/upload.do
      summary: This uploads trusted servers and adds the certificate to the system.
  /user/addUser.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Holds the JSON POST data for adding an user to CVP system.
          in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/~1user~1UserDetails'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1responseForAddUser'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1addUserErrorCode'
      tags:
        - user
      description: This is a proxy service that adds an user to the CVP system.
      operationId: addUser.do
      summary: To adds an user to the CVP system.
  /user/deleteUsers.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: 'Holds the JSON POST data for deleting user(s) from the CVP system. Example : ["userId1", "userId2",...]'
          in: body
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1responseForSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1deleteUsersErrorCode'
      tags:
        - user
      description: This is a proxy service that is used to delete user(s) from the CVP system.
      operationId: deleteUsers.do
      summary: To delete user(s) from the CVP system.
  /user/enableDisableUsers.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: enable/disable
          in: query
          name: state
          required: true
          type: string
        - description: 'users to be enabled/disabled : Example : ["User1","User1"]'
          in: body
          name: enableDisableUsersJson
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1responseForSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1enableDisableUsersErrorCode'
      tags:
        - user
      description: This is a proxy service that is used to to enable/disable user(s) in the CVP system.
      operationId: enableDisableUsers.do
      summary: This API updates the user status.
  /user/getOnlineUserCount.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1getOnlineUserCount'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1getOnlineUserCountErrorCode'
      tags:
        - user
      description: This service is used to retrieve the count of online users.
      operationId: getOnlineUserCount.do
      summary: Gets the count of online users in cvp.
  /user/getUser.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: unique user id of the user
          in: query
          name: userId
          required: true
          type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1getUserDetails'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1getUserErrorCode'
      tags:
        - user
      description: This is a proxy service that is used to retrieve an user for a particular user ID.
      operationId: getUser.do
      summary: Gets user by ID
  /user/getUsers.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: query to be retrieved
          in: query
          name: queryparam
          required: false
          type: string
        - description: startIndex of log
          format: int32
          in: query
          name: startIndex
          required: true
          type: integer
        - description: endIndex of log
          format: int32
          in: query
          name: endIndex
          required: true
          type: integer
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1getUsersDetails'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1getUsersErrorCode'
      tags:
        - user
      description: This is a proxy service that is used to retrieve all users' informations.
      operationId: getUsers.do
      summary: Gets all users information
  /user/updateUser.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Holds the id of the user.
          in: query
          name: userId
          required: true
          type: string
        - description: Holds the JSON POST data for updating an user in CVP system.
          in: body
          name: UserDetails
          required: true
          schema:
            $ref: '#/definitions/~1user~1UserDetails'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1responseForSuccess'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1user~1updateUserErrorCode'
      tags:
        - user
      description: This is a proxy service that updates an user in the CVP system.
      operationId: updateUser.do
      summary: To update an user in the CVP system..
  /workflow/addWorkOrderLog.do:
    post:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: Json formatted log data to be added
          in: body
          name: Task logs json
          required: true
          schema:
            $ref: '#/definitions/addTaskLog'
      responses:
        '200':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1getAddTaskLogSuccessResponse'
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1addWorkOrderLogErrorCode'
      tags:
        - task
      description: Adds log message to the task
      operationId: addWorkOrderLog.do
      summary: This API is used to add logs to the task manually
  /workflow/exportLogs.do:
    get:
      produces:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - description: taskId
          in: query
          name: taskId
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
        '401':
          description: Unauthorized
          schema:
            type: string
        '403':
          description: Forbidden URL
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            $ref: '#/definitions/~1task~1exportLogsErrorCode'
      tags:
        - task
      description: This proxy service is used to export task logs.
      operationId: workflow_exportLogs.do
      summary: To export task logs
swagger: '2.0'
tags:
  - description: AAA Operations
    name: aaa
  - description: Audit Log Operations
    name: audit
  - description: Configlet Operations
    name: configlet
  - description: CVP Cluster Information Operations
    name: cvpInfo
  - description: UI Event Notification Operations
    name: event
  - description: Image Operations
    name: image
  - description: Device Inventory Operations
    name: inventory
  - description: Device Label Operations
    name: label
  - description: Login Operations
    name: login
  - description: Network Provisioning Operations
    name: provisioning
  - description: Role Management Operations
    name: role
  - description: Rollback Operations
    name: rollback
  - description: Device Snapshot Operations
    name: snapshot
  - description: SSL Operations
    name: ssl
  - description: Task Operations
    name: task
  - description: Trusted Certificate Operations
    name: trustedCertificates
  - description: User Management Operations
    name: user
